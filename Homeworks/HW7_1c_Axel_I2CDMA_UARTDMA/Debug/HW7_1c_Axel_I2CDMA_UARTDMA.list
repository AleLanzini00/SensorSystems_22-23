
HW7_1c_Axel_I2CDMA_UARTDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ed8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0800a078  0800a078  0001a078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4dc  0800a4dc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4dc  0800a4dc  0001a4dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4e4  0800a4e4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4e4  0800a4e4  0001a4e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4e8  0800a4e8  0001a4e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a4ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  200001ec  0800a6d8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  0800a6d8  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110fe  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c1  00000000  00000000  0003131a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  000333e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00034388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017403  00000000  00000000  00035280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e0f  00000000  00000000  0004c683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091290  00000000  00000000  0005e492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef722  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005508  00000000  00000000  000ef774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a060 	.word	0x0800a060

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800a060 	.word	0x0800a060

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af02      	add	r7, sp, #8
 8000f62:	6078      	str	r0, [r7, #4]

	if(htim==&htim2){
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a10      	ldr	r2, [pc, #64]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d118      	bne.n	8000f9e <HAL_TIM_PeriodElapsedCallback+0x42>

	  //set MSB = 1 to enable address auto increment
	  uint8_t output_addr = (0x80 | x_output_addr);
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	73fb      	strb	r3, [r7, #15]

	  HAL_I2C_Master_Transmit(&hi2c1, address, &output_addr, 1, 100);
 8000f78:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	b299      	uxth	r1, r3
 8000f7e:	f107 020f 	add.w	r2, r7, #15
 8000f82:	2364      	movs	r3, #100	; 0x64
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2301      	movs	r3, #1
 8000f88:	480a      	ldr	r0, [pc, #40]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f8a:	f001 fdf5 	bl	8002b78 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive_DMA(&hi2c1, address, axel_val, 5);
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	b299      	uxth	r1, r3
 8000f94:	2305      	movs	r3, #5
 8000f96:	4a08      	ldr	r2, [pc, #32]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f98:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f9a:	f001 feeb 	bl	8002d74 <HAL_I2C_Master_Receive_DMA>

	}
}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200002bc 	.word	0x200002bc
 8000fac:	20000002 	.word	0x20000002
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	20000208 	.word	0x20000208
 8000fb8:	200003a8 	.word	0x200003a8

08000fbc <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000fbc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fc0:	b09c      	sub	sp, #112	; 0x70
 8000fc2:	af06      	add	r7, sp, #24
 8000fc4:	6078      	str	r0, [r7, #4]

	int len = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	657b      	str	r3, [r7, #84]	; 0x54
	char str[64];

	float x_g_value = axel_val[0]/64.0;
 8000fca:	4b32      	ldr	r3, [pc, #200]	; (8001094 <HAL_I2C_MasterRxCpltCallback+0xd8>)
 8000fcc:	f993 3000 	ldrsb.w	r3, [r3]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff faaf 	bl	8000534 <__aeabi_i2d>
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <HAL_I2C_MasterRxCpltCallback+0xdc>)
 8000fdc:	f7ff fc3e 	bl	800085c <__aeabi_ddiv>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f7ff fde6 	bl	8000bb8 <__aeabi_d2f>
 8000fec:	4603      	mov	r3, r0
 8000fee:	653b      	str	r3, [r7, #80]	; 0x50
	float y_g_value = axel_val[2]/64.0;
 8000ff0:	4b28      	ldr	r3, [pc, #160]	; (8001094 <HAL_I2C_MasterRxCpltCallback+0xd8>)
 8000ff2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fa9c 	bl	8000534 <__aeabi_i2d>
 8000ffc:	f04f 0200 	mov.w	r2, #0
 8001000:	4b25      	ldr	r3, [pc, #148]	; (8001098 <HAL_I2C_MasterRxCpltCallback+0xdc>)
 8001002:	f7ff fc2b 	bl	800085c <__aeabi_ddiv>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	4610      	mov	r0, r2
 800100c:	4619      	mov	r1, r3
 800100e:	f7ff fdd3 	bl	8000bb8 <__aeabi_d2f>
 8001012:	4603      	mov	r3, r0
 8001014:	64fb      	str	r3, [r7, #76]	; 0x4c
	float z_g_value = axel_val[4]/64.0;
 8001016:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <HAL_I2C_MasterRxCpltCallback+0xd8>)
 8001018:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fa89 	bl	8000534 <__aeabi_i2d>
 8001022:	f04f 0200 	mov.w	r2, #0
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <HAL_I2C_MasterRxCpltCallback+0xdc>)
 8001028:	f7ff fc18 	bl	800085c <__aeabi_ddiv>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff fdc0 	bl	8000bb8 <__aeabi_d2f>
 8001038:	4603      	mov	r3, r0
 800103a:	64bb      	str	r3, [r7, #72]	; 0x48

	len = snprintf(str, sizeof(str), "X: %+.2f g\r\nY: %+.2f g\r\nZ: %+.2f g\r\n\n", x_g_value, y_g_value, z_g_value);
 800103c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800103e:	f7ff fa8b 	bl	8000558 <__aeabi_f2d>
 8001042:	4604      	mov	r4, r0
 8001044:	460d      	mov	r5, r1
 8001046:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001048:	f7ff fa86 	bl	8000558 <__aeabi_f2d>
 800104c:	4680      	mov	r8, r0
 800104e:	4689      	mov	r9, r1
 8001050:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001052:	f7ff fa81 	bl	8000558 <__aeabi_f2d>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	f107 0008 	add.w	r0, r7, #8
 800105e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001062:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001066:	e9cd 4500 	strd	r4, r5, [sp]
 800106a:	4a0c      	ldr	r2, [pc, #48]	; (800109c <HAL_I2C_MasterRxCpltCallback+0xe0>)
 800106c:	2140      	movs	r1, #64	; 0x40
 800106e:	f006 fd6b 	bl	8007b48 <sniprintf>
 8001072:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&str, len);
 8001074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001076:	b29a      	uxth	r2, r3
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	4619      	mov	r1, r3
 800107e:	4808      	ldr	r0, [pc, #32]	; (80010a0 <HAL_I2C_MasterRxCpltCallback+0xe4>)
 8001080:	f005 f83c 	bl	80060fc <HAL_UART_Transmit_DMA>

	HAL_TIM_Base_Start_IT(&htim2);
 8001084:	4807      	ldr	r0, [pc, #28]	; (80010a4 <HAL_I2C_MasterRxCpltCallback+0xe8>)
 8001086:	f004 fb63 	bl	8005750 <HAL_TIM_Base_Start_IT>
}
 800108a:	bf00      	nop
 800108c:	3758      	adds	r7, #88	; 0x58
 800108e:	46bd      	mov	sp, r7
 8001090:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001094:	200003a8 	.word	0x200003a8
 8001098:	40500000 	.word	0x40500000
 800109c:	0800a078 	.word	0x0800a078
 80010a0:	20000304 	.word	0x20000304
 80010a4:	200002bc 	.word	0x200002bc

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b094      	sub	sp, #80	; 0x50
 80010ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ae:	f000 fce1 	bl	8001a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b2:	f000 f881 	bl	80011b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b6:	f000 f9b9 	bl	800142c <MX_GPIO_Init>
  MX_DMA_Init();
 80010ba:	f000 f98f 	bl	80013dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010be:	f000 f963 	bl	8001388 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010c2:	f000 f8e5 	bl	8001290 <MX_I2C1_Init>
  MX_TIM2_Init();
 80010c6:	f000 f911 	bl	80012ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  	char str[64];
	int len = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	647b      	str	r3, [r7, #68]	; 0x44

	//Axel initialization
	if(HAL_I2C_Master_Transmit(&hi2c1, address, ctrl_reg1, 1, 10) == HAL_OK){
 80010ce:	4b2f      	ldr	r3, [pc, #188]	; (800118c <main+0xe4>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b299      	uxth	r1, r3
 80010d4:	230a      	movs	r3, #10
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	4a2d      	ldr	r2, [pc, #180]	; (8001190 <main+0xe8>)
 80010dc:	482d      	ldr	r0, [pc, #180]	; (8001194 <main+0xec>)
 80010de:	f001 fd4b 	bl	8002b78 <HAL_I2C_Master_Transmit>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d107      	bne.n	80010f8 <main+0x50>
	  len = snprintf(str, sizeof(str), "You have LIS2DE\r\n");
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	4a2b      	ldr	r2, [pc, #172]	; (8001198 <main+0xf0>)
 80010ec:	2140      	movs	r1, #64	; 0x40
 80010ee:	4618      	mov	r0, r3
 80010f0:	f006 fd2a 	bl	8007b48 <sniprintf>
 80010f4:	6478      	str	r0, [r7, #68]	; 0x44
 80010f6:	e01f      	b.n	8001138 <main+0x90>
	}else{
	  address = LIS2DE12_addr;
 80010f8:	4b28      	ldr	r3, [pc, #160]	; (800119c <main+0xf4>)
 80010fa:	781a      	ldrb	r2, [r3, #0]
 80010fc:	4b23      	ldr	r3, [pc, #140]	; (800118c <main+0xe4>)
 80010fe:	701a      	strb	r2, [r3, #0]

	  if(HAL_I2C_Master_Transmit(&hi2c1, address, ctrl_reg1, 1, 10) == HAL_OK){
 8001100:	4b22      	ldr	r3, [pc, #136]	; (800118c <main+0xe4>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b299      	uxth	r1, r3
 8001106:	230a      	movs	r3, #10
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2301      	movs	r3, #1
 800110c:	4a20      	ldr	r2, [pc, #128]	; (8001190 <main+0xe8>)
 800110e:	4821      	ldr	r0, [pc, #132]	; (8001194 <main+0xec>)
 8001110:	f001 fd32 	bl	8002b78 <HAL_I2C_Master_Transmit>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d107      	bne.n	800112a <main+0x82>
		  len = snprintf(str, sizeof(str), "You have LIS2DE12\r\n");
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	4a20      	ldr	r2, [pc, #128]	; (80011a0 <main+0xf8>)
 800111e:	2140      	movs	r1, #64	; 0x40
 8001120:	4618      	mov	r0, r3
 8001122:	f006 fd11 	bl	8007b48 <sniprintf>
 8001126:	6478      	str	r0, [r7, #68]	; 0x44
 8001128:	e006      	b.n	8001138 <main+0x90>
	  }else{
		  len = snprintf(str, sizeof(str), "No accelerometer found\r\n");
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	4a1d      	ldr	r2, [pc, #116]	; (80011a4 <main+0xfc>)
 800112e:	2140      	movs	r1, #64	; 0x40
 8001130:	4618      	mov	r0, r3
 8001132:	f006 fd09 	bl	8007b48 <sniprintf>
 8001136:	6478      	str	r0, [r7, #68]	; 0x44
	  }
	}

    HAL_UART_Transmit(&huart2, str, len, 100);
 8001138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800113a:	b29a      	uxth	r2, r3
 800113c:	1d39      	adds	r1, r7, #4
 800113e:	2364      	movs	r3, #100	; 0x64
 8001140:	4819      	ldr	r0, [pc, #100]	; (80011a8 <main+0x100>)
 8001142:	f004 ff48 	bl	8005fd6 <HAL_UART_Transmit>

    //Register configuration
	  HAL_I2C_Master_Transmit(&hi2c1, address, ctrl_reg1, 2, 10);
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <main+0xe4>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	b299      	uxth	r1, r3
 800114c:	230a      	movs	r3, #10
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2302      	movs	r3, #2
 8001152:	4a0f      	ldr	r2, [pc, #60]	; (8001190 <main+0xe8>)
 8001154:	480f      	ldr	r0, [pc, #60]	; (8001194 <main+0xec>)
 8001156:	f001 fd0f 	bl	8002b78 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Transmit(&hi2c1, address, ctrl_reg2, 2, 10);
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <main+0xe4>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	b299      	uxth	r1, r3
 8001160:	230a      	movs	r3, #10
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2302      	movs	r3, #2
 8001166:	4a11      	ldr	r2, [pc, #68]	; (80011ac <main+0x104>)
 8001168:	480a      	ldr	r0, [pc, #40]	; (8001194 <main+0xec>)
 800116a:	f001 fd05 	bl	8002b78 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Transmit(&hi2c1, address, ctrl_reg4, 2, 10);
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <main+0xe4>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b299      	uxth	r1, r3
 8001174:	230a      	movs	r3, #10
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2302      	movs	r3, #2
 800117a:	4a0d      	ldr	r2, [pc, #52]	; (80011b0 <main+0x108>)
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <main+0xec>)
 800117e:	f001 fcfb 	bl	8002b78 <HAL_I2C_Master_Transmit>

	  HAL_TIM_Base_Start_IT(&htim2);
 8001182:	480c      	ldr	r0, [pc, #48]	; (80011b4 <main+0x10c>)
 8001184:	f004 fae4 	bl	8005750 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001188:	e7fe      	b.n	8001188 <main+0xe0>
 800118a:	bf00      	nop
 800118c:	20000000 	.word	0x20000000
 8001190:	20000004 	.word	0x20000004
 8001194:	20000208 	.word	0x20000208
 8001198:	0800a0a0 	.word	0x0800a0a0
 800119c:	20000001 	.word	0x20000001
 80011a0:	0800a0b4 	.word	0x0800a0b4
 80011a4:	0800a0c8 	.word	0x0800a0c8
 80011a8:	20000304 	.word	0x20000304
 80011ac:	20000008 	.word	0x20000008
 80011b0:	2000000c 	.word	0x2000000c
 80011b4:	200002bc 	.word	0x200002bc

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b094      	sub	sp, #80	; 0x50
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 0320 	add.w	r3, r7, #32
 80011c2:	2230      	movs	r2, #48	; 0x30
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f006 f84c 	bl	8007264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	4b29      	ldr	r3, [pc, #164]	; (8001288 <SystemClock_Config+0xd0>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	4a28      	ldr	r2, [pc, #160]	; (8001288 <SystemClock_Config+0xd0>)
 80011e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ea:	6413      	str	r3, [r2, #64]	; 0x40
 80011ec:	4b26      	ldr	r3, [pc, #152]	; (8001288 <SystemClock_Config+0xd0>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011f8:	2300      	movs	r3, #0
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	4b23      	ldr	r3, [pc, #140]	; (800128c <SystemClock_Config+0xd4>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001204:	4a21      	ldr	r2, [pc, #132]	; (800128c <SystemClock_Config+0xd4>)
 8001206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	4b1f      	ldr	r3, [pc, #124]	; (800128c <SystemClock_Config+0xd4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001218:	2302      	movs	r3, #2
 800121a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800121c:	2301      	movs	r3, #1
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001220:	2310      	movs	r3, #16
 8001222:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001224:	2302      	movs	r3, #2
 8001226:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001228:	2300      	movs	r3, #0
 800122a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800122c:	2310      	movs	r3, #16
 800122e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001230:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001234:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001236:	2304      	movs	r3, #4
 8001238:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800123a:	2307      	movs	r3, #7
 800123c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123e:	f107 0320 	add.w	r3, r7, #32
 8001242:	4618      	mov	r0, r3
 8001244:	f003 fd9c 	bl	8004d80 <HAL_RCC_OscConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800124e:	f000 f95b 	bl	8001508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001252:	230f      	movs	r3, #15
 8001254:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001256:	2302      	movs	r3, #2
 8001258:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800125e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001262:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2102      	movs	r1, #2
 800126e:	4618      	mov	r0, r3
 8001270:	f003 fffe 	bl	8005270 <HAL_RCC_ClockConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800127a:	f000 f945 	bl	8001508 <Error_Handler>
  }
}
 800127e:	bf00      	nop
 8001280:	3750      	adds	r7, #80	; 0x50
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40007000 	.word	0x40007000

08001290 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <MX_I2C1_Init+0x50>)
 8001296:	4a13      	ldr	r2, [pc, #76]	; (80012e4 <MX_I2C1_Init+0x54>)
 8001298:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_I2C1_Init+0x50>)
 800129c:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <MX_I2C1_Init+0x58>)
 800129e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012ce:	f001 fb0f 	bl	80028f0 <HAL_I2C_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012d8:	f000 f916 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000208 	.word	0x20000208
 80012e4:	40005400 	.word	0x40005400
 80012e8:	000186a0 	.word	0x000186a0

080012ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	463b      	mov	r3, r7
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001308:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <MX_TIM2_Init+0x98>)
 800130a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800130e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8001310:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <MX_TIM2_Init+0x98>)
 8001312:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001316:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <MX_TIM2_Init+0x98>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800131e:	4b19      	ldr	r3, [pc, #100]	; (8001384 <MX_TIM2_Init+0x98>)
 8001320:	f242 720f 	movw	r2, #9999	; 0x270f
 8001324:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001326:	4b17      	ldr	r3, [pc, #92]	; (8001384 <MX_TIM2_Init+0x98>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <MX_TIM2_Init+0x98>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001332:	4814      	ldr	r0, [pc, #80]	; (8001384 <MX_TIM2_Init+0x98>)
 8001334:	f004 f9bc 	bl	80056b0 <HAL_TIM_Base_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800133e:	f000 f8e3 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001346:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	4619      	mov	r1, r3
 800134e:	480d      	ldr	r0, [pc, #52]	; (8001384 <MX_TIM2_Init+0x98>)
 8001350:	f004 fb68 	bl	8005a24 <HAL_TIM_ConfigClockSource>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800135a:	f000 f8d5 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001366:	463b      	mov	r3, r7
 8001368:	4619      	mov	r1, r3
 800136a:	4806      	ldr	r0, [pc, #24]	; (8001384 <MX_TIM2_Init+0x98>)
 800136c:	f004 fd64 	bl	8005e38 <HAL_TIMEx_MasterConfigSynchronization>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001376:	f000 f8c7 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200002bc 	.word	0x200002bc

08001388 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <MX_USART2_UART_Init+0x4c>)
 800138e:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <MX_USART2_UART_Init+0x50>)
 8001390:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <MX_USART2_UART_Init+0x4c>)
 8001394:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001398:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <MX_USART2_UART_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_USART2_UART_Init+0x4c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <MX_USART2_UART_Init+0x4c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_USART2_UART_Init+0x4c>)
 80013ae:	220c      	movs	r2, #12
 80013b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <MX_USART2_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_USART2_UART_Init+0x4c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_USART2_UART_Init+0x4c>)
 80013c0:	f004 fdbc 	bl	8005f3c <HAL_UART_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ca:	f000 f89d 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000304 	.word	0x20000304
 80013d8:	40004400 	.word	0x40004400

080013dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <MX_DMA_Init+0x4c>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a0f      	ldr	r2, [pc, #60]	; (8001428 <MX_DMA_Init+0x4c>)
 80013ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <MX_DMA_Init+0x4c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	200b      	movs	r0, #11
 8001404:	f000 fc83 	bl	8001d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001408:	200b      	movs	r0, #11
 800140a:	f000 fc9c 	bl	8001d46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	2011      	movs	r0, #17
 8001414:	f000 fc7b 	bl	8001d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001418:	2011      	movs	r0, #17
 800141a:	f000 fc94 	bl	8001d46 <HAL_NVIC_EnableIRQ>

}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800

0800142c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <MX_GPIO_Init+0xd0>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a2c      	ldr	r2, [pc, #176]	; (80014fc <MX_GPIO_Init+0xd0>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <MX_GPIO_Init+0xd0>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b26      	ldr	r3, [pc, #152]	; (80014fc <MX_GPIO_Init+0xd0>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a25      	ldr	r2, [pc, #148]	; (80014fc <MX_GPIO_Init+0xd0>)
 8001468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b23      	ldr	r3, [pc, #140]	; (80014fc <MX_GPIO_Init+0xd0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <MX_GPIO_Init+0xd0>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a1e      	ldr	r2, [pc, #120]	; (80014fc <MX_GPIO_Init+0xd0>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <MX_GPIO_Init+0xd0>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <MX_GPIO_Init+0xd0>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a17      	ldr	r2, [pc, #92]	; (80014fc <MX_GPIO_Init+0xd0>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <MX_GPIO_Init+0xd0>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2120      	movs	r1, #32
 80014b6:	4812      	ldr	r0, [pc, #72]	; (8001500 <MX_GPIO_Init+0xd4>)
 80014b8:	f001 fa00 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014c2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4619      	mov	r1, r3
 80014d2:	480c      	ldr	r0, [pc, #48]	; (8001504 <MX_GPIO_Init+0xd8>)
 80014d4:	f001 f86e 	bl	80025b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014d8:	2320      	movs	r3, #32
 80014da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014dc:	2301      	movs	r3, #1
 80014de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	4804      	ldr	r0, [pc, #16]	; (8001500 <MX_GPIO_Init+0xd4>)
 80014f0:	f001 f860 	bl	80025b4 <HAL_GPIO_Init>

}
 80014f4:	bf00      	nop
 80014f6:	3728      	adds	r7, #40	; 0x28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020000 	.word	0x40020000
 8001504:	40020800 	.word	0x40020800

08001508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800150c:	b672      	cpsid	i
}
 800150e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001510:	e7fe      	b.n	8001510 <Error_Handler+0x8>
	...

08001514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <HAL_MspInit+0x4c>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	4a0f      	ldr	r2, [pc, #60]	; (8001560 <HAL_MspInit+0x4c>)
 8001524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001528:	6453      	str	r3, [r2, #68]	; 0x44
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <HAL_MspInit+0x4c>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	603b      	str	r3, [r7, #0]
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_MspInit+0x4c>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	4a08      	ldr	r2, [pc, #32]	; (8001560 <HAL_MspInit+0x4c>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001544:	6413      	str	r3, [r2, #64]	; 0x40
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_MspInit+0x4c>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001552:	2007      	movs	r0, #7
 8001554:	f000 fbd0 	bl	8001cf8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40023800 	.word	0x40023800

08001564 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	; 0x28
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a34      	ldr	r2, [pc, #208]	; (8001654 <HAL_I2C_MspInit+0xf0>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d162      	bne.n	800164c <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	4b33      	ldr	r3, [pc, #204]	; (8001658 <HAL_I2C_MspInit+0xf4>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a32      	ldr	r2, [pc, #200]	; (8001658 <HAL_I2C_MspInit+0xf4>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b30      	ldr	r3, [pc, #192]	; (8001658 <HAL_I2C_MspInit+0xf4>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a8:	2312      	movs	r3, #18
 80015aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015b4:	2304      	movs	r3, #4
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	4827      	ldr	r0, [pc, #156]	; (800165c <HAL_I2C_MspInit+0xf8>)
 80015c0:	f000 fff8 	bl	80025b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	4b23      	ldr	r3, [pc, #140]	; (8001658 <HAL_I2C_MspInit+0xf4>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	4a22      	ldr	r2, [pc, #136]	; (8001658 <HAL_I2C_MspInit+0xf4>)
 80015ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015d2:	6413      	str	r3, [r2, #64]	; 0x40
 80015d4:	4b20      	ldr	r3, [pc, #128]	; (8001658 <HAL_I2C_MspInit+0xf4>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80015e0:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <HAL_I2C_MspInit+0xfc>)
 80015e2:	4a20      	ldr	r2, [pc, #128]	; (8001664 <HAL_I2C_MspInit+0x100>)
 80015e4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80015e6:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <HAL_I2C_MspInit+0xfc>)
 80015e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015ec:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <HAL_I2C_MspInit+0xfc>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f4:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <HAL_I2C_MspInit+0xfc>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015fa:	4b19      	ldr	r3, [pc, #100]	; (8001660 <HAL_I2C_MspInit+0xfc>)
 80015fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001600:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001602:	4b17      	ldr	r3, [pc, #92]	; (8001660 <HAL_I2C_MspInit+0xfc>)
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001608:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_I2C_MspInit+0xfc>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <HAL_I2C_MspInit+0xfc>)
 8001610:	2200      	movs	r2, #0
 8001612:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_I2C_MspInit+0xfc>)
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_I2C_MspInit+0xfc>)
 800161c:	2200      	movs	r2, #0
 800161e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001620:	480f      	ldr	r0, [pc, #60]	; (8001660 <HAL_I2C_MspInit+0xfc>)
 8001622:	f000 fbab 	bl	8001d7c <HAL_DMA_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 800162c:	f7ff ff6c 	bl	8001508 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <HAL_I2C_MspInit+0xfc>)
 8001634:	639a      	str	r2, [r3, #56]	; 0x38
 8001636:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <HAL_I2C_MspInit+0xfc>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	201f      	movs	r0, #31
 8001642:	f000 fb64 	bl	8001d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001646:	201f      	movs	r0, #31
 8001648:	f000 fb7d 	bl	8001d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800164c:	bf00      	nop
 800164e:	3728      	adds	r7, #40	; 0x28
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40005400 	.word	0x40005400
 8001658:	40023800 	.word	0x40023800
 800165c:	40020400 	.word	0x40020400
 8001660:	2000025c 	.word	0x2000025c
 8001664:	40026010 	.word	0x40026010

08001668 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001678:	d115      	bne.n	80016a6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <HAL_TIM_Base_MspInit+0x48>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	4a0b      	ldr	r2, [pc, #44]	; (80016b0 <HAL_TIM_Base_MspInit+0x48>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6413      	str	r3, [r2, #64]	; 0x40
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_TIM_Base_MspInit+0x48>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2100      	movs	r1, #0
 800169a:	201c      	movs	r0, #28
 800169c:	f000 fb37 	bl	8001d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016a0:	201c      	movs	r0, #28
 80016a2:	f000 fb50 	bl	8001d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800

080016b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a34      	ldr	r2, [pc, #208]	; (80017a4 <HAL_UART_MspInit+0xf0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d161      	bne.n	800179a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	4b33      	ldr	r3, [pc, #204]	; (80017a8 <HAL_UART_MspInit+0xf4>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	4a32      	ldr	r2, [pc, #200]	; (80017a8 <HAL_UART_MspInit+0xf4>)
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e4:	6413      	str	r3, [r2, #64]	; 0x40
 80016e6:	4b30      	ldr	r3, [pc, #192]	; (80017a8 <HAL_UART_MspInit+0xf4>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b2c      	ldr	r3, [pc, #176]	; (80017a8 <HAL_UART_MspInit+0xf4>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a2b      	ldr	r2, [pc, #172]	; (80017a8 <HAL_UART_MspInit+0xf4>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b29      	ldr	r3, [pc, #164]	; (80017a8 <HAL_UART_MspInit+0xf4>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800170e:	230c      	movs	r3, #12
 8001710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800171e:	2307      	movs	r3, #7
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	4820      	ldr	r0, [pc, #128]	; (80017ac <HAL_UART_MspInit+0xf8>)
 800172a:	f000 ff43 	bl	80025b4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800172e:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <HAL_UART_MspInit+0xfc>)
 8001730:	4a20      	ldr	r2, [pc, #128]	; (80017b4 <HAL_UART_MspInit+0x100>)
 8001732:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001734:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <HAL_UART_MspInit+0xfc>)
 8001736:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800173a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800173c:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <HAL_UART_MspInit+0xfc>)
 800173e:	2240      	movs	r2, #64	; 0x40
 8001740:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001742:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <HAL_UART_MspInit+0xfc>)
 8001744:	2200      	movs	r2, #0
 8001746:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001748:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <HAL_UART_MspInit+0xfc>)
 800174a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800174e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001750:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <HAL_UART_MspInit+0xfc>)
 8001752:	2200      	movs	r2, #0
 8001754:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001756:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <HAL_UART_MspInit+0xfc>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800175c:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <HAL_UART_MspInit+0xfc>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <HAL_UART_MspInit+0xfc>)
 8001764:	2200      	movs	r2, #0
 8001766:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <HAL_UART_MspInit+0xfc>)
 800176a:	2200      	movs	r2, #0
 800176c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800176e:	4810      	ldr	r0, [pc, #64]	; (80017b0 <HAL_UART_MspInit+0xfc>)
 8001770:	f000 fb04 	bl	8001d7c <HAL_DMA_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800177a:	f7ff fec5 	bl	8001508 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <HAL_UART_MspInit+0xfc>)
 8001782:	635a      	str	r2, [r3, #52]	; 0x34
 8001784:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <HAL_UART_MspInit+0xfc>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2100      	movs	r1, #0
 800178e:	2026      	movs	r0, #38	; 0x26
 8001790:	f000 fabd 	bl	8001d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001794:	2026      	movs	r0, #38	; 0x26
 8001796:	f000 fad6 	bl	8001d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800179a:	bf00      	nop
 800179c:	3728      	adds	r7, #40	; 0x28
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40004400 	.word	0x40004400
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40020000 	.word	0x40020000
 80017b0:	20000348 	.word	0x20000348
 80017b4:	400260a0 	.word	0x400260a0

080017b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <NMI_Handler+0x4>

080017be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <HardFault_Handler+0x4>

080017c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <MemManage_Handler+0x4>

080017ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <BusFault_Handler+0x4>

080017d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <UsageFault_Handler+0x4>

080017d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001804:	f000 f988 	bl	8001b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}

0800180c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <DMA1_Stream0_IRQHandler+0x10>)
 8001812:	f000 fc4b 	bl	80020ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	2000025c 	.word	0x2000025c

08001820 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001824:	4802      	ldr	r0, [pc, #8]	; (8001830 <DMA1_Stream6_IRQHandler+0x10>)
 8001826:	f000 fc41 	bl	80020ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000348 	.word	0x20000348

08001834 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001838:	4802      	ldr	r0, [pc, #8]	; (8001844 <TIM2_IRQHandler+0x10>)
 800183a:	f003 ffeb 	bl	8005814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200002bc 	.word	0x200002bc

08001848 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800184c:	4802      	ldr	r0, [pc, #8]	; (8001858 <I2C1_EV_IRQHandler+0x10>)
 800184e:	f001 fbc1 	bl	8002fd4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000208 	.word	0x20000208

0800185c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001860:	4802      	ldr	r0, [pc, #8]	; (800186c <USART2_IRQHandler+0x10>)
 8001862:	f004 fcc9 	bl	80061f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000304 	.word	0x20000304

08001870 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
	return 1;
 8001874:	2301      	movs	r3, #1
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <_kill>:

int _kill(int pid, int sig)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800188a:	f005 fcc1 	bl	8007210 <__errno>
 800188e:	4603      	mov	r3, r0
 8001890:	2216      	movs	r2, #22
 8001892:	601a      	str	r2, [r3, #0]
	return -1;
 8001894:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <_exit>:

void _exit (int status)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018a8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ffe7 	bl	8001880 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018b2:	e7fe      	b.n	80018b2 <_exit+0x12>

080018b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	e00a      	b.n	80018dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018c6:	f3af 8000 	nop.w
 80018ca:	4601      	mov	r1, r0
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	60ba      	str	r2, [r7, #8]
 80018d2:	b2ca      	uxtb	r2, r1
 80018d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	3301      	adds	r3, #1
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	dbf0      	blt.n	80018c6 <_read+0x12>
	}

return len;
 80018e4:	687b      	ldr	r3, [r7, #4]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b086      	sub	sp, #24
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	60f8      	str	r0, [r7, #12]
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	e009      	b.n	8001914 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	60ba      	str	r2, [r7, #8]
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3301      	adds	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	429a      	cmp	r2, r3
 800191a:	dbf1      	blt.n	8001900 <_write+0x12>
	}
	return len;
 800191c:	687b      	ldr	r3, [r7, #4]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <_close>:

int _close(int file)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
	return -1;
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800194e:	605a      	str	r2, [r3, #4]
	return 0;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <_isatty>:

int _isatty(int file)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
	return 1;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
	return 0;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001998:	4a14      	ldr	r2, [pc, #80]	; (80019ec <_sbrk+0x5c>)
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <_sbrk+0x60>)
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a4:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <_sbrk+0x64>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d102      	bne.n	80019b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <_sbrk+0x64>)
 80019ae:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <_sbrk+0x68>)
 80019b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d207      	bcs.n	80019d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c0:	f005 fc26 	bl	8007210 <__errno>
 80019c4:	4603      	mov	r3, r0
 80019c6:	220c      	movs	r2, #12
 80019c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
 80019ce:	e009      	b.n	80019e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <_sbrk+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <_sbrk+0x64>)
 80019e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019e2:	68fb      	ldr	r3, [r7, #12]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20018000 	.word	0x20018000
 80019f0:	00000400 	.word	0x00000400
 80019f4:	200003b0 	.word	0x200003b0
 80019f8:	200003c8 	.word	0x200003c8

080019fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <SystemInit+0x20>)
 8001a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a06:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <SystemInit+0x20>)
 8001a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a24:	480d      	ldr	r0, [pc, #52]	; (8001a5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a26:	490e      	ldr	r1, [pc, #56]	; (8001a60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a28:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a2c:	e002      	b.n	8001a34 <LoopCopyDataInit>

08001a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a32:	3304      	adds	r3, #4

08001a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a38:	d3f9      	bcc.n	8001a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3a:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a3c:	4c0b      	ldr	r4, [pc, #44]	; (8001a6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a40:	e001      	b.n	8001a46 <LoopFillZerobss>

08001a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a44:	3204      	adds	r2, #4

08001a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a48:	d3fb      	bcc.n	8001a42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a4a:	f7ff ffd7 	bl	80019fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a4e:	f005 fbe5 	bl	800721c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a52:	f7ff fb29 	bl	80010a8 <main>
  bx  lr    
 8001a56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a60:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001a64:	0800a4ec 	.word	0x0800a4ec
  ldr r2, =_sbss
 8001a68:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001a6c:	200003c8 	.word	0x200003c8

08001a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a70:	e7fe      	b.n	8001a70 <ADC_IRQHandler>
	...

08001a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a78:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <HAL_Init+0x40>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	; (8001ab4 <HAL_Init+0x40>)
 8001a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_Init+0x40>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <HAL_Init+0x40>)
 8001a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <HAL_Init+0x40>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <HAL_Init+0x40>)
 8001a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	f000 f92b 	bl	8001cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f000 f808 	bl	8001ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa8:	f7ff fd34 	bl	8001514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023c00 	.word	0x40023c00

08001ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_InitTick+0x54>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <HAL_InitTick+0x58>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 f943 	bl	8001d62 <HAL_SYSTICK_Config>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00e      	b.n	8001b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b0f      	cmp	r3, #15
 8001aea:	d80a      	bhi.n	8001b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aec:	2200      	movs	r2, #0
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	f000 f90b 	bl	8001d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af8:	4a06      	ldr	r2, [pc, #24]	; (8001b14 <HAL_InitTick+0x5c>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e000      	b.n	8001b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000010 	.word	0x20000010
 8001b10:	20000018 	.word	0x20000018
 8001b14:	20000014 	.word	0x20000014

08001b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_IncTick+0x20>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_IncTick+0x24>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <HAL_IncTick+0x24>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000018 	.word	0x20000018
 8001b3c:	200003b4 	.word	0x200003b4

08001b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return uwTick;
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_GetTick+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	200003b4 	.word	0x200003b4

08001b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b74:	4013      	ands	r3, r2
 8001b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8a:	4a04      	ldr	r2, [pc, #16]	; (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	60d3      	str	r3, [r2, #12]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba4:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	f003 0307 	and.w	r3, r3, #7
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	db0b      	blt.n	8001be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	f003 021f 	and.w	r2, r3, #31
 8001bd4:	4907      	ldr	r1, [pc, #28]	; (8001bf4 <__NVIC_EnableIRQ+0x38>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	095b      	lsrs	r3, r3, #5
 8001bdc:	2001      	movs	r0, #1
 8001bde:	fa00 f202 	lsl.w	r2, r0, r2
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000e100 	.word	0xe000e100

08001bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	6039      	str	r1, [r7, #0]
 8001c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	db0a      	blt.n	8001c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	490c      	ldr	r1, [pc, #48]	; (8001c44 <__NVIC_SetPriority+0x4c>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	0112      	lsls	r2, r2, #4
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c20:	e00a      	b.n	8001c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4908      	ldr	r1, [pc, #32]	; (8001c48 <__NVIC_SetPriority+0x50>)
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	3b04      	subs	r3, #4
 8001c30:	0112      	lsls	r2, r2, #4
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	440b      	add	r3, r1
 8001c36:	761a      	strb	r2, [r3, #24]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000e100 	.word	0xe000e100
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	; 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f1c3 0307 	rsb	r3, r3, #7
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	bf28      	it	cs
 8001c6a:	2304      	movcs	r3, #4
 8001c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3304      	adds	r3, #4
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d902      	bls.n	8001c7c <NVIC_EncodePriority+0x30>
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3b03      	subs	r3, #3
 8001c7a:	e000      	b.n	8001c7e <NVIC_EncodePriority+0x32>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	f04f 32ff 	mov.w	r2, #4294967295
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	401a      	ands	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c94:	f04f 31ff 	mov.w	r1, #4294967295
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	43d9      	mvns	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	4313      	orrs	r3, r2
         );
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3724      	adds	r7, #36	; 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cc4:	d301      	bcc.n	8001cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e00f      	b.n	8001cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cca:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <SysTick_Config+0x40>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	f7ff ff8e 	bl	8001bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <SysTick_Config+0x40>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ce2:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <SysTick_Config+0x40>)
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	e000e010 	.word	0xe000e010

08001cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ff29 	bl	8001b58 <__NVIC_SetPriorityGrouping>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b086      	sub	sp, #24
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d20:	f7ff ff3e 	bl	8001ba0 <__NVIC_GetPriorityGrouping>
 8001d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	6978      	ldr	r0, [r7, #20]
 8001d2c:	f7ff ff8e 	bl	8001c4c <NVIC_EncodePriority>
 8001d30:	4602      	mov	r2, r0
 8001d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d36:	4611      	mov	r1, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff5d 	bl	8001bf8 <__NVIC_SetPriority>
}
 8001d3e:	bf00      	nop
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff31 	bl	8001bbc <__NVIC_EnableIRQ>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff ffa2 	bl	8001cb4 <SysTick_Config>
 8001d70:	4603      	mov	r3, r0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d88:	f7ff feda 	bl	8001b40 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e099      	b.n	8001ecc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0201 	bic.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001db8:	e00f      	b.n	8001dda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dba:	f7ff fec1 	bl	8001b40 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b05      	cmp	r3, #5
 8001dc6:	d908      	bls.n	8001dda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e078      	b.n	8001ecc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1e8      	bne.n	8001dba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	4b38      	ldr	r3, [pc, #224]	; (8001ed4 <HAL_DMA_Init+0x158>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d107      	bne.n	8001e44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f023 0307 	bic.w	r3, r3, #7
 8001e5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d117      	bne.n	8001e9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00e      	beq.n	8001e9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 fb1b 	bl	80024bc <DMA_CheckFifoParam>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d008      	beq.n	8001e9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2240      	movs	r2, #64	; 0x40
 8001e90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e016      	b.n	8001ecc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 fad2 	bl	8002450 <DMA_CalcBaseAndBitshift>
 8001eac:	4603      	mov	r3, r0
 8001eae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb4:	223f      	movs	r2, #63	; 0x3f
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	f010803f 	.word	0xf010803f

08001ed8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
 8001ee4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_DMA_Start_IT+0x26>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e040      	b.n	8001f80 <HAL_DMA_Start_IT+0xa8>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d12f      	bne.n	8001f72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2202      	movs	r2, #2
 8001f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	68b9      	ldr	r1, [r7, #8]
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 fa64 	bl	80023f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f30:	223f      	movs	r2, #63	; 0x3f
 8001f32:	409a      	lsls	r2, r3
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0216 	orr.w	r2, r2, #22
 8001f46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0208 	orr.w	r2, r2, #8
 8001f5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0201 	orr.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	e005      	b.n	8001f7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f94:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f96:	f7ff fdd3 	bl	8001b40 <HAL_GetTick>
 8001f9a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d008      	beq.n	8001fba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2280      	movs	r2, #128	; 0x80
 8001fac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e052      	b.n	8002060 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0216 	bic.w	r2, r2, #22
 8001fc8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fd8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d103      	bne.n	8001fea <HAL_DMA_Abort+0x62>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d007      	beq.n	8001ffa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0208 	bic.w	r2, r2, #8
 8001ff8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0201 	bic.w	r2, r2, #1
 8002008:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800200a:	e013      	b.n	8002034 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800200c:	f7ff fd98 	bl	8001b40 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b05      	cmp	r3, #5
 8002018:	d90c      	bls.n	8002034 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2220      	movs	r2, #32
 800201e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2203      	movs	r2, #3
 8002024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e015      	b.n	8002060 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1e4      	bne.n	800200c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002046:	223f      	movs	r2, #63	; 0x3f
 8002048:	409a      	lsls	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d004      	beq.n	8002086 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2280      	movs	r2, #128	; 0x80
 8002080:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e00c      	b.n	80020a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2205      	movs	r2, #5
 800208a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0201 	bic.w	r2, r2, #1
 800209c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020b8:	4b8e      	ldr	r3, [pc, #568]	; (80022f4 <HAL_DMA_IRQHandler+0x248>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a8e      	ldr	r2, [pc, #568]	; (80022f8 <HAL_DMA_IRQHandler+0x24c>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	0a9b      	lsrs	r3, r3, #10
 80020c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d6:	2208      	movs	r2, #8
 80020d8:	409a      	lsls	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d01a      	beq.n	8002118 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d013      	beq.n	8002118 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0204 	bic.w	r2, r2, #4
 80020fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002104:	2208      	movs	r2, #8
 8002106:	409a      	lsls	r2, r3
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002110:	f043 0201 	orr.w	r2, r3, #1
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211c:	2201      	movs	r2, #1
 800211e:	409a      	lsls	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4013      	ands	r3, r2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d012      	beq.n	800214e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00b      	beq.n	800214e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213a:	2201      	movs	r2, #1
 800213c:	409a      	lsls	r2, r3
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002146:	f043 0202 	orr.w	r2, r3, #2
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002152:	2204      	movs	r2, #4
 8002154:	409a      	lsls	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	4013      	ands	r3, r2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d012      	beq.n	8002184 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00b      	beq.n	8002184 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002170:	2204      	movs	r2, #4
 8002172:	409a      	lsls	r2, r3
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217c:	f043 0204 	orr.w	r2, r3, #4
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002188:	2210      	movs	r2, #16
 800218a:	409a      	lsls	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d043      	beq.n	800221c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d03c      	beq.n	800221c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a6:	2210      	movs	r2, #16
 80021a8:	409a      	lsls	r2, r3
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d018      	beq.n	80021ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d108      	bne.n	80021dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d024      	beq.n	800221c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	4798      	blx	r3
 80021da:	e01f      	b.n	800221c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d01b      	beq.n	800221c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	4798      	blx	r3
 80021ec:	e016      	b.n	800221c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d107      	bne.n	800220c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0208 	bic.w	r2, r2, #8
 800220a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002220:	2220      	movs	r2, #32
 8002222:	409a      	lsls	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4013      	ands	r3, r2
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 808f 	beq.w	800234c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0310 	and.w	r3, r3, #16
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 8087 	beq.w	800234c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002242:	2220      	movs	r2, #32
 8002244:	409a      	lsls	r2, r3
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b05      	cmp	r3, #5
 8002254:	d136      	bne.n	80022c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0216 	bic.w	r2, r2, #22
 8002264:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002274:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	2b00      	cmp	r3, #0
 800227c:	d103      	bne.n	8002286 <HAL_DMA_IRQHandler+0x1da>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002282:	2b00      	cmp	r3, #0
 8002284:	d007      	beq.n	8002296 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0208 	bic.w	r2, r2, #8
 8002294:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229a:	223f      	movs	r2, #63	; 0x3f
 800229c:	409a      	lsls	r2, r3
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d07e      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	4798      	blx	r3
        }
        return;
 80022c2:	e079      	b.n	80023b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d01d      	beq.n	800230e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10d      	bne.n	80022fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d031      	beq.n	800234c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	4798      	blx	r3
 80022f0:	e02c      	b.n	800234c <HAL_DMA_IRQHandler+0x2a0>
 80022f2:	bf00      	nop
 80022f4:	20000010 	.word	0x20000010
 80022f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002300:	2b00      	cmp	r3, #0
 8002302:	d023      	beq.n	800234c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	4798      	blx	r3
 800230c:	e01e      	b.n	800234c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10f      	bne.n	800233c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0210 	bic.w	r2, r2, #16
 800232a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002350:	2b00      	cmp	r3, #0
 8002352:	d032      	beq.n	80023ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d022      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2205      	movs	r2, #5
 8002364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	3301      	adds	r3, #1
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	429a      	cmp	r2, r3
 8002382:	d307      	bcc.n	8002394 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f2      	bne.n	8002378 <HAL_DMA_IRQHandler+0x2cc>
 8002392:	e000      	b.n	8002396 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002394:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	4798      	blx	r3
 80023b6:	e000      	b.n	80023ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80023b8:	bf00      	nop
    }
  }
}
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023ce:	b2db      	uxtb	r3, r3
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
 8002400:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002410:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b40      	cmp	r3, #64	; 0x40
 8002420:	d108      	bne.n	8002434 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002432:	e007      	b.n	8002444 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	60da      	str	r2, [r3, #12]
}
 8002444:	bf00      	nop
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	3b10      	subs	r3, #16
 8002460:	4a14      	ldr	r2, [pc, #80]	; (80024b4 <DMA_CalcBaseAndBitshift+0x64>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	091b      	lsrs	r3, r3, #4
 8002468:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800246a:	4a13      	ldr	r2, [pc, #76]	; (80024b8 <DMA_CalcBaseAndBitshift+0x68>)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4413      	add	r3, r2
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b03      	cmp	r3, #3
 800247c:	d909      	bls.n	8002492 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002486:	f023 0303 	bic.w	r3, r3, #3
 800248a:	1d1a      	adds	r2, r3, #4
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	659a      	str	r2, [r3, #88]	; 0x58
 8002490:	e007      	b.n	80024a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800249a:	f023 0303 	bic.w	r3, r3, #3
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	aaaaaaab 	.word	0xaaaaaaab
 80024b8:	0800a0fc 	.word	0x0800a0fc

080024bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d11f      	bne.n	8002516 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d856      	bhi.n	800258a <DMA_CheckFifoParam+0xce>
 80024dc:	a201      	add	r2, pc, #4	; (adr r2, 80024e4 <DMA_CheckFifoParam+0x28>)
 80024de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e2:	bf00      	nop
 80024e4:	080024f5 	.word	0x080024f5
 80024e8:	08002507 	.word	0x08002507
 80024ec:	080024f5 	.word	0x080024f5
 80024f0:	0800258b 	.word	0x0800258b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d046      	beq.n	800258e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002504:	e043      	b.n	800258e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800250e:	d140      	bne.n	8002592 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002514:	e03d      	b.n	8002592 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800251e:	d121      	bne.n	8002564 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b03      	cmp	r3, #3
 8002524:	d837      	bhi.n	8002596 <DMA_CheckFifoParam+0xda>
 8002526:	a201      	add	r2, pc, #4	; (adr r2, 800252c <DMA_CheckFifoParam+0x70>)
 8002528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252c:	0800253d 	.word	0x0800253d
 8002530:	08002543 	.word	0x08002543
 8002534:	0800253d 	.word	0x0800253d
 8002538:	08002555 	.word	0x08002555
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
      break;
 8002540:	e030      	b.n	80025a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d025      	beq.n	800259a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002552:	e022      	b.n	800259a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002558:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800255c:	d11f      	bne.n	800259e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002562:	e01c      	b.n	800259e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d903      	bls.n	8002572 <DMA_CheckFifoParam+0xb6>
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2b03      	cmp	r3, #3
 800256e:	d003      	beq.n	8002578 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002570:	e018      	b.n	80025a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	73fb      	strb	r3, [r7, #15]
      break;
 8002576:	e015      	b.n	80025a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00e      	beq.n	80025a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
      break;
 8002588:	e00b      	b.n	80025a2 <DMA_CheckFifoParam+0xe6>
      break;
 800258a:	bf00      	nop
 800258c:	e00a      	b.n	80025a4 <DMA_CheckFifoParam+0xe8>
      break;
 800258e:	bf00      	nop
 8002590:	e008      	b.n	80025a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002592:	bf00      	nop
 8002594:	e006      	b.n	80025a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002596:	bf00      	nop
 8002598:	e004      	b.n	80025a4 <DMA_CheckFifoParam+0xe8>
      break;
 800259a:	bf00      	nop
 800259c:	e002      	b.n	80025a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800259e:	bf00      	nop
 80025a0:	e000      	b.n	80025a4 <DMA_CheckFifoParam+0xe8>
      break;
 80025a2:	bf00      	nop
    }
  } 
  
  return status; 
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop

080025b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b089      	sub	sp, #36	; 0x24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
 80025ce:	e159      	b.n	8002884 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025d0:	2201      	movs	r2, #1
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	4013      	ands	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	f040 8148 	bne.w	800287e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d005      	beq.n	8002606 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002602:	2b02      	cmp	r3, #2
 8002604:	d130      	bne.n	8002668 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	2203      	movs	r2, #3
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800263c:	2201      	movs	r2, #1
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	f003 0201 	and.w	r2, r3, #1
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	2b03      	cmp	r3, #3
 8002672:	d017      	beq.n	80026a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	2203      	movs	r2, #3
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d123      	bne.n	80026f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	08da      	lsrs	r2, r3, #3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3208      	adds	r2, #8
 80026b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	220f      	movs	r2, #15
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	08da      	lsrs	r2, r3, #3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3208      	adds	r2, #8
 80026f2:	69b9      	ldr	r1, [r7, #24]
 80026f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	2203      	movs	r2, #3
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 0203 	and.w	r2, r3, #3
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 80a2 	beq.w	800287e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	4b57      	ldr	r3, [pc, #348]	; (800289c <HAL_GPIO_Init+0x2e8>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	4a56      	ldr	r2, [pc, #344]	; (800289c <HAL_GPIO_Init+0x2e8>)
 8002744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002748:	6453      	str	r3, [r2, #68]	; 0x44
 800274a:	4b54      	ldr	r3, [pc, #336]	; (800289c <HAL_GPIO_Init+0x2e8>)
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002756:	4a52      	ldr	r2, [pc, #328]	; (80028a0 <HAL_GPIO_Init+0x2ec>)
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	089b      	lsrs	r3, r3, #2
 800275c:	3302      	adds	r3, #2
 800275e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002762:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	220f      	movs	r2, #15
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4013      	ands	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a49      	ldr	r2, [pc, #292]	; (80028a4 <HAL_GPIO_Init+0x2f0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d019      	beq.n	80027b6 <HAL_GPIO_Init+0x202>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a48      	ldr	r2, [pc, #288]	; (80028a8 <HAL_GPIO_Init+0x2f4>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d013      	beq.n	80027b2 <HAL_GPIO_Init+0x1fe>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a47      	ldr	r2, [pc, #284]	; (80028ac <HAL_GPIO_Init+0x2f8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00d      	beq.n	80027ae <HAL_GPIO_Init+0x1fa>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a46      	ldr	r2, [pc, #280]	; (80028b0 <HAL_GPIO_Init+0x2fc>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d007      	beq.n	80027aa <HAL_GPIO_Init+0x1f6>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a45      	ldr	r2, [pc, #276]	; (80028b4 <HAL_GPIO_Init+0x300>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d101      	bne.n	80027a6 <HAL_GPIO_Init+0x1f2>
 80027a2:	2304      	movs	r3, #4
 80027a4:	e008      	b.n	80027b8 <HAL_GPIO_Init+0x204>
 80027a6:	2307      	movs	r3, #7
 80027a8:	e006      	b.n	80027b8 <HAL_GPIO_Init+0x204>
 80027aa:	2303      	movs	r3, #3
 80027ac:	e004      	b.n	80027b8 <HAL_GPIO_Init+0x204>
 80027ae:	2302      	movs	r3, #2
 80027b0:	e002      	b.n	80027b8 <HAL_GPIO_Init+0x204>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <HAL_GPIO_Init+0x204>
 80027b6:	2300      	movs	r3, #0
 80027b8:	69fa      	ldr	r2, [r7, #28]
 80027ba:	f002 0203 	and.w	r2, r2, #3
 80027be:	0092      	lsls	r2, r2, #2
 80027c0:	4093      	lsls	r3, r2
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027c8:	4935      	ldr	r1, [pc, #212]	; (80028a0 <HAL_GPIO_Init+0x2ec>)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	089b      	lsrs	r3, r3, #2
 80027ce:	3302      	adds	r3, #2
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027d6:	4b38      	ldr	r3, [pc, #224]	; (80028b8 <HAL_GPIO_Init+0x304>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027fa:	4a2f      	ldr	r2, [pc, #188]	; (80028b8 <HAL_GPIO_Init+0x304>)
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002800:	4b2d      	ldr	r3, [pc, #180]	; (80028b8 <HAL_GPIO_Init+0x304>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002824:	4a24      	ldr	r2, [pc, #144]	; (80028b8 <HAL_GPIO_Init+0x304>)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800282a:	4b23      	ldr	r3, [pc, #140]	; (80028b8 <HAL_GPIO_Init+0x304>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800284e:	4a1a      	ldr	r2, [pc, #104]	; (80028b8 <HAL_GPIO_Init+0x304>)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002854:	4b18      	ldr	r3, [pc, #96]	; (80028b8 <HAL_GPIO_Init+0x304>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002878:	4a0f      	ldr	r2, [pc, #60]	; (80028b8 <HAL_GPIO_Init+0x304>)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3301      	adds	r3, #1
 8002882:	61fb      	str	r3, [r7, #28]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	2b0f      	cmp	r3, #15
 8002888:	f67f aea2 	bls.w	80025d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800288c:	bf00      	nop
 800288e:	bf00      	nop
 8002890:	3724      	adds	r7, #36	; 0x24
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40023800 	.word	0x40023800
 80028a0:	40013800 	.word	0x40013800
 80028a4:	40020000 	.word	0x40020000
 80028a8:	40020400 	.word	0x40020400
 80028ac:	40020800 	.word	0x40020800
 80028b0:	40020c00 	.word	0x40020c00
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40013c00 	.word	0x40013c00

080028bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	807b      	strh	r3, [r7, #2]
 80028c8:	4613      	mov	r3, r2
 80028ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028cc:	787b      	ldrb	r3, [r7, #1]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028d8:	e003      	b.n	80028e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028da:	887b      	ldrh	r3, [r7, #2]
 80028dc:	041a      	lsls	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	619a      	str	r2, [r3, #24]
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e12b      	b.n	8002b5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d106      	bne.n	800291c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7fe fe24 	bl	8001564 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2224      	movs	r2, #36	; 0x24
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0201 	bic.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002942:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002952:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002954:	f002 fe84 	bl	8005660 <HAL_RCC_GetPCLK1Freq>
 8002958:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	4a81      	ldr	r2, [pc, #516]	; (8002b64 <HAL_I2C_Init+0x274>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d807      	bhi.n	8002974 <HAL_I2C_Init+0x84>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4a80      	ldr	r2, [pc, #512]	; (8002b68 <HAL_I2C_Init+0x278>)
 8002968:	4293      	cmp	r3, r2
 800296a:	bf94      	ite	ls
 800296c:	2301      	movls	r3, #1
 800296e:	2300      	movhi	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	e006      	b.n	8002982 <HAL_I2C_Init+0x92>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4a7d      	ldr	r2, [pc, #500]	; (8002b6c <HAL_I2C_Init+0x27c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	bf94      	ite	ls
 800297c:	2301      	movls	r3, #1
 800297e:	2300      	movhi	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e0e7      	b.n	8002b5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4a78      	ldr	r2, [pc, #480]	; (8002b70 <HAL_I2C_Init+0x280>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	0c9b      	lsrs	r3, r3, #18
 8002994:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	4a6a      	ldr	r2, [pc, #424]	; (8002b64 <HAL_I2C_Init+0x274>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d802      	bhi.n	80029c4 <HAL_I2C_Init+0xd4>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	3301      	adds	r3, #1
 80029c2:	e009      	b.n	80029d8 <HAL_I2C_Init+0xe8>
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029ca:	fb02 f303 	mul.w	r3, r2, r3
 80029ce:	4a69      	ldr	r2, [pc, #420]	; (8002b74 <HAL_I2C_Init+0x284>)
 80029d0:	fba2 2303 	umull	r2, r3, r2, r3
 80029d4:	099b      	lsrs	r3, r3, #6
 80029d6:	3301      	adds	r3, #1
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	430b      	orrs	r3, r1
 80029de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	495c      	ldr	r1, [pc, #368]	; (8002b64 <HAL_I2C_Init+0x274>)
 80029f4:	428b      	cmp	r3, r1
 80029f6:	d819      	bhi.n	8002a2c <HAL_I2C_Init+0x13c>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	1e59      	subs	r1, r3, #1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a06:	1c59      	adds	r1, r3, #1
 8002a08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a0c:	400b      	ands	r3, r1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <HAL_I2C_Init+0x138>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1e59      	subs	r1, r3, #1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a20:	3301      	adds	r3, #1
 8002a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a26:	e051      	b.n	8002acc <HAL_I2C_Init+0x1dc>
 8002a28:	2304      	movs	r3, #4
 8002a2a:	e04f      	b.n	8002acc <HAL_I2C_Init+0x1dc>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d111      	bne.n	8002a58 <HAL_I2C_Init+0x168>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	1e58      	subs	r0, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6859      	ldr	r1, [r3, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	440b      	add	r3, r1
 8002a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a46:	3301      	adds	r3, #1
 8002a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	bf0c      	ite	eq
 8002a50:	2301      	moveq	r3, #1
 8002a52:	2300      	movne	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	e012      	b.n	8002a7e <HAL_I2C_Init+0x18e>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	1e58      	subs	r0, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6859      	ldr	r1, [r3, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	0099      	lsls	r1, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a6e:	3301      	adds	r3, #1
 8002a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	bf0c      	ite	eq
 8002a78:	2301      	moveq	r3, #1
 8002a7a:	2300      	movne	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_I2C_Init+0x196>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e022      	b.n	8002acc <HAL_I2C_Init+0x1dc>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10e      	bne.n	8002aac <HAL_I2C_Init+0x1bc>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1e58      	subs	r0, r3, #1
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6859      	ldr	r1, [r3, #4]
 8002a96:	460b      	mov	r3, r1
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	440b      	add	r3, r1
 8002a9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aaa:	e00f      	b.n	8002acc <HAL_I2C_Init+0x1dc>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	1e58      	subs	r0, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6859      	ldr	r1, [r3, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	0099      	lsls	r1, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	6809      	ldr	r1, [r1, #0]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69da      	ldr	r2, [r3, #28]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002afa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6911      	ldr	r1, [r2, #16]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68d2      	ldr	r2, [r2, #12]
 8002b06:	4311      	orrs	r1, r2
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	430b      	orrs	r3, r1
 8002b0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2220      	movs	r2, #32
 8002b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	000186a0 	.word	0x000186a0
 8002b68:	001e847f 	.word	0x001e847f
 8002b6c:	003d08ff 	.word	0x003d08ff
 8002b70:	431bde83 	.word	0x431bde83
 8002b74:	10624dd3 	.word	0x10624dd3

08002b78 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	607a      	str	r2, [r7, #4]
 8002b82:	461a      	mov	r2, r3
 8002b84:	460b      	mov	r3, r1
 8002b86:	817b      	strh	r3, [r7, #10]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b8c:	f7fe ffd8 	bl	8001b40 <HAL_GetTick>
 8002b90:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	f040 80e0 	bne.w	8002d60 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	2319      	movs	r3, #25
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	4970      	ldr	r1, [pc, #448]	; (8002d6c <HAL_I2C_Master_Transmit+0x1f4>)
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f001 ff14 	bl	80049d8 <I2C_WaitOnFlagUntilTimeout>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e0d3      	b.n	8002d62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_I2C_Master_Transmit+0x50>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e0cc      	b.n	8002d62 <HAL_I2C_Master_Transmit+0x1ea>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d007      	beq.n	8002bee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0201 	orr.w	r2, r2, #1
 8002bec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2221      	movs	r2, #33	; 0x21
 8002c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2210      	movs	r2, #16
 8002c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	893a      	ldrh	r2, [r7, #8]
 8002c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4a50      	ldr	r2, [pc, #320]	; (8002d70 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c30:	8979      	ldrh	r1, [r7, #10]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	6a3a      	ldr	r2, [r7, #32]
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f001 fc92 	bl	8004560 <I2C_MasterRequestWrite>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e08d      	b.n	8002d62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c46:	2300      	movs	r3, #0
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c5c:	e066      	b.n	8002d2c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	6a39      	ldr	r1, [r7, #32]
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f001 ff8e 	bl	8004b84 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00d      	beq.n	8002c8a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d107      	bne.n	8002c86 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e06b      	b.n	8002d62 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	781a      	ldrb	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d11b      	bne.n	8002d00 <HAL_I2C_Master_Transmit+0x188>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d017      	beq.n	8002d00 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	781a      	ldrb	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	6a39      	ldr	r1, [r7, #32]
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f001 ff7e 	bl	8004c06 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00d      	beq.n	8002d2c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d107      	bne.n	8002d28 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d26:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e01a      	b.n	8002d62 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d194      	bne.n	8002c5e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2220      	movs	r2, #32
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	e000      	b.n	8002d62 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d60:	2302      	movs	r3, #2
  }
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	00100002 	.word	0x00100002
 8002d70:	ffff0000 	.word	0xffff0000

08002d74 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	460b      	mov	r3, r1
 8002d82:	817b      	strh	r3, [r7, #10]
 8002d84:	4613      	mov	r3, r2
 8002d86:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	f040 810d 	bne.w	8002fb4 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d9a:	4b89      	ldr	r3, [pc, #548]	; (8002fc0 <HAL_I2C_Master_Receive_DMA+0x24c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	08db      	lsrs	r3, r3, #3
 8002da0:	4a88      	ldr	r2, [pc, #544]	; (8002fc4 <HAL_I2C_Master_Receive_DMA+0x250>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	0a1a      	lsrs	r2, r3, #8
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	009a      	lsls	r2, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d116      	bne.n	8002dee <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f043 0220 	orr.w	r2, r3, #32
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e0e3      	b.n	8002fb6 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d0db      	beq.n	8002db4 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_I2C_Master_Receive_DMA+0x96>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e0d5      	b.n	8002fb6 <HAL_I2C_Master_Receive_DMA+0x242>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d007      	beq.n	8002e30 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2222      	movs	r2, #34	; 0x22
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2210      	movs	r2, #16
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	893a      	ldrh	r2, [r7, #8]
 8002e60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4a56      	ldr	r2, [pc, #344]	; (8002fc8 <HAL_I2C_Master_Receive_DMA+0x254>)
 8002e70:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002e72:	897a      	ldrh	r2, [r7, #10]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d07b      	beq.n	8002f78 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d02a      	beq.n	8002ede <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8c:	4a4f      	ldr	r2, [pc, #316]	; (8002fcc <HAL_I2C_Master_Receive_DMA+0x258>)
 8002e8e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	4a4e      	ldr	r2, [pc, #312]	; (8002fd0 <HAL_I2C_Master_Receive_DMA+0x25c>)
 8002e96:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eac:	2200      	movs	r2, #0
 8002eae:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3310      	adds	r3, #16
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	461a      	mov	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ece:	f7ff f803 	bl	8001ed8 <HAL_DMA_Start_IT>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002ed6:	7dfb      	ldrb	r3, [r7, #23]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d139      	bne.n	8002f50 <HAL_I2C_Master_Receive_DMA+0x1dc>
 8002edc:	e013      	b.n	8002f06 <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e057      	b.n	8002fb6 <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f14:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f24:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002f3c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	e02f      	b.n	8002fb0 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	f043 0210 	orr.w	r2, r3, #16
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e01e      	b.n	8002fb6 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002f8e:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f9e:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fae:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	e000      	b.n	8002fb6 <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8002fb4:	2302      	movs	r3, #2
  }
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20000010 	.word	0x20000010
 8002fc4:	14f8b589 	.word	0x14f8b589
 8002fc8:	ffff0000 	.word	0xffff0000
 8002fcc:	08004665 	.word	0x08004665
 8002fd0:	0800480f 	.word	0x0800480f

08002fd4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ff4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	2b10      	cmp	r3, #16
 8003002:	d003      	beq.n	800300c <HAL_I2C_EV_IRQHandler+0x38>
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	2b40      	cmp	r3, #64	; 0x40
 8003008:	f040 80c1 	bne.w	800318e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10d      	bne.n	8003042 <HAL_I2C_EV_IRQHandler+0x6e>
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800302c:	d003      	beq.n	8003036 <HAL_I2C_EV_IRQHandler+0x62>
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003034:	d101      	bne.n	800303a <HAL_I2C_EV_IRQHandler+0x66>
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <HAL_I2C_EV_IRQHandler+0x68>
 800303a:	2300      	movs	r3, #0
 800303c:	2b01      	cmp	r3, #1
 800303e:	f000 8132 	beq.w	80032a6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00c      	beq.n	8003066 <HAL_I2C_EV_IRQHandler+0x92>
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	0a5b      	lsrs	r3, r3, #9
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d006      	beq.n	8003066 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f001 fe76 	bl	8004d4a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fcd2 	bl	8003a08 <I2C_Master_SB>
 8003064:	e092      	b.n	800318c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	08db      	lsrs	r3, r3, #3
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d009      	beq.n	8003086 <HAL_I2C_EV_IRQHandler+0xb2>
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	0a5b      	lsrs	r3, r3, #9
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fd48 	bl	8003b14 <I2C_Master_ADD10>
 8003084:	e082      	b.n	800318c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	085b      	lsrs	r3, r3, #1
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d009      	beq.n	80030a6 <HAL_I2C_EV_IRQHandler+0xd2>
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	0a5b      	lsrs	r3, r3, #9
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fd62 	bl	8003b68 <I2C_Master_ADDR>
 80030a4:	e072      	b.n	800318c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	089b      	lsrs	r3, r3, #2
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d03b      	beq.n	800312a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030c0:	f000 80f3 	beq.w	80032aa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	09db      	lsrs	r3, r3, #7
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00f      	beq.n	80030f0 <HAL_I2C_EV_IRQHandler+0x11c>
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	0a9b      	lsrs	r3, r3, #10
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d009      	beq.n	80030f0 <HAL_I2C_EV_IRQHandler+0x11c>
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	089b      	lsrs	r3, r3, #2
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d103      	bne.n	80030f0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f942 	bl	8003372 <I2C_MasterTransmit_TXE>
 80030ee:	e04d      	b.n	800318c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	089b      	lsrs	r3, r3, #2
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80d6 	beq.w	80032aa <HAL_I2C_EV_IRQHandler+0x2d6>
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	0a5b      	lsrs	r3, r3, #9
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 80cf 	beq.w	80032aa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800310c:	7bbb      	ldrb	r3, [r7, #14]
 800310e:	2b21      	cmp	r3, #33	; 0x21
 8003110:	d103      	bne.n	800311a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f9c9 	bl	80034aa <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003118:	e0c7      	b.n	80032aa <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800311a:	7bfb      	ldrb	r3, [r7, #15]
 800311c:	2b40      	cmp	r3, #64	; 0x40
 800311e:	f040 80c4 	bne.w	80032aa <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fa37 	bl	8003596 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003128:	e0bf      	b.n	80032aa <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003138:	f000 80b7 	beq.w	80032aa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	099b      	lsrs	r3, r3, #6
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00f      	beq.n	8003168 <HAL_I2C_EV_IRQHandler+0x194>
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	0a9b      	lsrs	r3, r3, #10
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d009      	beq.n	8003168 <HAL_I2C_EV_IRQHandler+0x194>
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	089b      	lsrs	r3, r3, #2
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d103      	bne.n	8003168 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 faac 	bl	80036be <I2C_MasterReceive_RXNE>
 8003166:	e011      	b.n	800318c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	089b      	lsrs	r3, r3, #2
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 809a 	beq.w	80032aa <HAL_I2C_EV_IRQHandler+0x2d6>
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	0a5b      	lsrs	r3, r3, #9
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 8093 	beq.w	80032aa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 fb55 	bl	8003834 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800318a:	e08e      	b.n	80032aa <HAL_I2C_EV_IRQHandler+0x2d6>
 800318c:	e08d      	b.n	80032aa <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	2b00      	cmp	r3, #0
 8003194:	d004      	beq.n	80031a0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	61fb      	str	r3, [r7, #28]
 800319e:	e007      	b.n	80031b0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	085b      	lsrs	r3, r3, #1
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d012      	beq.n	80031e2 <HAL_I2C_EV_IRQHandler+0x20e>
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	0a5b      	lsrs	r3, r3, #9
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00c      	beq.n	80031e2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80031d8:	69b9      	ldr	r1, [r7, #24]
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 ff13 	bl	8004006 <I2C_Slave_ADDR>
 80031e0:	e066      	b.n	80032b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <HAL_I2C_EV_IRQHandler+0x22e>
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	0a5b      	lsrs	r3, r3, #9
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 ff4e 	bl	800409c <I2C_Slave_STOPF>
 8003200:	e056      	b.n	80032b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003202:	7bbb      	ldrb	r3, [r7, #14]
 8003204:	2b21      	cmp	r3, #33	; 0x21
 8003206:	d002      	beq.n	800320e <HAL_I2C_EV_IRQHandler+0x23a>
 8003208:	7bbb      	ldrb	r3, [r7, #14]
 800320a:	2b29      	cmp	r3, #41	; 0x29
 800320c:	d125      	bne.n	800325a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	09db      	lsrs	r3, r3, #7
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00f      	beq.n	800323a <HAL_I2C_EV_IRQHandler+0x266>
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	0a9b      	lsrs	r3, r3, #10
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d009      	beq.n	800323a <HAL_I2C_EV_IRQHandler+0x266>
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	089b      	lsrs	r3, r3, #2
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d103      	bne.n	800323a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fe29 	bl	8003e8a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003238:	e039      	b.n	80032ae <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	089b      	lsrs	r3, r3, #2
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d033      	beq.n	80032ae <HAL_I2C_EV_IRQHandler+0x2da>
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	0a5b      	lsrs	r3, r3, #9
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d02d      	beq.n	80032ae <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fe56 	bl	8003f04 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003258:	e029      	b.n	80032ae <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	099b      	lsrs	r3, r3, #6
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00f      	beq.n	8003286 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	0a9b      	lsrs	r3, r3, #10
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d009      	beq.n	8003286 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	089b      	lsrs	r3, r3, #2
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d103      	bne.n	8003286 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 fe61 	bl	8003f46 <I2C_SlaveReceive_RXNE>
 8003284:	e014      	b.n	80032b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	089b      	lsrs	r3, r3, #2
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00e      	beq.n	80032b0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	0a5b      	lsrs	r3, r3, #9
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d008      	beq.n	80032b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fe8f 	bl	8003fc2 <I2C_SlaveReceive_BTF>
 80032a4:	e004      	b.n	80032b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80032a6:	bf00      	nop
 80032a8:	e002      	b.n	80032b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032aa:	bf00      	nop
 80032ac:	e000      	b.n	80032b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032ae:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80032b0:	3720      	adds	r7, #32
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	460b      	mov	r3, r1
 80032fc:	70fb      	strb	r3, [r7, #3]
 80032fe:	4613      	mov	r3, r2
 8003300:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b084      	sub	sp, #16
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003380:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003388:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003394:	2b00      	cmp	r3, #0
 8003396:	d150      	bne.n	800343a <I2C_MasterTransmit_TXE+0xc8>
 8003398:	7bfb      	ldrb	r3, [r7, #15]
 800339a:	2b21      	cmp	r3, #33	; 0x21
 800339c:	d14d      	bne.n	800343a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d01d      	beq.n	80033e0 <I2C_MasterTransmit_TXE+0x6e>
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b20      	cmp	r3, #32
 80033a8:	d01a      	beq.n	80033e0 <I2C_MasterTransmit_TXE+0x6e>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033b0:	d016      	beq.n	80033e0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033c0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2211      	movs	r2, #17
 80033c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7ff ff6c 	bl	80032b6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033de:	e060      	b.n	80034a2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033ee:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fe:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b40      	cmp	r3, #64	; 0x40
 8003418:	d107      	bne.n	800342a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff ff7d 	bl	8003322 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003428:	e03b      	b.n	80034a2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7ff ff3f 	bl	80032b6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003438:	e033      	b.n	80034a2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800343a:	7bfb      	ldrb	r3, [r7, #15]
 800343c:	2b21      	cmp	r3, #33	; 0x21
 800343e:	d005      	beq.n	800344c <I2C_MasterTransmit_TXE+0xda>
 8003440:	7bbb      	ldrb	r3, [r7, #14]
 8003442:	2b40      	cmp	r3, #64	; 0x40
 8003444:	d12d      	bne.n	80034a2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	2b22      	cmp	r3, #34	; 0x22
 800344a:	d12a      	bne.n	80034a2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003450:	b29b      	uxth	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d108      	bne.n	8003468 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003464:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003466:	e01c      	b.n	80034a2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b40      	cmp	r3, #64	; 0x40
 8003472:	d103      	bne.n	800347c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f88e 	bl	8003596 <I2C_MemoryTransmit_TXE_BTF>
}
 800347a:	e012      	b.n	80034a2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	781a      	ldrb	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003496:	b29b      	uxth	r3, r3
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80034a0:	e7ff      	b.n	80034a2 <I2C_MasterTransmit_TXE+0x130>
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b084      	sub	sp, #16
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b21      	cmp	r3, #33	; 0x21
 80034c2:	d164      	bne.n	800358e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d012      	beq.n	80034f4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	781a      	ldrb	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80034f2:	e04c      	b.n	800358e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d01d      	beq.n	8003536 <I2C_MasterTransmit_BTF+0x8c>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	d01a      	beq.n	8003536 <I2C_MasterTransmit_BTF+0x8c>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003506:	d016      	beq.n	8003536 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003516:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2211      	movs	r2, #17
 800351c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2220      	movs	r2, #32
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7ff fec1 	bl	80032b6 <HAL_I2C_MasterTxCpltCallback>
}
 8003534:	e02b      	b.n	800358e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003544:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003554:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b40      	cmp	r3, #64	; 0x40
 800356e:	d107      	bne.n	8003580 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff fed2 	bl	8003322 <HAL_I2C_MemTxCpltCallback>
}
 800357e:	e006      	b.n	800358e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7ff fe94 	bl	80032b6 <HAL_I2C_MasterTxCpltCallback>
}
 800358e:	bf00      	nop
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d11d      	bne.n	80035ea <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d10b      	bne.n	80035ce <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c6:	1c9a      	adds	r2, r3, #2
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80035cc:	e073      	b.n	80036b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	121b      	asrs	r3, r3, #8
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035e8:	e065      	b.n	80036b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d10b      	bne.n	800360a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003608:	e055      	b.n	80036b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360e:	2b02      	cmp	r3, #2
 8003610:	d151      	bne.n	80036b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003612:	7bfb      	ldrb	r3, [r7, #15]
 8003614:	2b22      	cmp	r3, #34	; 0x22
 8003616:	d10d      	bne.n	8003634 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003626:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003632:	e040      	b.n	80036b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d015      	beq.n	800366a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800363e:	7bfb      	ldrb	r3, [r7, #15]
 8003640:	2b21      	cmp	r3, #33	; 0x21
 8003642:	d112      	bne.n	800366a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	781a      	ldrb	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003668:	e025      	b.n	80036b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366e:	b29b      	uxth	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d120      	bne.n	80036b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003674:	7bfb      	ldrb	r3, [r7, #15]
 8003676:	2b21      	cmp	r3, #33	; 0x21
 8003678:	d11d      	bne.n	80036b6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003688:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003698:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff fe36 	bl	8003322 <HAL_I2C_MemTxCpltCallback>
}
 80036b6:	bf00      	nop
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b22      	cmp	r3, #34	; 0x22
 80036d0:	f040 80ac 	bne.w	800382c <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d8:	b29b      	uxth	r3, r3
 80036da:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b03      	cmp	r3, #3
 80036e0:	d921      	bls.n	8003726 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fe:	b29b      	uxth	r3, r3
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370c:	b29b      	uxth	r3, r3
 800370e:	2b03      	cmp	r3, #3
 8003710:	f040 808c 	bne.w	800382c <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003722:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003724:	e082      	b.n	800382c <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372a:	2b02      	cmp	r3, #2
 800372c:	d075      	beq.n	800381a <I2C_MasterReceive_RXNE+0x15c>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d002      	beq.n	800373a <I2C_MasterReceive_RXNE+0x7c>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d16f      	bne.n	800381a <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f001 faa4 	bl	8004c88 <I2C_WaitOnSTOPRequestThroughIT>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d142      	bne.n	80037cc <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003754:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003764:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	1c5a      	adds	r2, r3, #1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003782:	b29b      	uxth	r3, r3
 8003784:	3b01      	subs	r3, #1
 8003786:	b29a      	uxth	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b40      	cmp	r3, #64	; 0x40
 800379e:	d10a      	bne.n	80037b6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff fdc1 	bl	8003336 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80037b4:	e03a      	b.n	800382c <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2212      	movs	r2, #18
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7fd fbf9 	bl	8000fbc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80037ca:	e02f      	b.n	800382c <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037da:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691a      	ldr	r2, [r3, #16]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	1c5a      	adds	r2, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7ff fd99 	bl	800334a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003818:	e008      	b.n	800382c <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003828:	605a      	str	r2, [r3, #4]
}
 800382a:	e7ff      	b.n	800382c <I2C_MasterReceive_RXNE+0x16e>
 800382c:	bf00      	nop
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003840:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b04      	cmp	r3, #4
 800384a:	d11b      	bne.n	8003884 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800385a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003878:	b29b      	uxth	r3, r3
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003882:	e0bd      	b.n	8003a00 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b03      	cmp	r3, #3
 800388c:	d129      	bne.n	80038e2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800389c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d00a      	beq.n	80038ba <I2C_MasterReceive_BTF+0x86>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d007      	beq.n	80038ba <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	691a      	ldr	r2, [r3, #16]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038e0:	e08e      	b.n	8003a00 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d176      	bne.n	80039da <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d002      	beq.n	80038f8 <I2C_MasterReceive_BTF+0xc4>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b10      	cmp	r3, #16
 80038f6:	d108      	bne.n	800390a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	e019      	b.n	800393e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b04      	cmp	r3, #4
 800390e:	d002      	beq.n	8003916 <I2C_MasterReceive_BTF+0xe2>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d108      	bne.n	8003928 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	e00a      	b.n	800393e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2b10      	cmp	r3, #16
 800392c:	d007      	beq.n	800393e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800393c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	691a      	ldr	r2, [r3, #16]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003980:	b29b      	uxth	r3, r3
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003998:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2220      	movs	r2, #32
 800399e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b40      	cmp	r3, #64	; 0x40
 80039ac:	d10a      	bne.n	80039c4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff fcba 	bl	8003336 <HAL_I2C_MemRxCpltCallback>
}
 80039c2:	e01d      	b.n	8003a00 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2212      	movs	r2, #18
 80039d0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7fd faf2 	bl	8000fbc <HAL_I2C_MasterRxCpltCallback>
}
 80039d8:	e012      	b.n	8003a00 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a00:	bf00      	nop
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b40      	cmp	r3, #64	; 0x40
 8003a1a:	d117      	bne.n	8003a4c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d109      	bne.n	8003a38 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a34:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003a36:	e067      	b.n	8003b08 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	611a      	str	r2, [r3, #16]
}
 8003a4a:	e05d      	b.n	8003b08 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a54:	d133      	bne.n	8003abe <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b21      	cmp	r3, #33	; 0x21
 8003a60:	d109      	bne.n	8003a76 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	461a      	mov	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a72:	611a      	str	r2, [r3, #16]
 8003a74:	e008      	b.n	8003a88 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d004      	beq.n	8003a9a <I2C_Master_SB+0x92>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d108      	bne.n	8003aac <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d032      	beq.n	8003b08 <I2C_Master_SB+0x100>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d02d      	beq.n	8003b08 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aba:	605a      	str	r2, [r3, #4]
}
 8003abc:	e024      	b.n	8003b08 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10e      	bne.n	8003ae4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	11db      	asrs	r3, r3, #7
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	f003 0306 	and.w	r3, r3, #6
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	f063 030f 	orn	r3, r3, #15
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	611a      	str	r2, [r3, #16]
}
 8003ae2:	e011      	b.n	8003b08 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d10d      	bne.n	8003b08 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	11db      	asrs	r3, r3, #7
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	f003 0306 	and.w	r3, r3, #6
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	f063 030e 	orn	r3, r3, #14
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	611a      	str	r2, [r3, #16]
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d004      	beq.n	8003b3a <I2C_Master_ADD10+0x26>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d108      	bne.n	8003b4c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00c      	beq.n	8003b5c <I2C_Master_ADD10+0x48>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d007      	beq.n	8003b5c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b5a:	605a      	str	r2, [r3, #4]
  }
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b091      	sub	sp, #68	; 0x44
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b84:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b22      	cmp	r3, #34	; 0x22
 8003b90:	f040 8169 	bne.w	8003e66 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10f      	bne.n	8003bbc <I2C_Master_ADDR+0x54>
 8003b9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003ba0:	2b40      	cmp	r3, #64	; 0x40
 8003ba2:	d10b      	bne.n	8003bbc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	633b      	str	r3, [r7, #48]	; 0x30
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	633b      	str	r3, [r7, #48]	; 0x30
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	633b      	str	r3, [r7, #48]	; 0x30
 8003bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bba:	e160      	b.n	8003e7e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d11d      	bne.n	8003c00 <I2C_Master_ADDR+0x98>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003bcc:	d118      	bne.n	8003c00 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bce:	2300      	movs	r3, #0
 8003bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bf2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	651a      	str	r2, [r3, #80]	; 0x50
 8003bfe:	e13e      	b.n	8003e7e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d113      	bne.n	8003c32 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	e115      	b.n	8003e5e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	f040 808a 	bne.w	8003d52 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c44:	d137      	bne.n	8003cb6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c54:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c64:	d113      	bne.n	8003c8e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c74:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c76:	2300      	movs	r3, #0
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	e0e7      	b.n	8003e5e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8e:	2300      	movs	r3, #0
 8003c90:	623b      	str	r3, [r7, #32]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	623b      	str	r3, [r7, #32]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	623b      	str	r3, [r7, #32]
 8003ca2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	e0d3      	b.n	8003e5e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d02e      	beq.n	8003d1a <I2C_Master_ADDR+0x1b2>
 8003cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbe:	2b20      	cmp	r3, #32
 8003cc0:	d02b      	beq.n	8003d1a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc4:	2b12      	cmp	r3, #18
 8003cc6:	d102      	bne.n	8003cce <I2C_Master_ADDR+0x166>
 8003cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d125      	bne.n	8003d1a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d00e      	beq.n	8003cf2 <I2C_Master_ADDR+0x18a>
 8003cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d00b      	beq.n	8003cf2 <I2C_Master_ADDR+0x18a>
 8003cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	d008      	beq.n	8003cf2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	e007      	b.n	8003d02 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d00:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d02:	2300      	movs	r3, #0
 8003d04:	61fb      	str	r3, [r7, #28]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	61fb      	str	r3, [r7, #28]
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	e0a1      	b.n	8003e5e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d28:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	61bb      	str	r3, [r7, #24]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	e085      	b.n	8003e5e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d14d      	bne.n	8003df8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d016      	beq.n	8003d90 <I2C_Master_ADDR+0x228>
 8003d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d013      	beq.n	8003d90 <I2C_Master_ADDR+0x228>
 8003d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6a:	2b10      	cmp	r3, #16
 8003d6c:	d010      	beq.n	8003d90 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d7c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	e007      	b.n	8003da0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d9e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dae:	d117      	bne.n	8003de0 <I2C_Master_ADDR+0x278>
 8003db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003db6:	d00b      	beq.n	8003dd0 <I2C_Master_ADDR+0x268>
 8003db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d008      	beq.n	8003dd0 <I2C_Master_ADDR+0x268>
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d005      	beq.n	8003dd0 <I2C_Master_ADDR+0x268>
 8003dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc6:	2b10      	cmp	r3, #16
 8003dc8:	d002      	beq.n	8003dd0 <I2C_Master_ADDR+0x268>
 8003dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d107      	bne.n	8003de0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003dde:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	e032      	b.n	8003e5e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e06:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e16:	d117      	bne.n	8003e48 <I2C_Master_ADDR+0x2e0>
 8003e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e1e:	d00b      	beq.n	8003e38 <I2C_Master_ADDR+0x2d0>
 8003e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d008      	beq.n	8003e38 <I2C_Master_ADDR+0x2d0>
 8003e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d005      	beq.n	8003e38 <I2C_Master_ADDR+0x2d0>
 8003e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2e:	2b10      	cmp	r3, #16
 8003e30:	d002      	beq.n	8003e38 <I2C_Master_ADDR+0x2d0>
 8003e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	d107      	bne.n	8003e48 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e46:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e48:	2300      	movs	r3, #0
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	613b      	str	r3, [r7, #16]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003e64:	e00b      	b.n	8003e7e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e66:	2300      	movs	r3, #0
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
}
 8003e7c:	e7ff      	b.n	8003e7e <I2C_Master_ADDR+0x316>
 8003e7e:	bf00      	nop
 8003e80:	3744      	adds	r7, #68	; 0x44
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e98:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d02b      	beq.n	8003efc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	781a      	ldrb	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d114      	bne.n	8003efc <I2C_SlaveTransmit_TXE+0x72>
 8003ed2:	7bfb      	ldrb	r3, [r7, #15]
 8003ed4:	2b29      	cmp	r3, #41	; 0x29
 8003ed6:	d111      	bne.n	8003efc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ee6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2221      	movs	r2, #33	; 0x21
 8003eec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2228      	movs	r2, #40	; 0x28
 8003ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff f9e7 	bl	80032ca <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003efc:	bf00      	nop
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d011      	beq.n	8003f3a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	781a      	ldrb	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b084      	sub	sp, #16
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f54:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d02c      	beq.n	8003fba <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691a      	ldr	r2, [r3, #16]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d114      	bne.n	8003fba <I2C_SlaveReceive_RXNE+0x74>
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	2b2a      	cmp	r3, #42	; 0x2a
 8003f94:	d111      	bne.n	8003fba <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2222      	movs	r2, #34	; 0x22
 8003faa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2228      	movs	r2, #40	; 0x28
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7ff f992 	bl	80032de <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003fba:	bf00      	nop
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d012      	beq.n	8003ffa <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691a      	ldr	r2, [r3, #16]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b084      	sub	sp, #16
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004010:	2300      	movs	r3, #0
 8004012:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800401a:	b2db      	uxtb	r3, r3
 800401c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004020:	2b28      	cmp	r3, #40	; 0x28
 8004022:	d127      	bne.n	8004074 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004032:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	089b      	lsrs	r3, r3, #2
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004040:	2301      	movs	r3, #1
 8004042:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	09db      	lsrs	r3, r3, #7
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d103      	bne.n	8004058 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	81bb      	strh	r3, [r7, #12]
 8004056:	e002      	b.n	800405e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004066:	89ba      	ldrh	r2, [r7, #12]
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	4619      	mov	r1, r3
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7ff f940 	bl	80032f2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004072:	e00e      	b.n	8004092 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004074:	2300      	movs	r3, #0
 8004076:	60bb      	str	r3, [r7, #8]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	60bb      	str	r3, [r7, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	60bb      	str	r3, [r7, #8]
 8004088:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004092:	bf00      	nop
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
	...

0800409c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040aa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040ba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80040bc:	2300      	movs	r3, #0
 80040be:	60bb      	str	r3, [r7, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	60bb      	str	r3, [r7, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0201 	orr.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f8:	d172      	bne.n	80041e0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040fa:	7bfb      	ldrb	r3, [r7, #15]
 80040fc:	2b22      	cmp	r3, #34	; 0x22
 80040fe:	d002      	beq.n	8004106 <I2C_Slave_STOPF+0x6a>
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	2b2a      	cmp	r3, #42	; 0x2a
 8004104:	d135      	bne.n	8004172 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	b29a      	uxth	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d005      	beq.n	800412a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	f043 0204 	orr.w	r2, r3, #4
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004138:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413e:	4618      	mov	r0, r3
 8004140:	f7fe f93e 	bl	80023c0 <HAL_DMA_GetState>
 8004144:	4603      	mov	r3, r0
 8004146:	2b01      	cmp	r3, #1
 8004148:	d049      	beq.n	80041de <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414e:	4a69      	ldr	r2, [pc, #420]	; (80042f4 <I2C_Slave_STOPF+0x258>)
 8004150:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004156:	4618      	mov	r0, r3
 8004158:	f7fd ff86 	bl	8002068 <HAL_DMA_Abort_IT>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d03d      	beq.n	80041de <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800416c:	4610      	mov	r0, r2
 800416e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004170:	e035      	b.n	80041de <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	b29a      	uxth	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d005      	beq.n	8004196 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f043 0204 	orr.w	r2, r3, #4
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fe f908 	bl	80023c0 <HAL_DMA_GetState>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d014      	beq.n	80041e0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ba:	4a4e      	ldr	r2, [pc, #312]	; (80042f4 <I2C_Slave_STOPF+0x258>)
 80041bc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fd ff50 	bl	8002068 <HAL_DMA_Abort_IT>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d008      	beq.n	80041e0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041d8:	4610      	mov	r0, r2
 80041da:	4798      	blx	r3
 80041dc:	e000      	b.n	80041e0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041de:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d03e      	beq.n	8004268 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d112      	bne.n	800421e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691a      	ldr	r2, [r3, #16]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004228:	2b40      	cmp	r3, #64	; 0x40
 800422a:	d112      	bne.n	8004252 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	b2d2      	uxtb	r2, r2
 8004238:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004248:	b29b      	uxth	r3, r3
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004256:	b29b      	uxth	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d005      	beq.n	8004268 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	f043 0204 	orr.w	r2, r3, #4
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f843 	bl	80042fc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004276:	e039      	b.n	80042ec <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	2b2a      	cmp	r3, #42	; 0x2a
 800427c:	d109      	bne.n	8004292 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2228      	movs	r2, #40	; 0x28
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff f826 	bl	80032de <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b28      	cmp	r3, #40	; 0x28
 800429c:	d111      	bne.n	80042c2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a15      	ldr	r2, [pc, #84]	; (80042f8 <I2C_Slave_STOPF+0x25c>)
 80042a2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7ff f827 	bl	800330e <HAL_I2C_ListenCpltCallback>
}
 80042c0:	e014      	b.n	80042ec <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c6:	2b22      	cmp	r3, #34	; 0x22
 80042c8:	d002      	beq.n	80042d0 <I2C_Slave_STOPF+0x234>
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	2b22      	cmp	r3, #34	; 0x22
 80042ce:	d10d      	bne.n	80042ec <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2220      	movs	r2, #32
 80042da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fe fff9 	bl	80032de <HAL_I2C_SlaveRxCpltCallback>
}
 80042ec:	bf00      	nop
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	08004889 	.word	0x08004889
 80042f8:	ffff0000 	.word	0xffff0000

080042fc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800430a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004312:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004314:	7bbb      	ldrb	r3, [r7, #14]
 8004316:	2b10      	cmp	r3, #16
 8004318:	d002      	beq.n	8004320 <I2C_ITError+0x24>
 800431a:	7bbb      	ldrb	r3, [r7, #14]
 800431c:	2b40      	cmp	r3, #64	; 0x40
 800431e:	d10a      	bne.n	8004336 <I2C_ITError+0x3a>
 8004320:	7bfb      	ldrb	r3, [r7, #15]
 8004322:	2b22      	cmp	r3, #34	; 0x22
 8004324:	d107      	bne.n	8004336 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004334:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004336:	7bfb      	ldrb	r3, [r7, #15]
 8004338:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800433c:	2b28      	cmp	r3, #40	; 0x28
 800433e:	d107      	bne.n	8004350 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2228      	movs	r2, #40	; 0x28
 800434a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800434e:	e015      	b.n	800437c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800435a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800435e:	d00a      	beq.n	8004376 <I2C_ITError+0x7a>
 8004360:	7bfb      	ldrb	r3, [r7, #15]
 8004362:	2b60      	cmp	r3, #96	; 0x60
 8004364:	d007      	beq.n	8004376 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2220      	movs	r2, #32
 800436a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800438a:	d162      	bne.n	8004452 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800439a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d020      	beq.n	80043ec <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ae:	4a6a      	ldr	r2, [pc, #424]	; (8004558 <I2C_ITError+0x25c>)
 80043b0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fd fe56 	bl	8002068 <HAL_DMA_Abort_IT>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 8089 	beq.w	80044d6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0201 	bic.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043e6:	4610      	mov	r0, r2
 80043e8:	4798      	blx	r3
 80043ea:	e074      	b.n	80044d6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	4a59      	ldr	r2, [pc, #356]	; (8004558 <I2C_ITError+0x25c>)
 80043f2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7fd fe35 	bl	8002068 <HAL_DMA_Abort_IT>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d068      	beq.n	80044d6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440e:	2b40      	cmp	r3, #64	; 0x40
 8004410:	d10b      	bne.n	800442a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	691a      	ldr	r2, [r3, #16]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0201 	bic.w	r2, r2, #1
 8004438:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2220      	movs	r2, #32
 800443e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800444c:	4610      	mov	r0, r2
 800444e:	4798      	blx	r3
 8004450:	e041      	b.n	80044d6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b60      	cmp	r3, #96	; 0x60
 800445c:	d125      	bne.n	80044aa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004476:	2b40      	cmp	r3, #64	; 0x40
 8004478:	d10b      	bne.n	8004492 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	b2d2      	uxtb	r2, r2
 8004486:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0201 	bic.w	r2, r2, #1
 80044a0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7fe ff5b 	bl	800335e <HAL_I2C_AbortCpltCallback>
 80044a8:	e015      	b.n	80044d6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b4:	2b40      	cmp	r3, #64	; 0x40
 80044b6:	d10b      	bne.n	80044d0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7fe ff3a 	bl	800334a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10e      	bne.n	8004504 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d109      	bne.n	8004504 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d104      	bne.n	8004504 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004500:	2b00      	cmp	r3, #0
 8004502:	d007      	beq.n	8004514 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004512:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b04      	cmp	r3, #4
 8004526:	d113      	bne.n	8004550 <I2C_ITError+0x254>
 8004528:	7bfb      	ldrb	r3, [r7, #15]
 800452a:	2b28      	cmp	r3, #40	; 0x28
 800452c:	d110      	bne.n	8004550 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a0a      	ldr	r2, [pc, #40]	; (800455c <I2C_ITError+0x260>)
 8004532:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2220      	movs	r2, #32
 800453e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7fe fedf 	bl	800330e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004550:	bf00      	nop
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	08004889 	.word	0x08004889
 800455c:	ffff0000 	.word	0xffff0000

08004560 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af02      	add	r7, sp, #8
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	607a      	str	r2, [r7, #4]
 800456a:	603b      	str	r3, [r7, #0]
 800456c:	460b      	mov	r3, r1
 800456e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2b08      	cmp	r3, #8
 800457a:	d006      	beq.n	800458a <I2C_MasterRequestWrite+0x2a>
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d003      	beq.n	800458a <I2C_MasterRequestWrite+0x2a>
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004588:	d108      	bne.n	800459c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	e00b      	b.n	80045b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	2b12      	cmp	r3, #18
 80045a2:	d107      	bne.n	80045b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 fa09 	bl	80049d8 <I2C_WaitOnFlagUntilTimeout>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00d      	beq.n	80045e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045da:	d103      	bne.n	80045e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e035      	b.n	8004654 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045f0:	d108      	bne.n	8004604 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045f2:	897b      	ldrh	r3, [r7, #10]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	461a      	mov	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004600:	611a      	str	r2, [r3, #16]
 8004602:	e01b      	b.n	800463c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004604:	897b      	ldrh	r3, [r7, #10]
 8004606:	11db      	asrs	r3, r3, #7
 8004608:	b2db      	uxtb	r3, r3
 800460a:	f003 0306 	and.w	r3, r3, #6
 800460e:	b2db      	uxtb	r3, r3
 8004610:	f063 030f 	orn	r3, r3, #15
 8004614:	b2da      	uxtb	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	490e      	ldr	r1, [pc, #56]	; (800465c <I2C_MasterRequestWrite+0xfc>)
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 fa2f 	bl	8004a86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e010      	b.n	8004654 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004632:	897b      	ldrh	r3, [r7, #10]
 8004634:	b2da      	uxtb	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	4907      	ldr	r1, [pc, #28]	; (8004660 <I2C_MasterRequestWrite+0x100>)
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 fa1f 	bl	8004a86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e000      	b.n	8004654 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	00010008 	.word	0x00010008
 8004660:	00010002 	.word	0x00010002

08004664 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004670:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004678:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004680:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004696:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a4:	2200      	movs	r2, #0
 80046a6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b4:	2200      	movs	r2, #0
 80046b6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80046b8:	7cfb      	ldrb	r3, [r7, #19]
 80046ba:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80046be:	2b21      	cmp	r3, #33	; 0x21
 80046c0:	d007      	beq.n	80046d2 <I2C_DMAXferCplt+0x6e>
 80046c2:	7cfb      	ldrb	r3, [r7, #19]
 80046c4:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80046c8:	2b22      	cmp	r3, #34	; 0x22
 80046ca:	d131      	bne.n	8004730 <I2C_DMAXferCplt+0xcc>
 80046cc:	7cbb      	ldrb	r3, [r7, #18]
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	d12e      	bne.n	8004730 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046e0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2200      	movs	r2, #0
 80046e6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80046e8:	7cfb      	ldrb	r3, [r7, #19]
 80046ea:	2b29      	cmp	r3, #41	; 0x29
 80046ec:	d10a      	bne.n	8004704 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2221      	movs	r2, #33	; 0x21
 80046f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2228      	movs	r2, #40	; 0x28
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046fc:	6978      	ldr	r0, [r7, #20]
 80046fe:	f7fe fde4 	bl	80032ca <HAL_I2C_SlaveTxCpltCallback>
 8004702:	e00c      	b.n	800471e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004704:	7cfb      	ldrb	r3, [r7, #19]
 8004706:	2b2a      	cmp	r3, #42	; 0x2a
 8004708:	d109      	bne.n	800471e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2222      	movs	r2, #34	; 0x22
 800470e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2228      	movs	r2, #40	; 0x28
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004718:	6978      	ldr	r0, [r7, #20]
 800471a:	f7fe fde0 	bl	80032de <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800472c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800472e:	e06a      	b.n	8004806 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d064      	beq.n	8004806 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b01      	cmp	r3, #1
 8004744:	d107      	bne.n	8004756 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004754:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004764:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800476c:	d009      	beq.n	8004782 <I2C_DMAXferCplt+0x11e>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b08      	cmp	r3, #8
 8004772:	d006      	beq.n	8004782 <I2C_DMAXferCplt+0x11e>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800477a:	d002      	beq.n	8004782 <I2C_DMAXferCplt+0x11e>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2b20      	cmp	r3, #32
 8004780:	d107      	bne.n	8004792 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004790:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047a0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047b0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2200      	movs	r2, #0
 80047b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80047c0:	6978      	ldr	r0, [r7, #20]
 80047c2:	f7fe fdc2 	bl	800334a <HAL_I2C_ErrorCallback>
}
 80047c6:	e01e      	b.n	8004806 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b40      	cmp	r3, #64	; 0x40
 80047da:	d10a      	bne.n	80047f2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2200      	movs	r2, #0
 80047e8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80047ea:	6978      	ldr	r0, [r7, #20]
 80047ec:	f7fe fda3 	bl	8003336 <HAL_I2C_MemRxCpltCallback>
}
 80047f0:	e009      	b.n	8004806 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2212      	movs	r2, #18
 80047fe:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004800:	6978      	ldr	r0, [r7, #20]
 8004802:	f7fc fbdb 	bl	8000fbc <HAL_I2C_MasterRxCpltCallback>
}
 8004806:	bf00      	nop
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b084      	sub	sp, #16
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004828:	2200      	movs	r2, #0
 800482a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	2200      	movs	r2, #0
 800483a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7fd fdcd 	bl	80023dc <HAL_DMA_GetError>
 8004842:	4603      	mov	r3, r0
 8004844:	2b02      	cmp	r3, #2
 8004846:	d01b      	beq.n	8004880 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004856:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2220      	movs	r2, #32
 8004862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	f043 0210 	orr.w	r2, r3, #16
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f7fe fd65 	bl	800334a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004880:	bf00      	nop
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004898:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80048a2:	4b4b      	ldr	r3, [pc, #300]	; (80049d0 <I2C_DMAAbort+0x148>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	08db      	lsrs	r3, r3, #3
 80048a8:	4a4a      	ldr	r2, [pc, #296]	; (80049d4 <I2C_DMAAbort+0x14c>)
 80048aa:	fba2 2303 	umull	r2, r3, r2, r3
 80048ae:	0a1a      	lsrs	r2, r3, #8
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	00da      	lsls	r2, r3, #3
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	f043 0220 	orr.w	r2, r3, #32
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80048ce:	e00a      	b.n	80048e6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e4:	d0ea      	beq.n	80048bc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f2:	2200      	movs	r2, #0
 80048f4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004902:	2200      	movs	r2, #0
 8004904:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004914:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2200      	movs	r2, #0
 800491a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004928:	2200      	movs	r2, #0
 800492a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004938:	2200      	movs	r2, #0
 800493a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0201 	bic.w	r2, r2, #1
 800494a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b60      	cmp	r3, #96	; 0x60
 8004956:	d10e      	bne.n	8004976 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	2200      	movs	r2, #0
 800496c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800496e:	6978      	ldr	r0, [r7, #20]
 8004970:	f7fe fcf5 	bl	800335e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004974:	e027      	b.n	80049c6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004976:	7cfb      	ldrb	r3, [r7, #19]
 8004978:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800497c:	2b28      	cmp	r3, #40	; 0x28
 800497e:	d117      	bne.n	80049b0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0201 	orr.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800499e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	2200      	movs	r2, #0
 80049a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	2228      	movs	r2, #40	; 0x28
 80049aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049ae:	e007      	b.n	80049c0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80049c0:	6978      	ldr	r0, [r7, #20]
 80049c2:	f7fe fcc2 	bl	800334a <HAL_I2C_ErrorCallback>
}
 80049c6:	bf00      	nop
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	20000010 	.word	0x20000010
 80049d4:	14f8b589 	.word	0x14f8b589

080049d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	603b      	str	r3, [r7, #0]
 80049e4:	4613      	mov	r3, r2
 80049e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049e8:	e025      	b.n	8004a36 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f0:	d021      	beq.n	8004a36 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f2:	f7fd f8a5 	bl	8001b40 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d302      	bcc.n	8004a08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d116      	bne.n	8004a36 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2220      	movs	r2, #32
 8004a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	f043 0220 	orr.w	r2, r3, #32
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e023      	b.n	8004a7e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	0c1b      	lsrs	r3, r3, #16
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d10d      	bne.n	8004a5c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	43da      	mvns	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	bf0c      	ite	eq
 8004a52:	2301      	moveq	r3, #1
 8004a54:	2300      	movne	r3, #0
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	461a      	mov	r2, r3
 8004a5a:	e00c      	b.n	8004a76 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	43da      	mvns	r2, r3
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	4013      	ands	r3, r2
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	bf0c      	ite	eq
 8004a6e:	2301      	moveq	r3, #1
 8004a70:	2300      	movne	r3, #0
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	461a      	mov	r2, r3
 8004a76:	79fb      	ldrb	r3, [r7, #7]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d0b6      	beq.n	80049ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b084      	sub	sp, #16
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a94:	e051      	b.n	8004b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa4:	d123      	bne.n	8004aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ab4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004abe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	f043 0204 	orr.w	r2, r3, #4
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e046      	b.n	8004b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af4:	d021      	beq.n	8004b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af6:	f7fd f823 	bl	8001b40 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d302      	bcc.n	8004b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d116      	bne.n	8004b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	f043 0220 	orr.w	r2, r3, #32
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e020      	b.n	8004b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	0c1b      	lsrs	r3, r3, #16
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d10c      	bne.n	8004b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	43da      	mvns	r2, r3
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	bf14      	ite	ne
 8004b56:	2301      	movne	r3, #1
 8004b58:	2300      	moveq	r3, #0
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	e00b      	b.n	8004b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	43da      	mvns	r2, r3
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	bf14      	ite	ne
 8004b70:	2301      	movne	r3, #1
 8004b72:	2300      	moveq	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d18d      	bne.n	8004a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b90:	e02d      	b.n	8004bee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 f8aa 	bl	8004cec <I2C_IsAcknowledgeFailed>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e02d      	b.n	8004bfe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba8:	d021      	beq.n	8004bee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004baa:	f7fc ffc9 	bl	8001b40 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d302      	bcc.n	8004bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d116      	bne.n	8004bee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	f043 0220 	orr.w	r2, r3, #32
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e007      	b.n	8004bfe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf8:	2b80      	cmp	r3, #128	; 0x80
 8004bfa:	d1ca      	bne.n	8004b92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c12:	e02d      	b.n	8004c70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 f869 	bl	8004cec <I2C_IsAcknowledgeFailed>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e02d      	b.n	8004c80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2a:	d021      	beq.n	8004c70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c2c:	f7fc ff88 	bl	8001b40 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d302      	bcc.n	8004c42 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d116      	bne.n	8004c70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	f043 0220 	orr.w	r2, r3, #32
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e007      	b.n	8004c80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	f003 0304 	and.w	r3, r3, #4
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	d1ca      	bne.n	8004c14 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c94:	4b13      	ldr	r3, [pc, #76]	; (8004ce4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	08db      	lsrs	r3, r3, #3
 8004c9a:	4a13      	ldr	r2, [pc, #76]	; (8004ce8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca0:	0a1a      	lsrs	r2, r3, #8
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	3b01      	subs	r3, #1
 8004cae:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d107      	bne.n	8004cc6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	f043 0220 	orr.w	r2, r3, #32
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e008      	b.n	8004cd8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cd4:	d0e9      	beq.n	8004caa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	20000010 	.word	0x20000010
 8004ce8:	14f8b589 	.word	0x14f8b589

08004cec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d02:	d11b      	bne.n	8004d3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d28:	f043 0204 	orr.w	r2, r3, #4
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e000      	b.n	8004d3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d56:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004d5a:	d103      	bne.n	8004d64 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004d62:	e007      	b.n	8004d74 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d68:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004d6c:	d102      	bne.n	8004d74 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2208      	movs	r2, #8
 8004d72:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e267      	b.n	8005262 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d075      	beq.n	8004e8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d9e:	4b88      	ldr	r3, [pc, #544]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	d00c      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004daa:	4b85      	ldr	r3, [pc, #532]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004db2:	2b08      	cmp	r3, #8
 8004db4:	d112      	bne.n	8004ddc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004db6:	4b82      	ldr	r3, [pc, #520]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dc2:	d10b      	bne.n	8004ddc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc4:	4b7e      	ldr	r3, [pc, #504]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d05b      	beq.n	8004e88 <HAL_RCC_OscConfig+0x108>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d157      	bne.n	8004e88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e242      	b.n	8005262 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de4:	d106      	bne.n	8004df4 <HAL_RCC_OscConfig+0x74>
 8004de6:	4b76      	ldr	r3, [pc, #472]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a75      	ldr	r2, [pc, #468]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	e01d      	b.n	8004e30 <HAL_RCC_OscConfig+0xb0>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dfc:	d10c      	bne.n	8004e18 <HAL_RCC_OscConfig+0x98>
 8004dfe:	4b70      	ldr	r3, [pc, #448]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a6f      	ldr	r2, [pc, #444]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e08:	6013      	str	r3, [r2, #0]
 8004e0a:	4b6d      	ldr	r3, [pc, #436]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a6c      	ldr	r2, [pc, #432]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	e00b      	b.n	8004e30 <HAL_RCC_OscConfig+0xb0>
 8004e18:	4b69      	ldr	r3, [pc, #420]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a68      	ldr	r2, [pc, #416]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e22:	6013      	str	r3, [r2, #0]
 8004e24:	4b66      	ldr	r3, [pc, #408]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a65      	ldr	r2, [pc, #404]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d013      	beq.n	8004e60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e38:	f7fc fe82 	bl	8001b40 <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e3e:	e008      	b.n	8004e52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e40:	f7fc fe7e 	bl	8001b40 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b64      	cmp	r3, #100	; 0x64
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e207      	b.n	8005262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e52:	4b5b      	ldr	r3, [pc, #364]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0f0      	beq.n	8004e40 <HAL_RCC_OscConfig+0xc0>
 8004e5e:	e014      	b.n	8004e8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e60:	f7fc fe6e 	bl	8001b40 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e68:	f7fc fe6a 	bl	8001b40 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b64      	cmp	r3, #100	; 0x64
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e1f3      	b.n	8005262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e7a:	4b51      	ldr	r3, [pc, #324]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1f0      	bne.n	8004e68 <HAL_RCC_OscConfig+0xe8>
 8004e86:	e000      	b.n	8004e8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d063      	beq.n	8004f5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e96:	4b4a      	ldr	r3, [pc, #296]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 030c 	and.w	r3, r3, #12
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00b      	beq.n	8004eba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ea2:	4b47      	ldr	r3, [pc, #284]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004eaa:	2b08      	cmp	r3, #8
 8004eac:	d11c      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eae:	4b44      	ldr	r3, [pc, #272]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d116      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eba:	4b41      	ldr	r3, [pc, #260]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d005      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x152>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d001      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e1c7      	b.n	8005262 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed2:	4b3b      	ldr	r3, [pc, #236]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	4937      	ldr	r1, [pc, #220]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ee6:	e03a      	b.n	8004f5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d020      	beq.n	8004f32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ef0:	4b34      	ldr	r3, [pc, #208]	; (8004fc4 <HAL_RCC_OscConfig+0x244>)
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef6:	f7fc fe23 	bl	8001b40 <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004efc:	e008      	b.n	8004f10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004efe:	f7fc fe1f 	bl	8001b40 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e1a8      	b.n	8005262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f10:	4b2b      	ldr	r3, [pc, #172]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0f0      	beq.n	8004efe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f1c:	4b28      	ldr	r3, [pc, #160]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	4925      	ldr	r1, [pc, #148]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	600b      	str	r3, [r1, #0]
 8004f30:	e015      	b.n	8004f5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f32:	4b24      	ldr	r3, [pc, #144]	; (8004fc4 <HAL_RCC_OscConfig+0x244>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7fc fe02 	bl	8001b40 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f40:	f7fc fdfe 	bl	8001b40 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e187      	b.n	8005262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f52:	4b1b      	ldr	r3, [pc, #108]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f0      	bne.n	8004f40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d036      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d016      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f72:	4b15      	ldr	r3, [pc, #84]	; (8004fc8 <HAL_RCC_OscConfig+0x248>)
 8004f74:	2201      	movs	r2, #1
 8004f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f78:	f7fc fde2 	bl	8001b40 <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f80:	f7fc fdde 	bl	8001b40 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e167      	b.n	8005262 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f92:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <HAL_RCC_OscConfig+0x240>)
 8004f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0f0      	beq.n	8004f80 <HAL_RCC_OscConfig+0x200>
 8004f9e:	e01b      	b.n	8004fd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fa0:	4b09      	ldr	r3, [pc, #36]	; (8004fc8 <HAL_RCC_OscConfig+0x248>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fa6:	f7fc fdcb 	bl	8001b40 <HAL_GetTick>
 8004faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fac:	e00e      	b.n	8004fcc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fae:	f7fc fdc7 	bl	8001b40 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d907      	bls.n	8004fcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e150      	b.n	8005262 <HAL_RCC_OscConfig+0x4e2>
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	42470000 	.word	0x42470000
 8004fc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fcc:	4b88      	ldr	r3, [pc, #544]	; (80051f0 <HAL_RCC_OscConfig+0x470>)
 8004fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1ea      	bne.n	8004fae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 8097 	beq.w	8005114 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fea:	4b81      	ldr	r3, [pc, #516]	; (80051f0 <HAL_RCC_OscConfig+0x470>)
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10f      	bne.n	8005016 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60bb      	str	r3, [r7, #8]
 8004ffa:	4b7d      	ldr	r3, [pc, #500]	; (80051f0 <HAL_RCC_OscConfig+0x470>)
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	4a7c      	ldr	r2, [pc, #496]	; (80051f0 <HAL_RCC_OscConfig+0x470>)
 8005000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005004:	6413      	str	r3, [r2, #64]	; 0x40
 8005006:	4b7a      	ldr	r3, [pc, #488]	; (80051f0 <HAL_RCC_OscConfig+0x470>)
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800500e:	60bb      	str	r3, [r7, #8]
 8005010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005012:	2301      	movs	r3, #1
 8005014:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005016:	4b77      	ldr	r3, [pc, #476]	; (80051f4 <HAL_RCC_OscConfig+0x474>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501e:	2b00      	cmp	r3, #0
 8005020:	d118      	bne.n	8005054 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005022:	4b74      	ldr	r3, [pc, #464]	; (80051f4 <HAL_RCC_OscConfig+0x474>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a73      	ldr	r2, [pc, #460]	; (80051f4 <HAL_RCC_OscConfig+0x474>)
 8005028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800502c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800502e:	f7fc fd87 	bl	8001b40 <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005034:	e008      	b.n	8005048 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005036:	f7fc fd83 	bl	8001b40 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d901      	bls.n	8005048 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e10c      	b.n	8005262 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005048:	4b6a      	ldr	r3, [pc, #424]	; (80051f4 <HAL_RCC_OscConfig+0x474>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0f0      	beq.n	8005036 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d106      	bne.n	800506a <HAL_RCC_OscConfig+0x2ea>
 800505c:	4b64      	ldr	r3, [pc, #400]	; (80051f0 <HAL_RCC_OscConfig+0x470>)
 800505e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005060:	4a63      	ldr	r2, [pc, #396]	; (80051f0 <HAL_RCC_OscConfig+0x470>)
 8005062:	f043 0301 	orr.w	r3, r3, #1
 8005066:	6713      	str	r3, [r2, #112]	; 0x70
 8005068:	e01c      	b.n	80050a4 <HAL_RCC_OscConfig+0x324>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	2b05      	cmp	r3, #5
 8005070:	d10c      	bne.n	800508c <HAL_RCC_OscConfig+0x30c>
 8005072:	4b5f      	ldr	r3, [pc, #380]	; (80051f0 <HAL_RCC_OscConfig+0x470>)
 8005074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005076:	4a5e      	ldr	r2, [pc, #376]	; (80051f0 <HAL_RCC_OscConfig+0x470>)
 8005078:	f043 0304 	orr.w	r3, r3, #4
 800507c:	6713      	str	r3, [r2, #112]	; 0x70
 800507e:	4b5c      	ldr	r3, [pc, #368]	; (80051f0 <HAL_RCC_OscConfig+0x470>)
 8005080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005082:	4a5b      	ldr	r2, [pc, #364]	; (80051f0 <HAL_RCC_OscConfig+0x470>)
 8005084:	f043 0301 	orr.w	r3, r3, #1
 8005088:	6713      	str	r3, [r2, #112]	; 0x70
 800508a:	e00b      	b.n	80050a4 <HAL_RCC_OscConfig+0x324>
 800508c:	4b58      	ldr	r3, [pc, #352]	; (80051f0 <HAL_RCC_OscConfig+0x470>)
 800508e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005090:	4a57      	ldr	r2, [pc, #348]	; (80051f0 <HAL_RCC_OscConfig+0x470>)
 8005092:	f023 0301 	bic.w	r3, r3, #1
 8005096:	6713      	str	r3, [r2, #112]	; 0x70
 8005098:	4b55      	ldr	r3, [pc, #340]	; (80051f0 <HAL_RCC_OscConfig+0x470>)
 800509a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509c:	4a54      	ldr	r2, [pc, #336]	; (80051f0 <HAL_RCC_OscConfig+0x470>)
 800509e:	f023 0304 	bic.w	r3, r3, #4
 80050a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d015      	beq.n	80050d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ac:	f7fc fd48 	bl	8001b40 <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050b2:	e00a      	b.n	80050ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050b4:	f7fc fd44 	bl	8001b40 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e0cb      	b.n	8005262 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ca:	4b49      	ldr	r3, [pc, #292]	; (80051f0 <HAL_RCC_OscConfig+0x470>)
 80050cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0ee      	beq.n	80050b4 <HAL_RCC_OscConfig+0x334>
 80050d6:	e014      	b.n	8005102 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050d8:	f7fc fd32 	bl	8001b40 <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050de:	e00a      	b.n	80050f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050e0:	f7fc fd2e 	bl	8001b40 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e0b5      	b.n	8005262 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050f6:	4b3e      	ldr	r3, [pc, #248]	; (80051f0 <HAL_RCC_OscConfig+0x470>)
 80050f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1ee      	bne.n	80050e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005102:	7dfb      	ldrb	r3, [r7, #23]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d105      	bne.n	8005114 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005108:	4b39      	ldr	r3, [pc, #228]	; (80051f0 <HAL_RCC_OscConfig+0x470>)
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	4a38      	ldr	r2, [pc, #224]	; (80051f0 <HAL_RCC_OscConfig+0x470>)
 800510e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005112:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 80a1 	beq.w	8005260 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800511e:	4b34      	ldr	r3, [pc, #208]	; (80051f0 <HAL_RCC_OscConfig+0x470>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 030c 	and.w	r3, r3, #12
 8005126:	2b08      	cmp	r3, #8
 8005128:	d05c      	beq.n	80051e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	2b02      	cmp	r3, #2
 8005130:	d141      	bne.n	80051b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005132:	4b31      	ldr	r3, [pc, #196]	; (80051f8 <HAL_RCC_OscConfig+0x478>)
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005138:	f7fc fd02 	bl	8001b40 <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005140:	f7fc fcfe 	bl	8001b40 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e087      	b.n	8005262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005152:	4b27      	ldr	r3, [pc, #156]	; (80051f0 <HAL_RCC_OscConfig+0x470>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1f0      	bne.n	8005140 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	69da      	ldr	r2, [r3, #28]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	019b      	lsls	r3, r3, #6
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005174:	085b      	lsrs	r3, r3, #1
 8005176:	3b01      	subs	r3, #1
 8005178:	041b      	lsls	r3, r3, #16
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	061b      	lsls	r3, r3, #24
 8005182:	491b      	ldr	r1, [pc, #108]	; (80051f0 <HAL_RCC_OscConfig+0x470>)
 8005184:	4313      	orrs	r3, r2
 8005186:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005188:	4b1b      	ldr	r3, [pc, #108]	; (80051f8 <HAL_RCC_OscConfig+0x478>)
 800518a:	2201      	movs	r2, #1
 800518c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800518e:	f7fc fcd7 	bl	8001b40 <HAL_GetTick>
 8005192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005194:	e008      	b.n	80051a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005196:	f7fc fcd3 	bl	8001b40 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d901      	bls.n	80051a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e05c      	b.n	8005262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051a8:	4b11      	ldr	r3, [pc, #68]	; (80051f0 <HAL_RCC_OscConfig+0x470>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0f0      	beq.n	8005196 <HAL_RCC_OscConfig+0x416>
 80051b4:	e054      	b.n	8005260 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051b6:	4b10      	ldr	r3, [pc, #64]	; (80051f8 <HAL_RCC_OscConfig+0x478>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051bc:	f7fc fcc0 	bl	8001b40 <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051c2:	e008      	b.n	80051d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051c4:	f7fc fcbc 	bl	8001b40 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e045      	b.n	8005262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051d6:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <HAL_RCC_OscConfig+0x470>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1f0      	bne.n	80051c4 <HAL_RCC_OscConfig+0x444>
 80051e2:	e03d      	b.n	8005260 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d107      	bne.n	80051fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e038      	b.n	8005262 <HAL_RCC_OscConfig+0x4e2>
 80051f0:	40023800 	.word	0x40023800
 80051f4:	40007000 	.word	0x40007000
 80051f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051fc:	4b1b      	ldr	r3, [pc, #108]	; (800526c <HAL_RCC_OscConfig+0x4ec>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d028      	beq.n	800525c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005214:	429a      	cmp	r2, r3
 8005216:	d121      	bne.n	800525c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005222:	429a      	cmp	r2, r3
 8005224:	d11a      	bne.n	800525c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800522c:	4013      	ands	r3, r2
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005232:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005234:	4293      	cmp	r3, r2
 8005236:	d111      	bne.n	800525c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005242:	085b      	lsrs	r3, r3, #1
 8005244:	3b01      	subs	r3, #1
 8005246:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005248:	429a      	cmp	r2, r3
 800524a:	d107      	bne.n	800525c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005256:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005258:	429a      	cmp	r2, r3
 800525a:	d001      	beq.n	8005260 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e000      	b.n	8005262 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3718      	adds	r7, #24
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	40023800 	.word	0x40023800

08005270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e0cc      	b.n	800541e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005284:	4b68      	ldr	r3, [pc, #416]	; (8005428 <HAL_RCC_ClockConfig+0x1b8>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	429a      	cmp	r2, r3
 8005290:	d90c      	bls.n	80052ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005292:	4b65      	ldr	r3, [pc, #404]	; (8005428 <HAL_RCC_ClockConfig+0x1b8>)
 8005294:	683a      	ldr	r2, [r7, #0]
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800529a:	4b63      	ldr	r3, [pc, #396]	; (8005428 <HAL_RCC_ClockConfig+0x1b8>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d001      	beq.n	80052ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e0b8      	b.n	800541e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d020      	beq.n	80052fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d005      	beq.n	80052d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052c4:	4b59      	ldr	r3, [pc, #356]	; (800542c <HAL_RCC_ClockConfig+0x1bc>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	4a58      	ldr	r2, [pc, #352]	; (800542c <HAL_RCC_ClockConfig+0x1bc>)
 80052ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0308 	and.w	r3, r3, #8
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d005      	beq.n	80052e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052dc:	4b53      	ldr	r3, [pc, #332]	; (800542c <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	4a52      	ldr	r2, [pc, #328]	; (800542c <HAL_RCC_ClockConfig+0x1bc>)
 80052e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052e8:	4b50      	ldr	r3, [pc, #320]	; (800542c <HAL_RCC_ClockConfig+0x1bc>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	494d      	ldr	r1, [pc, #308]	; (800542c <HAL_RCC_ClockConfig+0x1bc>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d044      	beq.n	8005390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d107      	bne.n	800531e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800530e:	4b47      	ldr	r3, [pc, #284]	; (800542c <HAL_RCC_ClockConfig+0x1bc>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d119      	bne.n	800534e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e07f      	b.n	800541e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2b02      	cmp	r3, #2
 8005324:	d003      	beq.n	800532e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800532a:	2b03      	cmp	r3, #3
 800532c:	d107      	bne.n	800533e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800532e:	4b3f      	ldr	r3, [pc, #252]	; (800542c <HAL_RCC_ClockConfig+0x1bc>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d109      	bne.n	800534e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e06f      	b.n	800541e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800533e:	4b3b      	ldr	r3, [pc, #236]	; (800542c <HAL_RCC_ClockConfig+0x1bc>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e067      	b.n	800541e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800534e:	4b37      	ldr	r3, [pc, #220]	; (800542c <HAL_RCC_ClockConfig+0x1bc>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f023 0203 	bic.w	r2, r3, #3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	4934      	ldr	r1, [pc, #208]	; (800542c <HAL_RCC_ClockConfig+0x1bc>)
 800535c:	4313      	orrs	r3, r2
 800535e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005360:	f7fc fbee 	bl	8001b40 <HAL_GetTick>
 8005364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005366:	e00a      	b.n	800537e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005368:	f7fc fbea 	bl	8001b40 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	f241 3288 	movw	r2, #5000	; 0x1388
 8005376:	4293      	cmp	r3, r2
 8005378:	d901      	bls.n	800537e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e04f      	b.n	800541e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800537e:	4b2b      	ldr	r3, [pc, #172]	; (800542c <HAL_RCC_ClockConfig+0x1bc>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 020c 	and.w	r2, r3, #12
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	429a      	cmp	r2, r3
 800538e:	d1eb      	bne.n	8005368 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005390:	4b25      	ldr	r3, [pc, #148]	; (8005428 <HAL_RCC_ClockConfig+0x1b8>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d20c      	bcs.n	80053b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539e:	4b22      	ldr	r3, [pc, #136]	; (8005428 <HAL_RCC_ClockConfig+0x1b8>)
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	b2d2      	uxtb	r2, r2
 80053a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a6:	4b20      	ldr	r3, [pc, #128]	; (8005428 <HAL_RCC_ClockConfig+0x1b8>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d001      	beq.n	80053b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e032      	b.n	800541e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0304 	and.w	r3, r3, #4
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d008      	beq.n	80053d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053c4:	4b19      	ldr	r3, [pc, #100]	; (800542c <HAL_RCC_ClockConfig+0x1bc>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	4916      	ldr	r1, [pc, #88]	; (800542c <HAL_RCC_ClockConfig+0x1bc>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0308 	and.w	r3, r3, #8
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d009      	beq.n	80053f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053e2:	4b12      	ldr	r3, [pc, #72]	; (800542c <HAL_RCC_ClockConfig+0x1bc>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	490e      	ldr	r1, [pc, #56]	; (800542c <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053f6:	f000 f821 	bl	800543c <HAL_RCC_GetSysClockFreq>
 80053fa:	4602      	mov	r2, r0
 80053fc:	4b0b      	ldr	r3, [pc, #44]	; (800542c <HAL_RCC_ClockConfig+0x1bc>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	091b      	lsrs	r3, r3, #4
 8005402:	f003 030f 	and.w	r3, r3, #15
 8005406:	490a      	ldr	r1, [pc, #40]	; (8005430 <HAL_RCC_ClockConfig+0x1c0>)
 8005408:	5ccb      	ldrb	r3, [r1, r3]
 800540a:	fa22 f303 	lsr.w	r3, r2, r3
 800540e:	4a09      	ldr	r2, [pc, #36]	; (8005434 <HAL_RCC_ClockConfig+0x1c4>)
 8005410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005412:	4b09      	ldr	r3, [pc, #36]	; (8005438 <HAL_RCC_ClockConfig+0x1c8>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4618      	mov	r0, r3
 8005418:	f7fc fb4e 	bl	8001ab8 <HAL_InitTick>

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	40023c00 	.word	0x40023c00
 800542c:	40023800 	.word	0x40023800
 8005430:	0800a0e4 	.word	0x0800a0e4
 8005434:	20000010 	.word	0x20000010
 8005438:	20000014 	.word	0x20000014

0800543c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800543c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005440:	b094      	sub	sp, #80	; 0x50
 8005442:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	647b      	str	r3, [r7, #68]	; 0x44
 8005448:	2300      	movs	r3, #0
 800544a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800544c:	2300      	movs	r3, #0
 800544e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005454:	4b79      	ldr	r3, [pc, #484]	; (800563c <HAL_RCC_GetSysClockFreq+0x200>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f003 030c 	and.w	r3, r3, #12
 800545c:	2b08      	cmp	r3, #8
 800545e:	d00d      	beq.n	800547c <HAL_RCC_GetSysClockFreq+0x40>
 8005460:	2b08      	cmp	r3, #8
 8005462:	f200 80e1 	bhi.w	8005628 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005466:	2b00      	cmp	r3, #0
 8005468:	d002      	beq.n	8005470 <HAL_RCC_GetSysClockFreq+0x34>
 800546a:	2b04      	cmp	r3, #4
 800546c:	d003      	beq.n	8005476 <HAL_RCC_GetSysClockFreq+0x3a>
 800546e:	e0db      	b.n	8005628 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005470:	4b73      	ldr	r3, [pc, #460]	; (8005640 <HAL_RCC_GetSysClockFreq+0x204>)
 8005472:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005474:	e0db      	b.n	800562e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005476:	4b73      	ldr	r3, [pc, #460]	; (8005644 <HAL_RCC_GetSysClockFreq+0x208>)
 8005478:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800547a:	e0d8      	b.n	800562e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800547c:	4b6f      	ldr	r3, [pc, #444]	; (800563c <HAL_RCC_GetSysClockFreq+0x200>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005484:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005486:	4b6d      	ldr	r3, [pc, #436]	; (800563c <HAL_RCC_GetSysClockFreq+0x200>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d063      	beq.n	800555a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005492:	4b6a      	ldr	r3, [pc, #424]	; (800563c <HAL_RCC_GetSysClockFreq+0x200>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	099b      	lsrs	r3, r3, #6
 8005498:	2200      	movs	r2, #0
 800549a:	63bb      	str	r3, [r7, #56]	; 0x38
 800549c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a4:	633b      	str	r3, [r7, #48]	; 0x30
 80054a6:	2300      	movs	r3, #0
 80054a8:	637b      	str	r3, [r7, #52]	; 0x34
 80054aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80054ae:	4622      	mov	r2, r4
 80054b0:	462b      	mov	r3, r5
 80054b2:	f04f 0000 	mov.w	r0, #0
 80054b6:	f04f 0100 	mov.w	r1, #0
 80054ba:	0159      	lsls	r1, r3, #5
 80054bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054c0:	0150      	lsls	r0, r2, #5
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	4621      	mov	r1, r4
 80054c8:	1a51      	subs	r1, r2, r1
 80054ca:	6139      	str	r1, [r7, #16]
 80054cc:	4629      	mov	r1, r5
 80054ce:	eb63 0301 	sbc.w	r3, r3, r1
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	f04f 0200 	mov.w	r2, #0
 80054d8:	f04f 0300 	mov.w	r3, #0
 80054dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054e0:	4659      	mov	r1, fp
 80054e2:	018b      	lsls	r3, r1, #6
 80054e4:	4651      	mov	r1, sl
 80054e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054ea:	4651      	mov	r1, sl
 80054ec:	018a      	lsls	r2, r1, #6
 80054ee:	4651      	mov	r1, sl
 80054f0:	ebb2 0801 	subs.w	r8, r2, r1
 80054f4:	4659      	mov	r1, fp
 80054f6:	eb63 0901 	sbc.w	r9, r3, r1
 80054fa:	f04f 0200 	mov.w	r2, #0
 80054fe:	f04f 0300 	mov.w	r3, #0
 8005502:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005506:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800550a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800550e:	4690      	mov	r8, r2
 8005510:	4699      	mov	r9, r3
 8005512:	4623      	mov	r3, r4
 8005514:	eb18 0303 	adds.w	r3, r8, r3
 8005518:	60bb      	str	r3, [r7, #8]
 800551a:	462b      	mov	r3, r5
 800551c:	eb49 0303 	adc.w	r3, r9, r3
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	f04f 0200 	mov.w	r2, #0
 8005526:	f04f 0300 	mov.w	r3, #0
 800552a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800552e:	4629      	mov	r1, r5
 8005530:	024b      	lsls	r3, r1, #9
 8005532:	4621      	mov	r1, r4
 8005534:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005538:	4621      	mov	r1, r4
 800553a:	024a      	lsls	r2, r1, #9
 800553c:	4610      	mov	r0, r2
 800553e:	4619      	mov	r1, r3
 8005540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005542:	2200      	movs	r2, #0
 8005544:	62bb      	str	r3, [r7, #40]	; 0x28
 8005546:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005548:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800554c:	f7fb fb84 	bl	8000c58 <__aeabi_uldivmod>
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	4613      	mov	r3, r2
 8005556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005558:	e058      	b.n	800560c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800555a:	4b38      	ldr	r3, [pc, #224]	; (800563c <HAL_RCC_GetSysClockFreq+0x200>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	099b      	lsrs	r3, r3, #6
 8005560:	2200      	movs	r2, #0
 8005562:	4618      	mov	r0, r3
 8005564:	4611      	mov	r1, r2
 8005566:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800556a:	623b      	str	r3, [r7, #32]
 800556c:	2300      	movs	r3, #0
 800556e:	627b      	str	r3, [r7, #36]	; 0x24
 8005570:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005574:	4642      	mov	r2, r8
 8005576:	464b      	mov	r3, r9
 8005578:	f04f 0000 	mov.w	r0, #0
 800557c:	f04f 0100 	mov.w	r1, #0
 8005580:	0159      	lsls	r1, r3, #5
 8005582:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005586:	0150      	lsls	r0, r2, #5
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
 800558c:	4641      	mov	r1, r8
 800558e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005592:	4649      	mov	r1, r9
 8005594:	eb63 0b01 	sbc.w	fp, r3, r1
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	f04f 0300 	mov.w	r3, #0
 80055a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055ac:	ebb2 040a 	subs.w	r4, r2, sl
 80055b0:	eb63 050b 	sbc.w	r5, r3, fp
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	00eb      	lsls	r3, r5, #3
 80055be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055c2:	00e2      	lsls	r2, r4, #3
 80055c4:	4614      	mov	r4, r2
 80055c6:	461d      	mov	r5, r3
 80055c8:	4643      	mov	r3, r8
 80055ca:	18e3      	adds	r3, r4, r3
 80055cc:	603b      	str	r3, [r7, #0]
 80055ce:	464b      	mov	r3, r9
 80055d0:	eb45 0303 	adc.w	r3, r5, r3
 80055d4:	607b      	str	r3, [r7, #4]
 80055d6:	f04f 0200 	mov.w	r2, #0
 80055da:	f04f 0300 	mov.w	r3, #0
 80055de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055e2:	4629      	mov	r1, r5
 80055e4:	028b      	lsls	r3, r1, #10
 80055e6:	4621      	mov	r1, r4
 80055e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055ec:	4621      	mov	r1, r4
 80055ee:	028a      	lsls	r2, r1, #10
 80055f0:	4610      	mov	r0, r2
 80055f2:	4619      	mov	r1, r3
 80055f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055f6:	2200      	movs	r2, #0
 80055f8:	61bb      	str	r3, [r7, #24]
 80055fa:	61fa      	str	r2, [r7, #28]
 80055fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005600:	f7fb fb2a 	bl	8000c58 <__aeabi_uldivmod>
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	4613      	mov	r3, r2
 800560a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800560c:	4b0b      	ldr	r3, [pc, #44]	; (800563c <HAL_RCC_GetSysClockFreq+0x200>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	0c1b      	lsrs	r3, r3, #16
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	3301      	adds	r3, #1
 8005618:	005b      	lsls	r3, r3, #1
 800561a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800561c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800561e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005620:	fbb2 f3f3 	udiv	r3, r2, r3
 8005624:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005626:	e002      	b.n	800562e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005628:	4b05      	ldr	r3, [pc, #20]	; (8005640 <HAL_RCC_GetSysClockFreq+0x204>)
 800562a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800562c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800562e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005630:	4618      	mov	r0, r3
 8005632:	3750      	adds	r7, #80	; 0x50
 8005634:	46bd      	mov	sp, r7
 8005636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800563a:	bf00      	nop
 800563c:	40023800 	.word	0x40023800
 8005640:	00f42400 	.word	0x00f42400
 8005644:	007a1200 	.word	0x007a1200

08005648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800564c:	4b03      	ldr	r3, [pc, #12]	; (800565c <HAL_RCC_GetHCLKFreq+0x14>)
 800564e:	681b      	ldr	r3, [r3, #0]
}
 8005650:	4618      	mov	r0, r3
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	20000010 	.word	0x20000010

08005660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005664:	f7ff fff0 	bl	8005648 <HAL_RCC_GetHCLKFreq>
 8005668:	4602      	mov	r2, r0
 800566a:	4b05      	ldr	r3, [pc, #20]	; (8005680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	0a9b      	lsrs	r3, r3, #10
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	4903      	ldr	r1, [pc, #12]	; (8005684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005676:	5ccb      	ldrb	r3, [r1, r3]
 8005678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800567c:	4618      	mov	r0, r3
 800567e:	bd80      	pop	{r7, pc}
 8005680:	40023800 	.word	0x40023800
 8005684:	0800a0f4 	.word	0x0800a0f4

08005688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800568c:	f7ff ffdc 	bl	8005648 <HAL_RCC_GetHCLKFreq>
 8005690:	4602      	mov	r2, r0
 8005692:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	0b5b      	lsrs	r3, r3, #13
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	4903      	ldr	r1, [pc, #12]	; (80056ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800569e:	5ccb      	ldrb	r3, [r1, r3]
 80056a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	40023800 	.word	0x40023800
 80056ac:	0800a0f4 	.word	0x0800a0f4

080056b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e041      	b.n	8005746 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d106      	bne.n	80056dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7fb ffc6 	bl	8001668 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3304      	adds	r3, #4
 80056ec:	4619      	mov	r1, r3
 80056ee:	4610      	mov	r0, r2
 80056f0:	f000 fa88 	bl	8005c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
	...

08005750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b01      	cmp	r3, #1
 8005762:	d001      	beq.n	8005768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e044      	b.n	80057f2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68da      	ldr	r2, [r3, #12]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0201 	orr.w	r2, r2, #1
 800577e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a1e      	ldr	r2, [pc, #120]	; (8005800 <HAL_TIM_Base_Start_IT+0xb0>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d018      	beq.n	80057bc <HAL_TIM_Base_Start_IT+0x6c>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005792:	d013      	beq.n	80057bc <HAL_TIM_Base_Start_IT+0x6c>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a1a      	ldr	r2, [pc, #104]	; (8005804 <HAL_TIM_Base_Start_IT+0xb4>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d00e      	beq.n	80057bc <HAL_TIM_Base_Start_IT+0x6c>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a19      	ldr	r2, [pc, #100]	; (8005808 <HAL_TIM_Base_Start_IT+0xb8>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d009      	beq.n	80057bc <HAL_TIM_Base_Start_IT+0x6c>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a17      	ldr	r2, [pc, #92]	; (800580c <HAL_TIM_Base_Start_IT+0xbc>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d004      	beq.n	80057bc <HAL_TIM_Base_Start_IT+0x6c>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a16      	ldr	r2, [pc, #88]	; (8005810 <HAL_TIM_Base_Start_IT+0xc0>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d111      	bne.n	80057e0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2b06      	cmp	r3, #6
 80057cc:	d010      	beq.n	80057f0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f042 0201 	orr.w	r2, r2, #1
 80057dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057de:	e007      	b.n	80057f0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0201 	orr.w	r2, r2, #1
 80057ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	40010000 	.word	0x40010000
 8005804:	40000400 	.word	0x40000400
 8005808:	40000800 	.word	0x40000800
 800580c:	40000c00 	.word	0x40000c00
 8005810:	40014000 	.word	0x40014000

08005814 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b02      	cmp	r3, #2
 8005828:	d122      	bne.n	8005870 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b02      	cmp	r3, #2
 8005836:	d11b      	bne.n	8005870 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f06f 0202 	mvn.w	r2, #2
 8005840:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f9b5 	bl	8005bc6 <HAL_TIM_IC_CaptureCallback>
 800585c:	e005      	b.n	800586a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f9a7 	bl	8005bb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f9b8 	bl	8005bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	f003 0304 	and.w	r3, r3, #4
 800587a:	2b04      	cmp	r3, #4
 800587c:	d122      	bne.n	80058c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b04      	cmp	r3, #4
 800588a:	d11b      	bne.n	80058c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f06f 0204 	mvn.w	r2, #4
 8005894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2202      	movs	r2, #2
 800589a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f98b 	bl	8005bc6 <HAL_TIM_IC_CaptureCallback>
 80058b0:	e005      	b.n	80058be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f97d 	bl	8005bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f98e 	bl	8005bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	2b08      	cmp	r3, #8
 80058d0:	d122      	bne.n	8005918 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f003 0308 	and.w	r3, r3, #8
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d11b      	bne.n	8005918 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f06f 0208 	mvn.w	r2, #8
 80058e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2204      	movs	r2, #4
 80058ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f961 	bl	8005bc6 <HAL_TIM_IC_CaptureCallback>
 8005904:	e005      	b.n	8005912 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f953 	bl	8005bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f964 	bl	8005bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f003 0310 	and.w	r3, r3, #16
 8005922:	2b10      	cmp	r3, #16
 8005924:	d122      	bne.n	800596c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	2b10      	cmp	r3, #16
 8005932:	d11b      	bne.n	800596c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f06f 0210 	mvn.w	r2, #16
 800593c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2208      	movs	r2, #8
 8005942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f937 	bl	8005bc6 <HAL_TIM_IC_CaptureCallback>
 8005958:	e005      	b.n	8005966 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f929 	bl	8005bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f93a 	bl	8005bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b01      	cmp	r3, #1
 8005978:	d10e      	bne.n	8005998 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b01      	cmp	r3, #1
 8005986:	d107      	bne.n	8005998 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f06f 0201 	mvn.w	r2, #1
 8005990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7fb fae2 	bl	8000f5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a2:	2b80      	cmp	r3, #128	; 0x80
 80059a4:	d10e      	bne.n	80059c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b0:	2b80      	cmp	r3, #128	; 0x80
 80059b2:	d107      	bne.n	80059c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 fab2 	bl	8005f28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ce:	2b40      	cmp	r3, #64	; 0x40
 80059d0:	d10e      	bne.n	80059f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059dc:	2b40      	cmp	r3, #64	; 0x40
 80059de:	d107      	bne.n	80059f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f8ff 	bl	8005bee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f003 0320 	and.w	r3, r3, #32
 80059fa:	2b20      	cmp	r3, #32
 80059fc:	d10e      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f003 0320 	and.w	r3, r3, #32
 8005a08:	2b20      	cmp	r3, #32
 8005a0a:	d107      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0220 	mvn.w	r2, #32
 8005a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fa7c 	bl	8005f14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a1c:	bf00      	nop
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d101      	bne.n	8005a40 <HAL_TIM_ConfigClockSource+0x1c>
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	e0b4      	b.n	8005baa <HAL_TIM_ConfigClockSource+0x186>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a78:	d03e      	beq.n	8005af8 <HAL_TIM_ConfigClockSource+0xd4>
 8005a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a7e:	f200 8087 	bhi.w	8005b90 <HAL_TIM_ConfigClockSource+0x16c>
 8005a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a86:	f000 8086 	beq.w	8005b96 <HAL_TIM_ConfigClockSource+0x172>
 8005a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a8e:	d87f      	bhi.n	8005b90 <HAL_TIM_ConfigClockSource+0x16c>
 8005a90:	2b70      	cmp	r3, #112	; 0x70
 8005a92:	d01a      	beq.n	8005aca <HAL_TIM_ConfigClockSource+0xa6>
 8005a94:	2b70      	cmp	r3, #112	; 0x70
 8005a96:	d87b      	bhi.n	8005b90 <HAL_TIM_ConfigClockSource+0x16c>
 8005a98:	2b60      	cmp	r3, #96	; 0x60
 8005a9a:	d050      	beq.n	8005b3e <HAL_TIM_ConfigClockSource+0x11a>
 8005a9c:	2b60      	cmp	r3, #96	; 0x60
 8005a9e:	d877      	bhi.n	8005b90 <HAL_TIM_ConfigClockSource+0x16c>
 8005aa0:	2b50      	cmp	r3, #80	; 0x50
 8005aa2:	d03c      	beq.n	8005b1e <HAL_TIM_ConfigClockSource+0xfa>
 8005aa4:	2b50      	cmp	r3, #80	; 0x50
 8005aa6:	d873      	bhi.n	8005b90 <HAL_TIM_ConfigClockSource+0x16c>
 8005aa8:	2b40      	cmp	r3, #64	; 0x40
 8005aaa:	d058      	beq.n	8005b5e <HAL_TIM_ConfigClockSource+0x13a>
 8005aac:	2b40      	cmp	r3, #64	; 0x40
 8005aae:	d86f      	bhi.n	8005b90 <HAL_TIM_ConfigClockSource+0x16c>
 8005ab0:	2b30      	cmp	r3, #48	; 0x30
 8005ab2:	d064      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0x15a>
 8005ab4:	2b30      	cmp	r3, #48	; 0x30
 8005ab6:	d86b      	bhi.n	8005b90 <HAL_TIM_ConfigClockSource+0x16c>
 8005ab8:	2b20      	cmp	r3, #32
 8005aba:	d060      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0x15a>
 8005abc:	2b20      	cmp	r3, #32
 8005abe:	d867      	bhi.n	8005b90 <HAL_TIM_ConfigClockSource+0x16c>
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d05c      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0x15a>
 8005ac4:	2b10      	cmp	r3, #16
 8005ac6:	d05a      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0x15a>
 8005ac8:	e062      	b.n	8005b90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6818      	ldr	r0, [r3, #0]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	6899      	ldr	r1, [r3, #8]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f000 f98d 	bl	8005df8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005aec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	609a      	str	r2, [r3, #8]
      break;
 8005af6:	e04f      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6818      	ldr	r0, [r3, #0]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	6899      	ldr	r1, [r3, #8]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f000 f976 	bl	8005df8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b1a:	609a      	str	r2, [r3, #8]
      break;
 8005b1c:	e03c      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6818      	ldr	r0, [r3, #0]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	6859      	ldr	r1, [r3, #4]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	f000 f8ea 	bl	8005d04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2150      	movs	r1, #80	; 0x50
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 f943 	bl	8005dc2 <TIM_ITRx_SetConfig>
      break;
 8005b3c:	e02c      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6818      	ldr	r0, [r3, #0]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	6859      	ldr	r1, [r3, #4]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f000 f909 	bl	8005d62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2160      	movs	r1, #96	; 0x60
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 f933 	bl	8005dc2 <TIM_ITRx_SetConfig>
      break;
 8005b5c:	e01c      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	6859      	ldr	r1, [r3, #4]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	f000 f8ca 	bl	8005d04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2140      	movs	r1, #64	; 0x40
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 f923 	bl	8005dc2 <TIM_ITRx_SetConfig>
      break;
 8005b7c:	e00c      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4619      	mov	r1, r3
 8005b88:	4610      	mov	r0, r2
 8005b8a:	f000 f91a 	bl	8005dc2 <TIM_ITRx_SetConfig>
      break;
 8005b8e:	e003      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	73fb      	strb	r3, [r7, #15]
      break;
 8005b94:	e000      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bba:	bf00      	nop
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
	...

08005c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a34      	ldr	r2, [pc, #208]	; (8005ce8 <TIM_Base_SetConfig+0xe4>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d00f      	beq.n	8005c3c <TIM_Base_SetConfig+0x38>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c22:	d00b      	beq.n	8005c3c <TIM_Base_SetConfig+0x38>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a31      	ldr	r2, [pc, #196]	; (8005cec <TIM_Base_SetConfig+0xe8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d007      	beq.n	8005c3c <TIM_Base_SetConfig+0x38>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a30      	ldr	r2, [pc, #192]	; (8005cf0 <TIM_Base_SetConfig+0xec>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d003      	beq.n	8005c3c <TIM_Base_SetConfig+0x38>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a2f      	ldr	r2, [pc, #188]	; (8005cf4 <TIM_Base_SetConfig+0xf0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d108      	bne.n	8005c4e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a25      	ldr	r2, [pc, #148]	; (8005ce8 <TIM_Base_SetConfig+0xe4>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d01b      	beq.n	8005c8e <TIM_Base_SetConfig+0x8a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c5c:	d017      	beq.n	8005c8e <TIM_Base_SetConfig+0x8a>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a22      	ldr	r2, [pc, #136]	; (8005cec <TIM_Base_SetConfig+0xe8>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d013      	beq.n	8005c8e <TIM_Base_SetConfig+0x8a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a21      	ldr	r2, [pc, #132]	; (8005cf0 <TIM_Base_SetConfig+0xec>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d00f      	beq.n	8005c8e <TIM_Base_SetConfig+0x8a>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a20      	ldr	r2, [pc, #128]	; (8005cf4 <TIM_Base_SetConfig+0xf0>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d00b      	beq.n	8005c8e <TIM_Base_SetConfig+0x8a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a1f      	ldr	r2, [pc, #124]	; (8005cf8 <TIM_Base_SetConfig+0xf4>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d007      	beq.n	8005c8e <TIM_Base_SetConfig+0x8a>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a1e      	ldr	r2, [pc, #120]	; (8005cfc <TIM_Base_SetConfig+0xf8>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d003      	beq.n	8005c8e <TIM_Base_SetConfig+0x8a>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a1d      	ldr	r2, [pc, #116]	; (8005d00 <TIM_Base_SetConfig+0xfc>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d108      	bne.n	8005ca0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a08      	ldr	r2, [pc, #32]	; (8005ce8 <TIM_Base_SetConfig+0xe4>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d103      	bne.n	8005cd4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	691a      	ldr	r2, [r3, #16]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	615a      	str	r2, [r3, #20]
}
 8005cda:	bf00      	nop
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	40010000 	.word	0x40010000
 8005cec:	40000400 	.word	0x40000400
 8005cf0:	40000800 	.word	0x40000800
 8005cf4:	40000c00 	.word	0x40000c00
 8005cf8:	40014000 	.word	0x40014000
 8005cfc:	40014400 	.word	0x40014400
 8005d00:	40014800 	.word	0x40014800

08005d04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	f023 0201 	bic.w	r2, r3, #1
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f023 030a 	bic.w	r3, r3, #10
 8005d40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	621a      	str	r2, [r3, #32]
}
 8005d56:	bf00      	nop
 8005d58:	371c      	adds	r7, #28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b087      	sub	sp, #28
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	60f8      	str	r0, [r7, #12]
 8005d6a:	60b9      	str	r1, [r7, #8]
 8005d6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	f023 0210 	bic.w	r2, r3, #16
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	031b      	lsls	r3, r3, #12
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	011b      	lsls	r3, r3, #4
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	621a      	str	r2, [r3, #32]
}
 8005db6:	bf00      	nop
 8005db8:	371c      	adds	r7, #28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b085      	sub	sp, #20
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	f043 0307 	orr.w	r3, r3, #7
 8005de4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	609a      	str	r2, [r3, #8]
}
 8005dec:	bf00      	nop
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b087      	sub	sp, #28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	021a      	lsls	r2, r3, #8
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	609a      	str	r2, [r3, #8]
}
 8005e2c:	bf00      	nop
 8005e2e:	371c      	adds	r7, #28
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d101      	bne.n	8005e50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e050      	b.n	8005ef2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a1c      	ldr	r2, [pc, #112]	; (8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d018      	beq.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e9c:	d013      	beq.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a18      	ldr	r2, [pc, #96]	; (8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d00e      	beq.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a16      	ldr	r2, [pc, #88]	; (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d009      	beq.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a15      	ldr	r2, [pc, #84]	; (8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d004      	beq.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a13      	ldr	r2, [pc, #76]	; (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d10c      	bne.n	8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ecc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	40010000 	.word	0x40010000
 8005f04:	40000400 	.word	0x40000400
 8005f08:	40000800 	.word	0x40000800
 8005f0c:	40000c00 	.word	0x40000c00
 8005f10:	40014000 	.word	0x40014000

08005f14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e03f      	b.n	8005fce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d106      	bne.n	8005f68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7fb fba6 	bl	80016b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2224      	movs	r2, #36	; 0x24
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68da      	ldr	r2, [r3, #12]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fed1 	bl	8006d28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	691a      	ldr	r2, [r3, #16]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	695a      	ldr	r2, [r3, #20]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b08a      	sub	sp, #40	; 0x28
 8005fda:	af02      	add	r7, sp, #8
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	603b      	str	r3, [r7, #0]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b20      	cmp	r3, #32
 8005ff4:	d17c      	bne.n	80060f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d002      	beq.n	8006002 <HAL_UART_Transmit+0x2c>
 8005ffc:	88fb      	ldrh	r3, [r7, #6]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e075      	b.n	80060f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800600c:	2b01      	cmp	r3, #1
 800600e:	d101      	bne.n	8006014 <HAL_UART_Transmit+0x3e>
 8006010:	2302      	movs	r3, #2
 8006012:	e06e      	b.n	80060f2 <HAL_UART_Transmit+0x11c>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2221      	movs	r2, #33	; 0x21
 8006026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800602a:	f7fb fd89 	bl	8001b40 <HAL_GetTick>
 800602e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	88fa      	ldrh	r2, [r7, #6]
 8006034:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	88fa      	ldrh	r2, [r7, #6]
 800603a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006044:	d108      	bne.n	8006058 <HAL_UART_Transmit+0x82>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d104      	bne.n	8006058 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800604e:	2300      	movs	r3, #0
 8006050:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	61bb      	str	r3, [r7, #24]
 8006056:	e003      	b.n	8006060 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800605c:	2300      	movs	r3, #0
 800605e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006068:	e02a      	b.n	80060c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2200      	movs	r2, #0
 8006072:	2180      	movs	r1, #128	; 0x80
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f000 fc26 	bl	80068c6 <UART_WaitOnFlagUntilTimeout>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e036      	b.n	80060f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10b      	bne.n	80060a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	461a      	mov	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006098:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	3302      	adds	r3, #2
 800609e:	61bb      	str	r3, [r7, #24]
 80060a0:	e007      	b.n	80060b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	781a      	ldrb	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	3301      	adds	r3, #1
 80060b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	3b01      	subs	r3, #1
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1cf      	bne.n	800606a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	2200      	movs	r2, #0
 80060d2:	2140      	movs	r1, #64	; 0x40
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f000 fbf6 	bl	80068c6 <UART_WaitOnFlagUntilTimeout>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e006      	b.n	80060f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2220      	movs	r2, #32
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80060ec:	2300      	movs	r3, #0
 80060ee:	e000      	b.n	80060f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80060f0:	2302      	movs	r3, #2
  }
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3720      	adds	r7, #32
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
	...

080060fc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b08c      	sub	sp, #48	; 0x30
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	4613      	mov	r3, r2
 8006108:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b20      	cmp	r3, #32
 8006114:	d165      	bne.n	80061e2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <HAL_UART_Transmit_DMA+0x26>
 800611c:	88fb      	ldrh	r3, [r7, #6]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e05e      	b.n	80061e4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800612c:	2b01      	cmp	r3, #1
 800612e:	d101      	bne.n	8006134 <HAL_UART_Transmit_DMA+0x38>
 8006130:	2302      	movs	r3, #2
 8006132:	e057      	b.n	80061e4 <HAL_UART_Transmit_DMA+0xe8>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	88fa      	ldrh	r2, [r7, #6]
 8006146:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	88fa      	ldrh	r2, [r7, #6]
 800614c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2221      	movs	r2, #33	; 0x21
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006160:	4a22      	ldr	r2, [pc, #136]	; (80061ec <HAL_UART_Transmit_DMA+0xf0>)
 8006162:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006168:	4a21      	ldr	r2, [pc, #132]	; (80061f0 <HAL_UART_Transmit_DMA+0xf4>)
 800616a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006170:	4a20      	ldr	r2, [pc, #128]	; (80061f4 <HAL_UART_Transmit_DMA+0xf8>)
 8006172:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006178:	2200      	movs	r2, #0
 800617a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800617c:	f107 0308 	add.w	r3, r7, #8
 8006180:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006188:	6819      	ldr	r1, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3304      	adds	r3, #4
 8006190:	461a      	mov	r2, r3
 8006192:	88fb      	ldrh	r3, [r7, #6]
 8006194:	f7fb fea0 	bl	8001ed8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061a0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3314      	adds	r3, #20
 80061b0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	e853 3f00 	ldrex	r3, [r3]
 80061b8:	617b      	str	r3, [r7, #20]
   return(result);
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	3314      	adds	r3, #20
 80061c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061ca:	627a      	str	r2, [r7, #36]	; 0x24
 80061cc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ce:	6a39      	ldr	r1, [r7, #32]
 80061d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d2:	e841 2300 	strex	r3, r2, [r1]
 80061d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1e5      	bne.n	80061aa <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	e000      	b.n	80061e4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80061e2:	2302      	movs	r3, #2
  }
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3730      	adds	r7, #48	; 0x30
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	0800677d 	.word	0x0800677d
 80061f0:	08006817 	.word	0x08006817
 80061f4:	08006833 	.word	0x08006833

080061f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b0ba      	sub	sp, #232	; 0xe8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800621e:	2300      	movs	r3, #0
 8006220:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006224:	2300      	movs	r3, #0
 8006226:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800622a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800622e:	f003 030f 	and.w	r3, r3, #15
 8006232:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006236:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10f      	bne.n	800625e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800623e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006242:	f003 0320 	and.w	r3, r3, #32
 8006246:	2b00      	cmp	r3, #0
 8006248:	d009      	beq.n	800625e <HAL_UART_IRQHandler+0x66>
 800624a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fcaa 	bl	8006bb0 <UART_Receive_IT>
      return;
 800625c:	e256      	b.n	800670c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800625e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 80de 	beq.w	8006424 <HAL_UART_IRQHandler+0x22c>
 8006268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b00      	cmp	r3, #0
 8006272:	d106      	bne.n	8006282 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006278:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 80d1 	beq.w	8006424 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00b      	beq.n	80062a6 <HAL_UART_IRQHandler+0xae>
 800628e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006296:	2b00      	cmp	r3, #0
 8006298:	d005      	beq.n	80062a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629e:	f043 0201 	orr.w	r2, r3, #1
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062aa:	f003 0304 	and.w	r3, r3, #4
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00b      	beq.n	80062ca <HAL_UART_IRQHandler+0xd2>
 80062b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d005      	beq.n	80062ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c2:	f043 0202 	orr.w	r2, r3, #2
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00b      	beq.n	80062ee <HAL_UART_IRQHandler+0xf6>
 80062d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d005      	beq.n	80062ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	f043 0204 	orr.w	r2, r3, #4
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80062ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062f2:	f003 0308 	and.w	r3, r3, #8
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d011      	beq.n	800631e <HAL_UART_IRQHandler+0x126>
 80062fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062fe:	f003 0320 	and.w	r3, r3, #32
 8006302:	2b00      	cmp	r3, #0
 8006304:	d105      	bne.n	8006312 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d005      	beq.n	800631e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006316:	f043 0208 	orr.w	r2, r3, #8
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 81ed 	beq.w	8006702 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800632c:	f003 0320 	and.w	r3, r3, #32
 8006330:	2b00      	cmp	r3, #0
 8006332:	d008      	beq.n	8006346 <HAL_UART_IRQHandler+0x14e>
 8006334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006338:	f003 0320 	and.w	r3, r3, #32
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fc35 	bl	8006bb0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006350:	2b40      	cmp	r3, #64	; 0x40
 8006352:	bf0c      	ite	eq
 8006354:	2301      	moveq	r3, #1
 8006356:	2300      	movne	r3, #0
 8006358:	b2db      	uxtb	r3, r3
 800635a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	f003 0308 	and.w	r3, r3, #8
 8006366:	2b00      	cmp	r3, #0
 8006368:	d103      	bne.n	8006372 <HAL_UART_IRQHandler+0x17a>
 800636a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800636e:	2b00      	cmp	r3, #0
 8006370:	d04f      	beq.n	8006412 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fb3d 	bl	80069f2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006382:	2b40      	cmp	r3, #64	; 0x40
 8006384:	d141      	bne.n	800640a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3314      	adds	r3, #20
 800638c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800639c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3314      	adds	r3, #20
 80063ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80063b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80063b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80063be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80063c2:	e841 2300 	strex	r3, r2, [r1]
 80063c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80063ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1d9      	bne.n	8006386 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d013      	beq.n	8006402 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063de:	4a7d      	ldr	r2, [pc, #500]	; (80065d4 <HAL_UART_IRQHandler+0x3dc>)
 80063e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fb fe3e 	bl	8002068 <HAL_DMA_Abort_IT>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d016      	beq.n	8006420 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063fc:	4610      	mov	r0, r2
 80063fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006400:	e00e      	b.n	8006420 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f9a4 	bl	8006750 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006408:	e00a      	b.n	8006420 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f9a0 	bl	8006750 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006410:	e006      	b.n	8006420 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f99c 	bl	8006750 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800641e:	e170      	b.n	8006702 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006420:	bf00      	nop
    return;
 8006422:	e16e      	b.n	8006702 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006428:	2b01      	cmp	r3, #1
 800642a:	f040 814a 	bne.w	80066c2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800642e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006432:	f003 0310 	and.w	r3, r3, #16
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 8143 	beq.w	80066c2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800643c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006440:	f003 0310 	and.w	r3, r3, #16
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 813c 	beq.w	80066c2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800644a:	2300      	movs	r3, #0
 800644c:	60bb      	str	r3, [r7, #8]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	60bb      	str	r3, [r7, #8]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	60bb      	str	r3, [r7, #8]
 800645e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646a:	2b40      	cmp	r3, #64	; 0x40
 800646c:	f040 80b4 	bne.w	80065d8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800647c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 8140 	beq.w	8006706 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800648a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800648e:	429a      	cmp	r2, r3
 8006490:	f080 8139 	bcs.w	8006706 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800649a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064a6:	f000 8088 	beq.w	80065ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	330c      	adds	r3, #12
 80064b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80064c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	330c      	adds	r3, #12
 80064d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80064d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80064da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80064e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80064e6:	e841 2300 	strex	r3, r2, [r1]
 80064ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80064ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1d9      	bne.n	80064aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	3314      	adds	r3, #20
 80064fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006500:	e853 3f00 	ldrex	r3, [r3]
 8006504:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006506:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006508:	f023 0301 	bic.w	r3, r3, #1
 800650c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3314      	adds	r3, #20
 8006516:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800651a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800651e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006520:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006522:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800652c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e1      	bne.n	80064f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3314      	adds	r3, #20
 8006538:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800653c:	e853 3f00 	ldrex	r3, [r3]
 8006540:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006548:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3314      	adds	r3, #20
 8006552:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006556:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006558:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800655c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800655e:	e841 2300 	strex	r3, r2, [r1]
 8006562:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1e3      	bne.n	8006532 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2220      	movs	r2, #32
 800656e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	330c      	adds	r3, #12
 800657e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006582:	e853 3f00 	ldrex	r3, [r3]
 8006586:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800658a:	f023 0310 	bic.w	r3, r3, #16
 800658e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	330c      	adds	r3, #12
 8006598:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800659c:	65ba      	str	r2, [r7, #88]	; 0x58
 800659e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065a4:	e841 2300 	strex	r3, r2, [r1]
 80065a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80065aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e3      	bne.n	8006578 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7fb fce7 	bl	8001f88 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	4619      	mov	r1, r3
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f8ca 	bl	8006764 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065d0:	e099      	b.n	8006706 <HAL_UART_IRQHandler+0x50e>
 80065d2:	bf00      	nop
 80065d4:	08006ab9 	.word	0x08006ab9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 808b 	beq.w	800670a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80065f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 8086 	beq.w	800670a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	330c      	adds	r3, #12
 8006604:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006608:	e853 3f00 	ldrex	r3, [r3]
 800660c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800660e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006610:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006614:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	330c      	adds	r3, #12
 800661e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006622:	647a      	str	r2, [r7, #68]	; 0x44
 8006624:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006628:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e3      	bne.n	80065fe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3314      	adds	r3, #20
 800663c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	e853 3f00 	ldrex	r3, [r3]
 8006644:	623b      	str	r3, [r7, #32]
   return(result);
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	f023 0301 	bic.w	r3, r3, #1
 800664c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3314      	adds	r3, #20
 8006656:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800665a:	633a      	str	r2, [r7, #48]	; 0x30
 800665c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006662:	e841 2300 	strex	r3, r2, [r1]
 8006666:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1e3      	bne.n	8006636 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2220      	movs	r2, #32
 8006672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	330c      	adds	r3, #12
 8006682:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	e853 3f00 	ldrex	r3, [r3]
 800668a:	60fb      	str	r3, [r7, #12]
   return(result);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f023 0310 	bic.w	r3, r3, #16
 8006692:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	330c      	adds	r3, #12
 800669c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80066a0:	61fa      	str	r2, [r7, #28]
 80066a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a4:	69b9      	ldr	r1, [r7, #24]
 80066a6:	69fa      	ldr	r2, [r7, #28]
 80066a8:	e841 2300 	strex	r3, r2, [r1]
 80066ac:	617b      	str	r3, [r7, #20]
   return(result);
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1e3      	bne.n	800667c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066b8:	4619      	mov	r1, r3
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f852 	bl	8006764 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066c0:	e023      	b.n	800670a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d009      	beq.n	80066e2 <HAL_UART_IRQHandler+0x4ea>
 80066ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d003      	beq.n	80066e2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fa00 	bl	8006ae0 <UART_Transmit_IT>
    return;
 80066e0:	e014      	b.n	800670c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00e      	beq.n	800670c <HAL_UART_IRQHandler+0x514>
 80066ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d008      	beq.n	800670c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fa40 	bl	8006b80 <UART_EndTransmit_IT>
    return;
 8006700:	e004      	b.n	800670c <HAL_UART_IRQHandler+0x514>
    return;
 8006702:	bf00      	nop
 8006704:	e002      	b.n	800670c <HAL_UART_IRQHandler+0x514>
      return;
 8006706:	bf00      	nop
 8006708:	e000      	b.n	800670c <HAL_UART_IRQHandler+0x514>
      return;
 800670a:	bf00      	nop
  }
}
 800670c:	37e8      	adds	r7, #232	; 0xe8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop

08006714 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	460b      	mov	r3, r1
 800676e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b090      	sub	sp, #64	; 0x40
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006788:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006794:	2b00      	cmp	r3, #0
 8006796:	d137      	bne.n	8006808 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800679a:	2200      	movs	r2, #0
 800679c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800679e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3314      	adds	r3, #20
 80067a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	e853 3f00 	ldrex	r3, [r3]
 80067ac:	623b      	str	r3, [r7, #32]
   return(result);
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80067b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3314      	adds	r3, #20
 80067bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067be:	633a      	str	r2, [r7, #48]	; 0x30
 80067c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067c6:	e841 2300 	strex	r3, r2, [r1]
 80067ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1e5      	bne.n	800679e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	330c      	adds	r3, #12
 80067d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	e853 3f00 	ldrex	r3, [r3]
 80067e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067e8:	637b      	str	r3, [r7, #52]	; 0x34
 80067ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	330c      	adds	r3, #12
 80067f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067f2:	61fa      	str	r2, [r7, #28]
 80067f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f6:	69b9      	ldr	r1, [r7, #24]
 80067f8:	69fa      	ldr	r2, [r7, #28]
 80067fa:	e841 2300 	strex	r3, r2, [r1]
 80067fe:	617b      	str	r3, [r7, #20]
   return(result);
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1e5      	bne.n	80067d2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006806:	e002      	b.n	800680e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006808:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800680a:	f7ff ff83 	bl	8006714 <HAL_UART_TxCpltCallback>
}
 800680e:	bf00      	nop
 8006810:	3740      	adds	r7, #64	; 0x40
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b084      	sub	sp, #16
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006822:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f7ff ff7f 	bl	8006728 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800682a:	bf00      	nop
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b084      	sub	sp, #16
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006842:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800684e:	2b80      	cmp	r3, #128	; 0x80
 8006850:	bf0c      	ite	eq
 8006852:	2301      	moveq	r3, #1
 8006854:	2300      	movne	r3, #0
 8006856:	b2db      	uxtb	r3, r3
 8006858:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b21      	cmp	r3, #33	; 0x21
 8006864:	d108      	bne.n	8006878 <UART_DMAError+0x46>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d005      	beq.n	8006878 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2200      	movs	r2, #0
 8006870:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006872:	68b8      	ldr	r0, [r7, #8]
 8006874:	f000 f895 	bl	80069a2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006882:	2b40      	cmp	r3, #64	; 0x40
 8006884:	bf0c      	ite	eq
 8006886:	2301      	moveq	r3, #1
 8006888:	2300      	movne	r3, #0
 800688a:	b2db      	uxtb	r3, r3
 800688c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b22      	cmp	r3, #34	; 0x22
 8006898:	d108      	bne.n	80068ac <UART_DMAError+0x7a>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d005      	beq.n	80068ac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2200      	movs	r2, #0
 80068a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80068a6:	68b8      	ldr	r0, [r7, #8]
 80068a8:	f000 f8a3 	bl	80069f2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b0:	f043 0210 	orr.w	r2, r3, #16
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068b8:	68b8      	ldr	r0, [r7, #8]
 80068ba:	f7ff ff49 	bl	8006750 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068be:	bf00      	nop
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b090      	sub	sp, #64	; 0x40
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	60f8      	str	r0, [r7, #12]
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	603b      	str	r3, [r7, #0]
 80068d2:	4613      	mov	r3, r2
 80068d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068d6:	e050      	b.n	800697a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068de:	d04c      	beq.n	800697a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80068e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d007      	beq.n	80068f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80068e6:	f7fb f92b 	bl	8001b40 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d241      	bcs.n	800697a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	330c      	adds	r3, #12
 80068fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006900:	e853 3f00 	ldrex	r3, [r3]
 8006904:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800690c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	330c      	adds	r3, #12
 8006914:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006916:	637a      	str	r2, [r7, #52]	; 0x34
 8006918:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800691c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800691e:	e841 2300 	strex	r3, r2, [r1]
 8006922:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1e5      	bne.n	80068f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3314      	adds	r3, #20
 8006930:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	e853 3f00 	ldrex	r3, [r3]
 8006938:	613b      	str	r3, [r7, #16]
   return(result);
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	f023 0301 	bic.w	r3, r3, #1
 8006940:	63bb      	str	r3, [r7, #56]	; 0x38
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	3314      	adds	r3, #20
 8006948:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800694a:	623a      	str	r2, [r7, #32]
 800694c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694e:	69f9      	ldr	r1, [r7, #28]
 8006950:	6a3a      	ldr	r2, [r7, #32]
 8006952:	e841 2300 	strex	r3, r2, [r1]
 8006956:	61bb      	str	r3, [r7, #24]
   return(result);
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1e5      	bne.n	800692a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2220      	movs	r2, #32
 8006962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2220      	movs	r2, #32
 800696a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e00f      	b.n	800699a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	4013      	ands	r3, r2
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	429a      	cmp	r2, r3
 8006988:	bf0c      	ite	eq
 800698a:	2301      	moveq	r3, #1
 800698c:	2300      	movne	r3, #0
 800698e:	b2db      	uxtb	r3, r3
 8006990:	461a      	mov	r2, r3
 8006992:	79fb      	ldrb	r3, [r7, #7]
 8006994:	429a      	cmp	r2, r3
 8006996:	d09f      	beq.n	80068d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3740      	adds	r7, #64	; 0x40
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b089      	sub	sp, #36	; 0x24
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	330c      	adds	r3, #12
 80069b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	e853 3f00 	ldrex	r3, [r3]
 80069b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80069c0:	61fb      	str	r3, [r7, #28]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	330c      	adds	r3, #12
 80069c8:	69fa      	ldr	r2, [r7, #28]
 80069ca:	61ba      	str	r2, [r7, #24]
 80069cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ce:	6979      	ldr	r1, [r7, #20]
 80069d0:	69ba      	ldr	r2, [r7, #24]
 80069d2:	e841 2300 	strex	r3, r2, [r1]
 80069d6:	613b      	str	r3, [r7, #16]
   return(result);
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1e5      	bne.n	80069aa <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2220      	movs	r2, #32
 80069e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80069e6:	bf00      	nop
 80069e8:	3724      	adds	r7, #36	; 0x24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b095      	sub	sp, #84	; 0x54
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	330c      	adds	r3, #12
 8006a00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a04:	e853 3f00 	ldrex	r3, [r3]
 8006a08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	330c      	adds	r3, #12
 8006a18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a1a:	643a      	str	r2, [r7, #64]	; 0x40
 8006a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a22:	e841 2300 	strex	r3, r2, [r1]
 8006a26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1e5      	bne.n	80069fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3314      	adds	r3, #20
 8006a34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	e853 3f00 	ldrex	r3, [r3]
 8006a3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	f023 0301 	bic.w	r3, r3, #1
 8006a44:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3314      	adds	r3, #20
 8006a4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a56:	e841 2300 	strex	r3, r2, [r1]
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1e5      	bne.n	8006a2e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d119      	bne.n	8006a9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	330c      	adds	r3, #12
 8006a70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	e853 3f00 	ldrex	r3, [r3]
 8006a78:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f023 0310 	bic.w	r3, r3, #16
 8006a80:	647b      	str	r3, [r7, #68]	; 0x44
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	330c      	adds	r3, #12
 8006a88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a8a:	61ba      	str	r2, [r7, #24]
 8006a8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8e:	6979      	ldr	r1, [r7, #20]
 8006a90:	69ba      	ldr	r2, [r7, #24]
 8006a92:	e841 2300 	strex	r3, r2, [r1]
 8006a96:	613b      	str	r3, [r7, #16]
   return(result);
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1e5      	bne.n	8006a6a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006aac:	bf00      	nop
 8006aae:	3754      	adds	r7, #84	; 0x54
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f7ff fe3c 	bl	8006750 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ad8:	bf00      	nop
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b21      	cmp	r3, #33	; 0x21
 8006af2:	d13e      	bne.n	8006b72 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006afc:	d114      	bne.n	8006b28 <UART_Transmit_IT+0x48>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d110      	bne.n	8006b28 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	881b      	ldrh	r3, [r3, #0]
 8006b10:	461a      	mov	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b1a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a1b      	ldr	r3, [r3, #32]
 8006b20:	1c9a      	adds	r2, r3, #2
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	621a      	str	r2, [r3, #32]
 8006b26:	e008      	b.n	8006b3a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	1c59      	adds	r1, r3, #1
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	6211      	str	r1, [r2, #32]
 8006b32:	781a      	ldrb	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	4619      	mov	r1, r3
 8006b48:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10f      	bne.n	8006b6e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68da      	ldr	r2, [r3, #12]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b5c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68da      	ldr	r2, [r3, #12]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b6c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	e000      	b.n	8006b74 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b72:	2302      	movs	r3, #2
  }
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68da      	ldr	r2, [r3, #12]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b96:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2220      	movs	r2, #32
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7ff fdb7 	bl	8006714 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b08c      	sub	sp, #48	; 0x30
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b22      	cmp	r3, #34	; 0x22
 8006bc2:	f040 80ab 	bne.w	8006d1c <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bce:	d117      	bne.n	8006c00 <UART_Receive_IT+0x50>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d113      	bne.n	8006c00 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf8:	1c9a      	adds	r2, r3, #2
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	629a      	str	r2, [r3, #40]	; 0x28
 8006bfe:	e026      	b.n	8006c4e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c12:	d007      	beq.n	8006c24 <UART_Receive_IT+0x74>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10a      	bne.n	8006c32 <UART_Receive_IT+0x82>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d106      	bne.n	8006c32 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	b2da      	uxtb	r2, r3
 8006c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2e:	701a      	strb	r2, [r3, #0]
 8006c30:	e008      	b.n	8006c44 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c42:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c48:	1c5a      	adds	r2, r3, #1
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	3b01      	subs	r3, #1
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d15a      	bne.n	8006d18 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68da      	ldr	r2, [r3, #12]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0220 	bic.w	r2, r2, #32
 8006c70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68da      	ldr	r2, [r3, #12]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	695a      	ldr	r2, [r3, #20]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f022 0201 	bic.w	r2, r2, #1
 8006c90:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2220      	movs	r2, #32
 8006c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d135      	bne.n	8006d0e <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	330c      	adds	r3, #12
 8006cae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	e853 3f00 	ldrex	r3, [r3]
 8006cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	f023 0310 	bic.w	r3, r3, #16
 8006cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	330c      	adds	r3, #12
 8006cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc8:	623a      	str	r2, [r7, #32]
 8006cca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ccc:	69f9      	ldr	r1, [r7, #28]
 8006cce:	6a3a      	ldr	r2, [r7, #32]
 8006cd0:	e841 2300 	strex	r3, r2, [r1]
 8006cd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1e5      	bne.n	8006ca8 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0310 	and.w	r3, r3, #16
 8006ce6:	2b10      	cmp	r3, #16
 8006ce8:	d10a      	bne.n	8006d00 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006cea:	2300      	movs	r3, #0
 8006cec:	60fb      	str	r3, [r7, #12]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	60fb      	str	r3, [r7, #12]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	60fb      	str	r3, [r7, #12]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d04:	4619      	mov	r1, r3
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7ff fd2c 	bl	8006764 <HAL_UARTEx_RxEventCallback>
 8006d0c:	e002      	b.n	8006d14 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7ff fd14 	bl	800673c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d14:	2300      	movs	r3, #0
 8006d16:	e002      	b.n	8006d1e <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	e000      	b.n	8006d1e <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006d1c:	2302      	movs	r3, #2
  }
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3730      	adds	r7, #48	; 0x30
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
	...

08006d28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d2c:	b0c0      	sub	sp, #256	; 0x100
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d44:	68d9      	ldr	r1, [r3, #12]
 8006d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	ea40 0301 	orr.w	r3, r0, r1
 8006d50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d56:	689a      	ldr	r2, [r3, #8]
 8006d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	431a      	orrs	r2, r3
 8006d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006d80:	f021 010c 	bic.w	r1, r1, #12
 8006d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d8e:	430b      	orrs	r3, r1
 8006d90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da2:	6999      	ldr	r1, [r3, #24]
 8006da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	ea40 0301 	orr.w	r3, r0, r1
 8006dae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	4b8f      	ldr	r3, [pc, #572]	; (8006ff4 <UART_SetConfig+0x2cc>)
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d005      	beq.n	8006dc8 <UART_SetConfig+0xa0>
 8006dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	4b8d      	ldr	r3, [pc, #564]	; (8006ff8 <UART_SetConfig+0x2d0>)
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d104      	bne.n	8006dd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006dc8:	f7fe fc5e 	bl	8005688 <HAL_RCC_GetPCLK2Freq>
 8006dcc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006dd0:	e003      	b.n	8006dda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006dd2:	f7fe fc45 	bl	8005660 <HAL_RCC_GetPCLK1Freq>
 8006dd6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dde:	69db      	ldr	r3, [r3, #28]
 8006de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006de4:	f040 810c 	bne.w	8007000 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dec:	2200      	movs	r2, #0
 8006dee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006df2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006df6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006dfa:	4622      	mov	r2, r4
 8006dfc:	462b      	mov	r3, r5
 8006dfe:	1891      	adds	r1, r2, r2
 8006e00:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e02:	415b      	adcs	r3, r3
 8006e04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	eb12 0801 	adds.w	r8, r2, r1
 8006e10:	4629      	mov	r1, r5
 8006e12:	eb43 0901 	adc.w	r9, r3, r1
 8006e16:	f04f 0200 	mov.w	r2, #0
 8006e1a:	f04f 0300 	mov.w	r3, #0
 8006e1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e2a:	4690      	mov	r8, r2
 8006e2c:	4699      	mov	r9, r3
 8006e2e:	4623      	mov	r3, r4
 8006e30:	eb18 0303 	adds.w	r3, r8, r3
 8006e34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e38:	462b      	mov	r3, r5
 8006e3a:	eb49 0303 	adc.w	r3, r9, r3
 8006e3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006e52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e56:	460b      	mov	r3, r1
 8006e58:	18db      	adds	r3, r3, r3
 8006e5a:	653b      	str	r3, [r7, #80]	; 0x50
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	eb42 0303 	adc.w	r3, r2, r3
 8006e62:	657b      	str	r3, [r7, #84]	; 0x54
 8006e64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006e68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006e6c:	f7f9 fef4 	bl	8000c58 <__aeabi_uldivmod>
 8006e70:	4602      	mov	r2, r0
 8006e72:	460b      	mov	r3, r1
 8006e74:	4b61      	ldr	r3, [pc, #388]	; (8006ffc <UART_SetConfig+0x2d4>)
 8006e76:	fba3 2302 	umull	r2, r3, r3, r2
 8006e7a:	095b      	lsrs	r3, r3, #5
 8006e7c:	011c      	lsls	r4, r3, #4
 8006e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e82:	2200      	movs	r2, #0
 8006e84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006e8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006e90:	4642      	mov	r2, r8
 8006e92:	464b      	mov	r3, r9
 8006e94:	1891      	adds	r1, r2, r2
 8006e96:	64b9      	str	r1, [r7, #72]	; 0x48
 8006e98:	415b      	adcs	r3, r3
 8006e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ea0:	4641      	mov	r1, r8
 8006ea2:	eb12 0a01 	adds.w	sl, r2, r1
 8006ea6:	4649      	mov	r1, r9
 8006ea8:	eb43 0b01 	adc.w	fp, r3, r1
 8006eac:	f04f 0200 	mov.w	r2, #0
 8006eb0:	f04f 0300 	mov.w	r3, #0
 8006eb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006eb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ebc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ec0:	4692      	mov	sl, r2
 8006ec2:	469b      	mov	fp, r3
 8006ec4:	4643      	mov	r3, r8
 8006ec6:	eb1a 0303 	adds.w	r3, sl, r3
 8006eca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ece:	464b      	mov	r3, r9
 8006ed0:	eb4b 0303 	adc.w	r3, fp, r3
 8006ed4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ee4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006ee8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006eec:	460b      	mov	r3, r1
 8006eee:	18db      	adds	r3, r3, r3
 8006ef0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	eb42 0303 	adc.w	r3, r2, r3
 8006ef8:	647b      	str	r3, [r7, #68]	; 0x44
 8006efa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006efe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006f02:	f7f9 fea9 	bl	8000c58 <__aeabi_uldivmod>
 8006f06:	4602      	mov	r2, r0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	4b3b      	ldr	r3, [pc, #236]	; (8006ffc <UART_SetConfig+0x2d4>)
 8006f0e:	fba3 2301 	umull	r2, r3, r3, r1
 8006f12:	095b      	lsrs	r3, r3, #5
 8006f14:	2264      	movs	r2, #100	; 0x64
 8006f16:	fb02 f303 	mul.w	r3, r2, r3
 8006f1a:	1acb      	subs	r3, r1, r3
 8006f1c:	00db      	lsls	r3, r3, #3
 8006f1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006f22:	4b36      	ldr	r3, [pc, #216]	; (8006ffc <UART_SetConfig+0x2d4>)
 8006f24:	fba3 2302 	umull	r2, r3, r3, r2
 8006f28:	095b      	lsrs	r3, r3, #5
 8006f2a:	005b      	lsls	r3, r3, #1
 8006f2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f30:	441c      	add	r4, r3
 8006f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f36:	2200      	movs	r2, #0
 8006f38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006f40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006f44:	4642      	mov	r2, r8
 8006f46:	464b      	mov	r3, r9
 8006f48:	1891      	adds	r1, r2, r2
 8006f4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f4c:	415b      	adcs	r3, r3
 8006f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f54:	4641      	mov	r1, r8
 8006f56:	1851      	adds	r1, r2, r1
 8006f58:	6339      	str	r1, [r7, #48]	; 0x30
 8006f5a:	4649      	mov	r1, r9
 8006f5c:	414b      	adcs	r3, r1
 8006f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f60:	f04f 0200 	mov.w	r2, #0
 8006f64:	f04f 0300 	mov.w	r3, #0
 8006f68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006f6c:	4659      	mov	r1, fp
 8006f6e:	00cb      	lsls	r3, r1, #3
 8006f70:	4651      	mov	r1, sl
 8006f72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f76:	4651      	mov	r1, sl
 8006f78:	00ca      	lsls	r2, r1, #3
 8006f7a:	4610      	mov	r0, r2
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	4603      	mov	r3, r0
 8006f80:	4642      	mov	r2, r8
 8006f82:	189b      	adds	r3, r3, r2
 8006f84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f88:	464b      	mov	r3, r9
 8006f8a:	460a      	mov	r2, r1
 8006f8c:	eb42 0303 	adc.w	r3, r2, r3
 8006f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006fa0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006fa4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006fa8:	460b      	mov	r3, r1
 8006faa:	18db      	adds	r3, r3, r3
 8006fac:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fae:	4613      	mov	r3, r2
 8006fb0:	eb42 0303 	adc.w	r3, r2, r3
 8006fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006fbe:	f7f9 fe4b 	bl	8000c58 <__aeabi_uldivmod>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	4b0d      	ldr	r3, [pc, #52]	; (8006ffc <UART_SetConfig+0x2d4>)
 8006fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8006fcc:	095b      	lsrs	r3, r3, #5
 8006fce:	2164      	movs	r1, #100	; 0x64
 8006fd0:	fb01 f303 	mul.w	r3, r1, r3
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	3332      	adds	r3, #50	; 0x32
 8006fda:	4a08      	ldr	r2, [pc, #32]	; (8006ffc <UART_SetConfig+0x2d4>)
 8006fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe0:	095b      	lsrs	r3, r3, #5
 8006fe2:	f003 0207 	and.w	r2, r3, #7
 8006fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4422      	add	r2, r4
 8006fee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ff0:	e105      	b.n	80071fe <UART_SetConfig+0x4d6>
 8006ff2:	bf00      	nop
 8006ff4:	40011000 	.word	0x40011000
 8006ff8:	40011400 	.word	0x40011400
 8006ffc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007000:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007004:	2200      	movs	r2, #0
 8007006:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800700a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800700e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007012:	4642      	mov	r2, r8
 8007014:	464b      	mov	r3, r9
 8007016:	1891      	adds	r1, r2, r2
 8007018:	6239      	str	r1, [r7, #32]
 800701a:	415b      	adcs	r3, r3
 800701c:	627b      	str	r3, [r7, #36]	; 0x24
 800701e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007022:	4641      	mov	r1, r8
 8007024:	1854      	adds	r4, r2, r1
 8007026:	4649      	mov	r1, r9
 8007028:	eb43 0501 	adc.w	r5, r3, r1
 800702c:	f04f 0200 	mov.w	r2, #0
 8007030:	f04f 0300 	mov.w	r3, #0
 8007034:	00eb      	lsls	r3, r5, #3
 8007036:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800703a:	00e2      	lsls	r2, r4, #3
 800703c:	4614      	mov	r4, r2
 800703e:	461d      	mov	r5, r3
 8007040:	4643      	mov	r3, r8
 8007042:	18e3      	adds	r3, r4, r3
 8007044:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007048:	464b      	mov	r3, r9
 800704a:	eb45 0303 	adc.w	r3, r5, r3
 800704e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800705e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007062:	f04f 0200 	mov.w	r2, #0
 8007066:	f04f 0300 	mov.w	r3, #0
 800706a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800706e:	4629      	mov	r1, r5
 8007070:	008b      	lsls	r3, r1, #2
 8007072:	4621      	mov	r1, r4
 8007074:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007078:	4621      	mov	r1, r4
 800707a:	008a      	lsls	r2, r1, #2
 800707c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007080:	f7f9 fdea 	bl	8000c58 <__aeabi_uldivmod>
 8007084:	4602      	mov	r2, r0
 8007086:	460b      	mov	r3, r1
 8007088:	4b60      	ldr	r3, [pc, #384]	; (800720c <UART_SetConfig+0x4e4>)
 800708a:	fba3 2302 	umull	r2, r3, r3, r2
 800708e:	095b      	lsrs	r3, r3, #5
 8007090:	011c      	lsls	r4, r3, #4
 8007092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007096:	2200      	movs	r2, #0
 8007098:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800709c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80070a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80070a4:	4642      	mov	r2, r8
 80070a6:	464b      	mov	r3, r9
 80070a8:	1891      	adds	r1, r2, r2
 80070aa:	61b9      	str	r1, [r7, #24]
 80070ac:	415b      	adcs	r3, r3
 80070ae:	61fb      	str	r3, [r7, #28]
 80070b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070b4:	4641      	mov	r1, r8
 80070b6:	1851      	adds	r1, r2, r1
 80070b8:	6139      	str	r1, [r7, #16]
 80070ba:	4649      	mov	r1, r9
 80070bc:	414b      	adcs	r3, r1
 80070be:	617b      	str	r3, [r7, #20]
 80070c0:	f04f 0200 	mov.w	r2, #0
 80070c4:	f04f 0300 	mov.w	r3, #0
 80070c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070cc:	4659      	mov	r1, fp
 80070ce:	00cb      	lsls	r3, r1, #3
 80070d0:	4651      	mov	r1, sl
 80070d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070d6:	4651      	mov	r1, sl
 80070d8:	00ca      	lsls	r2, r1, #3
 80070da:	4610      	mov	r0, r2
 80070dc:	4619      	mov	r1, r3
 80070de:	4603      	mov	r3, r0
 80070e0:	4642      	mov	r2, r8
 80070e2:	189b      	adds	r3, r3, r2
 80070e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070e8:	464b      	mov	r3, r9
 80070ea:	460a      	mov	r2, r1
 80070ec:	eb42 0303 	adc.w	r3, r2, r3
 80070f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80070f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80070fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007100:	f04f 0200 	mov.w	r2, #0
 8007104:	f04f 0300 	mov.w	r3, #0
 8007108:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800710c:	4649      	mov	r1, r9
 800710e:	008b      	lsls	r3, r1, #2
 8007110:	4641      	mov	r1, r8
 8007112:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007116:	4641      	mov	r1, r8
 8007118:	008a      	lsls	r2, r1, #2
 800711a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800711e:	f7f9 fd9b 	bl	8000c58 <__aeabi_uldivmod>
 8007122:	4602      	mov	r2, r0
 8007124:	460b      	mov	r3, r1
 8007126:	4b39      	ldr	r3, [pc, #228]	; (800720c <UART_SetConfig+0x4e4>)
 8007128:	fba3 1302 	umull	r1, r3, r3, r2
 800712c:	095b      	lsrs	r3, r3, #5
 800712e:	2164      	movs	r1, #100	; 0x64
 8007130:	fb01 f303 	mul.w	r3, r1, r3
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	011b      	lsls	r3, r3, #4
 8007138:	3332      	adds	r3, #50	; 0x32
 800713a:	4a34      	ldr	r2, [pc, #208]	; (800720c <UART_SetConfig+0x4e4>)
 800713c:	fba2 2303 	umull	r2, r3, r2, r3
 8007140:	095b      	lsrs	r3, r3, #5
 8007142:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007146:	441c      	add	r4, r3
 8007148:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800714c:	2200      	movs	r2, #0
 800714e:	673b      	str	r3, [r7, #112]	; 0x70
 8007150:	677a      	str	r2, [r7, #116]	; 0x74
 8007152:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007156:	4642      	mov	r2, r8
 8007158:	464b      	mov	r3, r9
 800715a:	1891      	adds	r1, r2, r2
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	415b      	adcs	r3, r3
 8007160:	60fb      	str	r3, [r7, #12]
 8007162:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007166:	4641      	mov	r1, r8
 8007168:	1851      	adds	r1, r2, r1
 800716a:	6039      	str	r1, [r7, #0]
 800716c:	4649      	mov	r1, r9
 800716e:	414b      	adcs	r3, r1
 8007170:	607b      	str	r3, [r7, #4]
 8007172:	f04f 0200 	mov.w	r2, #0
 8007176:	f04f 0300 	mov.w	r3, #0
 800717a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800717e:	4659      	mov	r1, fp
 8007180:	00cb      	lsls	r3, r1, #3
 8007182:	4651      	mov	r1, sl
 8007184:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007188:	4651      	mov	r1, sl
 800718a:	00ca      	lsls	r2, r1, #3
 800718c:	4610      	mov	r0, r2
 800718e:	4619      	mov	r1, r3
 8007190:	4603      	mov	r3, r0
 8007192:	4642      	mov	r2, r8
 8007194:	189b      	adds	r3, r3, r2
 8007196:	66bb      	str	r3, [r7, #104]	; 0x68
 8007198:	464b      	mov	r3, r9
 800719a:	460a      	mov	r2, r1
 800719c:	eb42 0303 	adc.w	r3, r2, r3
 80071a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	663b      	str	r3, [r7, #96]	; 0x60
 80071ac:	667a      	str	r2, [r7, #100]	; 0x64
 80071ae:	f04f 0200 	mov.w	r2, #0
 80071b2:	f04f 0300 	mov.w	r3, #0
 80071b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80071ba:	4649      	mov	r1, r9
 80071bc:	008b      	lsls	r3, r1, #2
 80071be:	4641      	mov	r1, r8
 80071c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071c4:	4641      	mov	r1, r8
 80071c6:	008a      	lsls	r2, r1, #2
 80071c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80071cc:	f7f9 fd44 	bl	8000c58 <__aeabi_uldivmod>
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	4b0d      	ldr	r3, [pc, #52]	; (800720c <UART_SetConfig+0x4e4>)
 80071d6:	fba3 1302 	umull	r1, r3, r3, r2
 80071da:	095b      	lsrs	r3, r3, #5
 80071dc:	2164      	movs	r1, #100	; 0x64
 80071de:	fb01 f303 	mul.w	r3, r1, r3
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	011b      	lsls	r3, r3, #4
 80071e6:	3332      	adds	r3, #50	; 0x32
 80071e8:	4a08      	ldr	r2, [pc, #32]	; (800720c <UART_SetConfig+0x4e4>)
 80071ea:	fba2 2303 	umull	r2, r3, r2, r3
 80071ee:	095b      	lsrs	r3, r3, #5
 80071f0:	f003 020f 	and.w	r2, r3, #15
 80071f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4422      	add	r2, r4
 80071fc:	609a      	str	r2, [r3, #8]
}
 80071fe:	bf00      	nop
 8007200:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007204:	46bd      	mov	sp, r7
 8007206:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800720a:	bf00      	nop
 800720c:	51eb851f 	.word	0x51eb851f

08007210 <__errno>:
 8007210:	4b01      	ldr	r3, [pc, #4]	; (8007218 <__errno+0x8>)
 8007212:	6818      	ldr	r0, [r3, #0]
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	2000001c 	.word	0x2000001c

0800721c <__libc_init_array>:
 800721c:	b570      	push	{r4, r5, r6, lr}
 800721e:	4d0d      	ldr	r5, [pc, #52]	; (8007254 <__libc_init_array+0x38>)
 8007220:	4c0d      	ldr	r4, [pc, #52]	; (8007258 <__libc_init_array+0x3c>)
 8007222:	1b64      	subs	r4, r4, r5
 8007224:	10a4      	asrs	r4, r4, #2
 8007226:	2600      	movs	r6, #0
 8007228:	42a6      	cmp	r6, r4
 800722a:	d109      	bne.n	8007240 <__libc_init_array+0x24>
 800722c:	4d0b      	ldr	r5, [pc, #44]	; (800725c <__libc_init_array+0x40>)
 800722e:	4c0c      	ldr	r4, [pc, #48]	; (8007260 <__libc_init_array+0x44>)
 8007230:	f002 ff16 	bl	800a060 <_init>
 8007234:	1b64      	subs	r4, r4, r5
 8007236:	10a4      	asrs	r4, r4, #2
 8007238:	2600      	movs	r6, #0
 800723a:	42a6      	cmp	r6, r4
 800723c:	d105      	bne.n	800724a <__libc_init_array+0x2e>
 800723e:	bd70      	pop	{r4, r5, r6, pc}
 8007240:	f855 3b04 	ldr.w	r3, [r5], #4
 8007244:	4798      	blx	r3
 8007246:	3601      	adds	r6, #1
 8007248:	e7ee      	b.n	8007228 <__libc_init_array+0xc>
 800724a:	f855 3b04 	ldr.w	r3, [r5], #4
 800724e:	4798      	blx	r3
 8007250:	3601      	adds	r6, #1
 8007252:	e7f2      	b.n	800723a <__libc_init_array+0x1e>
 8007254:	0800a4e4 	.word	0x0800a4e4
 8007258:	0800a4e4 	.word	0x0800a4e4
 800725c:	0800a4e4 	.word	0x0800a4e4
 8007260:	0800a4e8 	.word	0x0800a4e8

08007264 <memset>:
 8007264:	4402      	add	r2, r0
 8007266:	4603      	mov	r3, r0
 8007268:	4293      	cmp	r3, r2
 800726a:	d100      	bne.n	800726e <memset+0xa>
 800726c:	4770      	bx	lr
 800726e:	f803 1b01 	strb.w	r1, [r3], #1
 8007272:	e7f9      	b.n	8007268 <memset+0x4>

08007274 <__cvt>:
 8007274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007278:	ec55 4b10 	vmov	r4, r5, d0
 800727c:	2d00      	cmp	r5, #0
 800727e:	460e      	mov	r6, r1
 8007280:	4619      	mov	r1, r3
 8007282:	462b      	mov	r3, r5
 8007284:	bfbb      	ittet	lt
 8007286:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800728a:	461d      	movlt	r5, r3
 800728c:	2300      	movge	r3, #0
 800728e:	232d      	movlt	r3, #45	; 0x2d
 8007290:	700b      	strb	r3, [r1, #0]
 8007292:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007294:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007298:	4691      	mov	r9, r2
 800729a:	f023 0820 	bic.w	r8, r3, #32
 800729e:	bfbc      	itt	lt
 80072a0:	4622      	movlt	r2, r4
 80072a2:	4614      	movlt	r4, r2
 80072a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072a8:	d005      	beq.n	80072b6 <__cvt+0x42>
 80072aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80072ae:	d100      	bne.n	80072b2 <__cvt+0x3e>
 80072b0:	3601      	adds	r6, #1
 80072b2:	2102      	movs	r1, #2
 80072b4:	e000      	b.n	80072b8 <__cvt+0x44>
 80072b6:	2103      	movs	r1, #3
 80072b8:	ab03      	add	r3, sp, #12
 80072ba:	9301      	str	r3, [sp, #4]
 80072bc:	ab02      	add	r3, sp, #8
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	ec45 4b10 	vmov	d0, r4, r5
 80072c4:	4653      	mov	r3, sl
 80072c6:	4632      	mov	r2, r6
 80072c8:	f000 fcfe 	bl	8007cc8 <_dtoa_r>
 80072cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80072d0:	4607      	mov	r7, r0
 80072d2:	d102      	bne.n	80072da <__cvt+0x66>
 80072d4:	f019 0f01 	tst.w	r9, #1
 80072d8:	d022      	beq.n	8007320 <__cvt+0xac>
 80072da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072de:	eb07 0906 	add.w	r9, r7, r6
 80072e2:	d110      	bne.n	8007306 <__cvt+0x92>
 80072e4:	783b      	ldrb	r3, [r7, #0]
 80072e6:	2b30      	cmp	r3, #48	; 0x30
 80072e8:	d10a      	bne.n	8007300 <__cvt+0x8c>
 80072ea:	2200      	movs	r2, #0
 80072ec:	2300      	movs	r3, #0
 80072ee:	4620      	mov	r0, r4
 80072f0:	4629      	mov	r1, r5
 80072f2:	f7f9 fbf1 	bl	8000ad8 <__aeabi_dcmpeq>
 80072f6:	b918      	cbnz	r0, 8007300 <__cvt+0x8c>
 80072f8:	f1c6 0601 	rsb	r6, r6, #1
 80072fc:	f8ca 6000 	str.w	r6, [sl]
 8007300:	f8da 3000 	ldr.w	r3, [sl]
 8007304:	4499      	add	r9, r3
 8007306:	2200      	movs	r2, #0
 8007308:	2300      	movs	r3, #0
 800730a:	4620      	mov	r0, r4
 800730c:	4629      	mov	r1, r5
 800730e:	f7f9 fbe3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007312:	b108      	cbz	r0, 8007318 <__cvt+0xa4>
 8007314:	f8cd 900c 	str.w	r9, [sp, #12]
 8007318:	2230      	movs	r2, #48	; 0x30
 800731a:	9b03      	ldr	r3, [sp, #12]
 800731c:	454b      	cmp	r3, r9
 800731e:	d307      	bcc.n	8007330 <__cvt+0xbc>
 8007320:	9b03      	ldr	r3, [sp, #12]
 8007322:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007324:	1bdb      	subs	r3, r3, r7
 8007326:	4638      	mov	r0, r7
 8007328:	6013      	str	r3, [r2, #0]
 800732a:	b004      	add	sp, #16
 800732c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007330:	1c59      	adds	r1, r3, #1
 8007332:	9103      	str	r1, [sp, #12]
 8007334:	701a      	strb	r2, [r3, #0]
 8007336:	e7f0      	b.n	800731a <__cvt+0xa6>

08007338 <__exponent>:
 8007338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800733a:	4603      	mov	r3, r0
 800733c:	2900      	cmp	r1, #0
 800733e:	bfb8      	it	lt
 8007340:	4249      	neglt	r1, r1
 8007342:	f803 2b02 	strb.w	r2, [r3], #2
 8007346:	bfb4      	ite	lt
 8007348:	222d      	movlt	r2, #45	; 0x2d
 800734a:	222b      	movge	r2, #43	; 0x2b
 800734c:	2909      	cmp	r1, #9
 800734e:	7042      	strb	r2, [r0, #1]
 8007350:	dd2a      	ble.n	80073a8 <__exponent+0x70>
 8007352:	f10d 0407 	add.w	r4, sp, #7
 8007356:	46a4      	mov	ip, r4
 8007358:	270a      	movs	r7, #10
 800735a:	46a6      	mov	lr, r4
 800735c:	460a      	mov	r2, r1
 800735e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007362:	fb07 1516 	mls	r5, r7, r6, r1
 8007366:	3530      	adds	r5, #48	; 0x30
 8007368:	2a63      	cmp	r2, #99	; 0x63
 800736a:	f104 34ff 	add.w	r4, r4, #4294967295
 800736e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007372:	4631      	mov	r1, r6
 8007374:	dcf1      	bgt.n	800735a <__exponent+0x22>
 8007376:	3130      	adds	r1, #48	; 0x30
 8007378:	f1ae 0502 	sub.w	r5, lr, #2
 800737c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007380:	1c44      	adds	r4, r0, #1
 8007382:	4629      	mov	r1, r5
 8007384:	4561      	cmp	r1, ip
 8007386:	d30a      	bcc.n	800739e <__exponent+0x66>
 8007388:	f10d 0209 	add.w	r2, sp, #9
 800738c:	eba2 020e 	sub.w	r2, r2, lr
 8007390:	4565      	cmp	r5, ip
 8007392:	bf88      	it	hi
 8007394:	2200      	movhi	r2, #0
 8007396:	4413      	add	r3, r2
 8007398:	1a18      	subs	r0, r3, r0
 800739a:	b003      	add	sp, #12
 800739c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800739e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80073a6:	e7ed      	b.n	8007384 <__exponent+0x4c>
 80073a8:	2330      	movs	r3, #48	; 0x30
 80073aa:	3130      	adds	r1, #48	; 0x30
 80073ac:	7083      	strb	r3, [r0, #2]
 80073ae:	70c1      	strb	r1, [r0, #3]
 80073b0:	1d03      	adds	r3, r0, #4
 80073b2:	e7f1      	b.n	8007398 <__exponent+0x60>

080073b4 <_printf_float>:
 80073b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b8:	ed2d 8b02 	vpush	{d8}
 80073bc:	b08d      	sub	sp, #52	; 0x34
 80073be:	460c      	mov	r4, r1
 80073c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80073c4:	4616      	mov	r6, r2
 80073c6:	461f      	mov	r7, r3
 80073c8:	4605      	mov	r5, r0
 80073ca:	f001 fa6b 	bl	80088a4 <_localeconv_r>
 80073ce:	f8d0 a000 	ldr.w	sl, [r0]
 80073d2:	4650      	mov	r0, sl
 80073d4:	f7f8 ff04 	bl	80001e0 <strlen>
 80073d8:	2300      	movs	r3, #0
 80073da:	930a      	str	r3, [sp, #40]	; 0x28
 80073dc:	6823      	ldr	r3, [r4, #0]
 80073de:	9305      	str	r3, [sp, #20]
 80073e0:	f8d8 3000 	ldr.w	r3, [r8]
 80073e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80073e8:	3307      	adds	r3, #7
 80073ea:	f023 0307 	bic.w	r3, r3, #7
 80073ee:	f103 0208 	add.w	r2, r3, #8
 80073f2:	f8c8 2000 	str.w	r2, [r8]
 80073f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80073fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007402:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007406:	9307      	str	r3, [sp, #28]
 8007408:	f8cd 8018 	str.w	r8, [sp, #24]
 800740c:	ee08 0a10 	vmov	s16, r0
 8007410:	4b9f      	ldr	r3, [pc, #636]	; (8007690 <_printf_float+0x2dc>)
 8007412:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007416:	f04f 32ff 	mov.w	r2, #4294967295
 800741a:	f7f9 fb8f 	bl	8000b3c <__aeabi_dcmpun>
 800741e:	bb88      	cbnz	r0, 8007484 <_printf_float+0xd0>
 8007420:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007424:	4b9a      	ldr	r3, [pc, #616]	; (8007690 <_printf_float+0x2dc>)
 8007426:	f04f 32ff 	mov.w	r2, #4294967295
 800742a:	f7f9 fb69 	bl	8000b00 <__aeabi_dcmple>
 800742e:	bb48      	cbnz	r0, 8007484 <_printf_float+0xd0>
 8007430:	2200      	movs	r2, #0
 8007432:	2300      	movs	r3, #0
 8007434:	4640      	mov	r0, r8
 8007436:	4649      	mov	r1, r9
 8007438:	f7f9 fb58 	bl	8000aec <__aeabi_dcmplt>
 800743c:	b110      	cbz	r0, 8007444 <_printf_float+0x90>
 800743e:	232d      	movs	r3, #45	; 0x2d
 8007440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007444:	4b93      	ldr	r3, [pc, #588]	; (8007694 <_printf_float+0x2e0>)
 8007446:	4894      	ldr	r0, [pc, #592]	; (8007698 <_printf_float+0x2e4>)
 8007448:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800744c:	bf94      	ite	ls
 800744e:	4698      	movls	r8, r3
 8007450:	4680      	movhi	r8, r0
 8007452:	2303      	movs	r3, #3
 8007454:	6123      	str	r3, [r4, #16]
 8007456:	9b05      	ldr	r3, [sp, #20]
 8007458:	f023 0204 	bic.w	r2, r3, #4
 800745c:	6022      	str	r2, [r4, #0]
 800745e:	f04f 0900 	mov.w	r9, #0
 8007462:	9700      	str	r7, [sp, #0]
 8007464:	4633      	mov	r3, r6
 8007466:	aa0b      	add	r2, sp, #44	; 0x2c
 8007468:	4621      	mov	r1, r4
 800746a:	4628      	mov	r0, r5
 800746c:	f000 f9d8 	bl	8007820 <_printf_common>
 8007470:	3001      	adds	r0, #1
 8007472:	f040 8090 	bne.w	8007596 <_printf_float+0x1e2>
 8007476:	f04f 30ff 	mov.w	r0, #4294967295
 800747a:	b00d      	add	sp, #52	; 0x34
 800747c:	ecbd 8b02 	vpop	{d8}
 8007480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007484:	4642      	mov	r2, r8
 8007486:	464b      	mov	r3, r9
 8007488:	4640      	mov	r0, r8
 800748a:	4649      	mov	r1, r9
 800748c:	f7f9 fb56 	bl	8000b3c <__aeabi_dcmpun>
 8007490:	b140      	cbz	r0, 80074a4 <_printf_float+0xf0>
 8007492:	464b      	mov	r3, r9
 8007494:	2b00      	cmp	r3, #0
 8007496:	bfbc      	itt	lt
 8007498:	232d      	movlt	r3, #45	; 0x2d
 800749a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800749e:	487f      	ldr	r0, [pc, #508]	; (800769c <_printf_float+0x2e8>)
 80074a0:	4b7f      	ldr	r3, [pc, #508]	; (80076a0 <_printf_float+0x2ec>)
 80074a2:	e7d1      	b.n	8007448 <_printf_float+0x94>
 80074a4:	6863      	ldr	r3, [r4, #4]
 80074a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80074aa:	9206      	str	r2, [sp, #24]
 80074ac:	1c5a      	adds	r2, r3, #1
 80074ae:	d13f      	bne.n	8007530 <_printf_float+0x17c>
 80074b0:	2306      	movs	r3, #6
 80074b2:	6063      	str	r3, [r4, #4]
 80074b4:	9b05      	ldr	r3, [sp, #20]
 80074b6:	6861      	ldr	r1, [r4, #4]
 80074b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80074bc:	2300      	movs	r3, #0
 80074be:	9303      	str	r3, [sp, #12]
 80074c0:	ab0a      	add	r3, sp, #40	; 0x28
 80074c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80074c6:	ab09      	add	r3, sp, #36	; 0x24
 80074c8:	ec49 8b10 	vmov	d0, r8, r9
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	6022      	str	r2, [r4, #0]
 80074d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80074d4:	4628      	mov	r0, r5
 80074d6:	f7ff fecd 	bl	8007274 <__cvt>
 80074da:	9b06      	ldr	r3, [sp, #24]
 80074dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074de:	2b47      	cmp	r3, #71	; 0x47
 80074e0:	4680      	mov	r8, r0
 80074e2:	d108      	bne.n	80074f6 <_printf_float+0x142>
 80074e4:	1cc8      	adds	r0, r1, #3
 80074e6:	db02      	blt.n	80074ee <_printf_float+0x13a>
 80074e8:	6863      	ldr	r3, [r4, #4]
 80074ea:	4299      	cmp	r1, r3
 80074ec:	dd41      	ble.n	8007572 <_printf_float+0x1be>
 80074ee:	f1ab 0b02 	sub.w	fp, fp, #2
 80074f2:	fa5f fb8b 	uxtb.w	fp, fp
 80074f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80074fa:	d820      	bhi.n	800753e <_printf_float+0x18a>
 80074fc:	3901      	subs	r1, #1
 80074fe:	465a      	mov	r2, fp
 8007500:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007504:	9109      	str	r1, [sp, #36]	; 0x24
 8007506:	f7ff ff17 	bl	8007338 <__exponent>
 800750a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800750c:	1813      	adds	r3, r2, r0
 800750e:	2a01      	cmp	r2, #1
 8007510:	4681      	mov	r9, r0
 8007512:	6123      	str	r3, [r4, #16]
 8007514:	dc02      	bgt.n	800751c <_printf_float+0x168>
 8007516:	6822      	ldr	r2, [r4, #0]
 8007518:	07d2      	lsls	r2, r2, #31
 800751a:	d501      	bpl.n	8007520 <_printf_float+0x16c>
 800751c:	3301      	adds	r3, #1
 800751e:	6123      	str	r3, [r4, #16]
 8007520:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007524:	2b00      	cmp	r3, #0
 8007526:	d09c      	beq.n	8007462 <_printf_float+0xae>
 8007528:	232d      	movs	r3, #45	; 0x2d
 800752a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800752e:	e798      	b.n	8007462 <_printf_float+0xae>
 8007530:	9a06      	ldr	r2, [sp, #24]
 8007532:	2a47      	cmp	r2, #71	; 0x47
 8007534:	d1be      	bne.n	80074b4 <_printf_float+0x100>
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1bc      	bne.n	80074b4 <_printf_float+0x100>
 800753a:	2301      	movs	r3, #1
 800753c:	e7b9      	b.n	80074b2 <_printf_float+0xfe>
 800753e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007542:	d118      	bne.n	8007576 <_printf_float+0x1c2>
 8007544:	2900      	cmp	r1, #0
 8007546:	6863      	ldr	r3, [r4, #4]
 8007548:	dd0b      	ble.n	8007562 <_printf_float+0x1ae>
 800754a:	6121      	str	r1, [r4, #16]
 800754c:	b913      	cbnz	r3, 8007554 <_printf_float+0x1a0>
 800754e:	6822      	ldr	r2, [r4, #0]
 8007550:	07d0      	lsls	r0, r2, #31
 8007552:	d502      	bpl.n	800755a <_printf_float+0x1a6>
 8007554:	3301      	adds	r3, #1
 8007556:	440b      	add	r3, r1
 8007558:	6123      	str	r3, [r4, #16]
 800755a:	65a1      	str	r1, [r4, #88]	; 0x58
 800755c:	f04f 0900 	mov.w	r9, #0
 8007560:	e7de      	b.n	8007520 <_printf_float+0x16c>
 8007562:	b913      	cbnz	r3, 800756a <_printf_float+0x1b6>
 8007564:	6822      	ldr	r2, [r4, #0]
 8007566:	07d2      	lsls	r2, r2, #31
 8007568:	d501      	bpl.n	800756e <_printf_float+0x1ba>
 800756a:	3302      	adds	r3, #2
 800756c:	e7f4      	b.n	8007558 <_printf_float+0x1a4>
 800756e:	2301      	movs	r3, #1
 8007570:	e7f2      	b.n	8007558 <_printf_float+0x1a4>
 8007572:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007578:	4299      	cmp	r1, r3
 800757a:	db05      	blt.n	8007588 <_printf_float+0x1d4>
 800757c:	6823      	ldr	r3, [r4, #0]
 800757e:	6121      	str	r1, [r4, #16]
 8007580:	07d8      	lsls	r0, r3, #31
 8007582:	d5ea      	bpl.n	800755a <_printf_float+0x1a6>
 8007584:	1c4b      	adds	r3, r1, #1
 8007586:	e7e7      	b.n	8007558 <_printf_float+0x1a4>
 8007588:	2900      	cmp	r1, #0
 800758a:	bfd4      	ite	le
 800758c:	f1c1 0202 	rsble	r2, r1, #2
 8007590:	2201      	movgt	r2, #1
 8007592:	4413      	add	r3, r2
 8007594:	e7e0      	b.n	8007558 <_printf_float+0x1a4>
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	055a      	lsls	r2, r3, #21
 800759a:	d407      	bmi.n	80075ac <_printf_float+0x1f8>
 800759c:	6923      	ldr	r3, [r4, #16]
 800759e:	4642      	mov	r2, r8
 80075a0:	4631      	mov	r1, r6
 80075a2:	4628      	mov	r0, r5
 80075a4:	47b8      	blx	r7
 80075a6:	3001      	adds	r0, #1
 80075a8:	d12c      	bne.n	8007604 <_printf_float+0x250>
 80075aa:	e764      	b.n	8007476 <_printf_float+0xc2>
 80075ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80075b0:	f240 80e0 	bls.w	8007774 <_printf_float+0x3c0>
 80075b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075b8:	2200      	movs	r2, #0
 80075ba:	2300      	movs	r3, #0
 80075bc:	f7f9 fa8c 	bl	8000ad8 <__aeabi_dcmpeq>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d034      	beq.n	800762e <_printf_float+0x27a>
 80075c4:	4a37      	ldr	r2, [pc, #220]	; (80076a4 <_printf_float+0x2f0>)
 80075c6:	2301      	movs	r3, #1
 80075c8:	4631      	mov	r1, r6
 80075ca:	4628      	mov	r0, r5
 80075cc:	47b8      	blx	r7
 80075ce:	3001      	adds	r0, #1
 80075d0:	f43f af51 	beq.w	8007476 <_printf_float+0xc2>
 80075d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075d8:	429a      	cmp	r2, r3
 80075da:	db02      	blt.n	80075e2 <_printf_float+0x22e>
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	07d8      	lsls	r0, r3, #31
 80075e0:	d510      	bpl.n	8007604 <_printf_float+0x250>
 80075e2:	ee18 3a10 	vmov	r3, s16
 80075e6:	4652      	mov	r2, sl
 80075e8:	4631      	mov	r1, r6
 80075ea:	4628      	mov	r0, r5
 80075ec:	47b8      	blx	r7
 80075ee:	3001      	adds	r0, #1
 80075f0:	f43f af41 	beq.w	8007476 <_printf_float+0xc2>
 80075f4:	f04f 0800 	mov.w	r8, #0
 80075f8:	f104 091a 	add.w	r9, r4, #26
 80075fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075fe:	3b01      	subs	r3, #1
 8007600:	4543      	cmp	r3, r8
 8007602:	dc09      	bgt.n	8007618 <_printf_float+0x264>
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	079b      	lsls	r3, r3, #30
 8007608:	f100 8105 	bmi.w	8007816 <_printf_float+0x462>
 800760c:	68e0      	ldr	r0, [r4, #12]
 800760e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007610:	4298      	cmp	r0, r3
 8007612:	bfb8      	it	lt
 8007614:	4618      	movlt	r0, r3
 8007616:	e730      	b.n	800747a <_printf_float+0xc6>
 8007618:	2301      	movs	r3, #1
 800761a:	464a      	mov	r2, r9
 800761c:	4631      	mov	r1, r6
 800761e:	4628      	mov	r0, r5
 8007620:	47b8      	blx	r7
 8007622:	3001      	adds	r0, #1
 8007624:	f43f af27 	beq.w	8007476 <_printf_float+0xc2>
 8007628:	f108 0801 	add.w	r8, r8, #1
 800762c:	e7e6      	b.n	80075fc <_printf_float+0x248>
 800762e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007630:	2b00      	cmp	r3, #0
 8007632:	dc39      	bgt.n	80076a8 <_printf_float+0x2f4>
 8007634:	4a1b      	ldr	r2, [pc, #108]	; (80076a4 <_printf_float+0x2f0>)
 8007636:	2301      	movs	r3, #1
 8007638:	4631      	mov	r1, r6
 800763a:	4628      	mov	r0, r5
 800763c:	47b8      	blx	r7
 800763e:	3001      	adds	r0, #1
 8007640:	f43f af19 	beq.w	8007476 <_printf_float+0xc2>
 8007644:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007648:	4313      	orrs	r3, r2
 800764a:	d102      	bne.n	8007652 <_printf_float+0x29e>
 800764c:	6823      	ldr	r3, [r4, #0]
 800764e:	07d9      	lsls	r1, r3, #31
 8007650:	d5d8      	bpl.n	8007604 <_printf_float+0x250>
 8007652:	ee18 3a10 	vmov	r3, s16
 8007656:	4652      	mov	r2, sl
 8007658:	4631      	mov	r1, r6
 800765a:	4628      	mov	r0, r5
 800765c:	47b8      	blx	r7
 800765e:	3001      	adds	r0, #1
 8007660:	f43f af09 	beq.w	8007476 <_printf_float+0xc2>
 8007664:	f04f 0900 	mov.w	r9, #0
 8007668:	f104 0a1a 	add.w	sl, r4, #26
 800766c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800766e:	425b      	negs	r3, r3
 8007670:	454b      	cmp	r3, r9
 8007672:	dc01      	bgt.n	8007678 <_printf_float+0x2c4>
 8007674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007676:	e792      	b.n	800759e <_printf_float+0x1ea>
 8007678:	2301      	movs	r3, #1
 800767a:	4652      	mov	r2, sl
 800767c:	4631      	mov	r1, r6
 800767e:	4628      	mov	r0, r5
 8007680:	47b8      	blx	r7
 8007682:	3001      	adds	r0, #1
 8007684:	f43f aef7 	beq.w	8007476 <_printf_float+0xc2>
 8007688:	f109 0901 	add.w	r9, r9, #1
 800768c:	e7ee      	b.n	800766c <_printf_float+0x2b8>
 800768e:	bf00      	nop
 8007690:	7fefffff 	.word	0x7fefffff
 8007694:	0800a108 	.word	0x0800a108
 8007698:	0800a10c 	.word	0x0800a10c
 800769c:	0800a114 	.word	0x0800a114
 80076a0:	0800a110 	.word	0x0800a110
 80076a4:	0800a118 	.word	0x0800a118
 80076a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076ac:	429a      	cmp	r2, r3
 80076ae:	bfa8      	it	ge
 80076b0:	461a      	movge	r2, r3
 80076b2:	2a00      	cmp	r2, #0
 80076b4:	4691      	mov	r9, r2
 80076b6:	dc37      	bgt.n	8007728 <_printf_float+0x374>
 80076b8:	f04f 0b00 	mov.w	fp, #0
 80076bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076c0:	f104 021a 	add.w	r2, r4, #26
 80076c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076c6:	9305      	str	r3, [sp, #20]
 80076c8:	eba3 0309 	sub.w	r3, r3, r9
 80076cc:	455b      	cmp	r3, fp
 80076ce:	dc33      	bgt.n	8007738 <_printf_float+0x384>
 80076d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076d4:	429a      	cmp	r2, r3
 80076d6:	db3b      	blt.n	8007750 <_printf_float+0x39c>
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	07da      	lsls	r2, r3, #31
 80076dc:	d438      	bmi.n	8007750 <_printf_float+0x39c>
 80076de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076e0:	9a05      	ldr	r2, [sp, #20]
 80076e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076e4:	1a9a      	subs	r2, r3, r2
 80076e6:	eba3 0901 	sub.w	r9, r3, r1
 80076ea:	4591      	cmp	r9, r2
 80076ec:	bfa8      	it	ge
 80076ee:	4691      	movge	r9, r2
 80076f0:	f1b9 0f00 	cmp.w	r9, #0
 80076f4:	dc35      	bgt.n	8007762 <_printf_float+0x3ae>
 80076f6:	f04f 0800 	mov.w	r8, #0
 80076fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076fe:	f104 0a1a 	add.w	sl, r4, #26
 8007702:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007706:	1a9b      	subs	r3, r3, r2
 8007708:	eba3 0309 	sub.w	r3, r3, r9
 800770c:	4543      	cmp	r3, r8
 800770e:	f77f af79 	ble.w	8007604 <_printf_float+0x250>
 8007712:	2301      	movs	r3, #1
 8007714:	4652      	mov	r2, sl
 8007716:	4631      	mov	r1, r6
 8007718:	4628      	mov	r0, r5
 800771a:	47b8      	blx	r7
 800771c:	3001      	adds	r0, #1
 800771e:	f43f aeaa 	beq.w	8007476 <_printf_float+0xc2>
 8007722:	f108 0801 	add.w	r8, r8, #1
 8007726:	e7ec      	b.n	8007702 <_printf_float+0x34e>
 8007728:	4613      	mov	r3, r2
 800772a:	4631      	mov	r1, r6
 800772c:	4642      	mov	r2, r8
 800772e:	4628      	mov	r0, r5
 8007730:	47b8      	blx	r7
 8007732:	3001      	adds	r0, #1
 8007734:	d1c0      	bne.n	80076b8 <_printf_float+0x304>
 8007736:	e69e      	b.n	8007476 <_printf_float+0xc2>
 8007738:	2301      	movs	r3, #1
 800773a:	4631      	mov	r1, r6
 800773c:	4628      	mov	r0, r5
 800773e:	9205      	str	r2, [sp, #20]
 8007740:	47b8      	blx	r7
 8007742:	3001      	adds	r0, #1
 8007744:	f43f ae97 	beq.w	8007476 <_printf_float+0xc2>
 8007748:	9a05      	ldr	r2, [sp, #20]
 800774a:	f10b 0b01 	add.w	fp, fp, #1
 800774e:	e7b9      	b.n	80076c4 <_printf_float+0x310>
 8007750:	ee18 3a10 	vmov	r3, s16
 8007754:	4652      	mov	r2, sl
 8007756:	4631      	mov	r1, r6
 8007758:	4628      	mov	r0, r5
 800775a:	47b8      	blx	r7
 800775c:	3001      	adds	r0, #1
 800775e:	d1be      	bne.n	80076de <_printf_float+0x32a>
 8007760:	e689      	b.n	8007476 <_printf_float+0xc2>
 8007762:	9a05      	ldr	r2, [sp, #20]
 8007764:	464b      	mov	r3, r9
 8007766:	4442      	add	r2, r8
 8007768:	4631      	mov	r1, r6
 800776a:	4628      	mov	r0, r5
 800776c:	47b8      	blx	r7
 800776e:	3001      	adds	r0, #1
 8007770:	d1c1      	bne.n	80076f6 <_printf_float+0x342>
 8007772:	e680      	b.n	8007476 <_printf_float+0xc2>
 8007774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007776:	2a01      	cmp	r2, #1
 8007778:	dc01      	bgt.n	800777e <_printf_float+0x3ca>
 800777a:	07db      	lsls	r3, r3, #31
 800777c:	d538      	bpl.n	80077f0 <_printf_float+0x43c>
 800777e:	2301      	movs	r3, #1
 8007780:	4642      	mov	r2, r8
 8007782:	4631      	mov	r1, r6
 8007784:	4628      	mov	r0, r5
 8007786:	47b8      	blx	r7
 8007788:	3001      	adds	r0, #1
 800778a:	f43f ae74 	beq.w	8007476 <_printf_float+0xc2>
 800778e:	ee18 3a10 	vmov	r3, s16
 8007792:	4652      	mov	r2, sl
 8007794:	4631      	mov	r1, r6
 8007796:	4628      	mov	r0, r5
 8007798:	47b8      	blx	r7
 800779a:	3001      	adds	r0, #1
 800779c:	f43f ae6b 	beq.w	8007476 <_printf_float+0xc2>
 80077a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077a4:	2200      	movs	r2, #0
 80077a6:	2300      	movs	r3, #0
 80077a8:	f7f9 f996 	bl	8000ad8 <__aeabi_dcmpeq>
 80077ac:	b9d8      	cbnz	r0, 80077e6 <_printf_float+0x432>
 80077ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077b0:	f108 0201 	add.w	r2, r8, #1
 80077b4:	3b01      	subs	r3, #1
 80077b6:	4631      	mov	r1, r6
 80077b8:	4628      	mov	r0, r5
 80077ba:	47b8      	blx	r7
 80077bc:	3001      	adds	r0, #1
 80077be:	d10e      	bne.n	80077de <_printf_float+0x42a>
 80077c0:	e659      	b.n	8007476 <_printf_float+0xc2>
 80077c2:	2301      	movs	r3, #1
 80077c4:	4652      	mov	r2, sl
 80077c6:	4631      	mov	r1, r6
 80077c8:	4628      	mov	r0, r5
 80077ca:	47b8      	blx	r7
 80077cc:	3001      	adds	r0, #1
 80077ce:	f43f ae52 	beq.w	8007476 <_printf_float+0xc2>
 80077d2:	f108 0801 	add.w	r8, r8, #1
 80077d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077d8:	3b01      	subs	r3, #1
 80077da:	4543      	cmp	r3, r8
 80077dc:	dcf1      	bgt.n	80077c2 <_printf_float+0x40e>
 80077de:	464b      	mov	r3, r9
 80077e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80077e4:	e6dc      	b.n	80075a0 <_printf_float+0x1ec>
 80077e6:	f04f 0800 	mov.w	r8, #0
 80077ea:	f104 0a1a 	add.w	sl, r4, #26
 80077ee:	e7f2      	b.n	80077d6 <_printf_float+0x422>
 80077f0:	2301      	movs	r3, #1
 80077f2:	4642      	mov	r2, r8
 80077f4:	e7df      	b.n	80077b6 <_printf_float+0x402>
 80077f6:	2301      	movs	r3, #1
 80077f8:	464a      	mov	r2, r9
 80077fa:	4631      	mov	r1, r6
 80077fc:	4628      	mov	r0, r5
 80077fe:	47b8      	blx	r7
 8007800:	3001      	adds	r0, #1
 8007802:	f43f ae38 	beq.w	8007476 <_printf_float+0xc2>
 8007806:	f108 0801 	add.w	r8, r8, #1
 800780a:	68e3      	ldr	r3, [r4, #12]
 800780c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800780e:	1a5b      	subs	r3, r3, r1
 8007810:	4543      	cmp	r3, r8
 8007812:	dcf0      	bgt.n	80077f6 <_printf_float+0x442>
 8007814:	e6fa      	b.n	800760c <_printf_float+0x258>
 8007816:	f04f 0800 	mov.w	r8, #0
 800781a:	f104 0919 	add.w	r9, r4, #25
 800781e:	e7f4      	b.n	800780a <_printf_float+0x456>

08007820 <_printf_common>:
 8007820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007824:	4616      	mov	r6, r2
 8007826:	4699      	mov	r9, r3
 8007828:	688a      	ldr	r2, [r1, #8]
 800782a:	690b      	ldr	r3, [r1, #16]
 800782c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007830:	4293      	cmp	r3, r2
 8007832:	bfb8      	it	lt
 8007834:	4613      	movlt	r3, r2
 8007836:	6033      	str	r3, [r6, #0]
 8007838:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800783c:	4607      	mov	r7, r0
 800783e:	460c      	mov	r4, r1
 8007840:	b10a      	cbz	r2, 8007846 <_printf_common+0x26>
 8007842:	3301      	adds	r3, #1
 8007844:	6033      	str	r3, [r6, #0]
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	0699      	lsls	r1, r3, #26
 800784a:	bf42      	ittt	mi
 800784c:	6833      	ldrmi	r3, [r6, #0]
 800784e:	3302      	addmi	r3, #2
 8007850:	6033      	strmi	r3, [r6, #0]
 8007852:	6825      	ldr	r5, [r4, #0]
 8007854:	f015 0506 	ands.w	r5, r5, #6
 8007858:	d106      	bne.n	8007868 <_printf_common+0x48>
 800785a:	f104 0a19 	add.w	sl, r4, #25
 800785e:	68e3      	ldr	r3, [r4, #12]
 8007860:	6832      	ldr	r2, [r6, #0]
 8007862:	1a9b      	subs	r3, r3, r2
 8007864:	42ab      	cmp	r3, r5
 8007866:	dc26      	bgt.n	80078b6 <_printf_common+0x96>
 8007868:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800786c:	1e13      	subs	r3, r2, #0
 800786e:	6822      	ldr	r2, [r4, #0]
 8007870:	bf18      	it	ne
 8007872:	2301      	movne	r3, #1
 8007874:	0692      	lsls	r2, r2, #26
 8007876:	d42b      	bmi.n	80078d0 <_printf_common+0xb0>
 8007878:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800787c:	4649      	mov	r1, r9
 800787e:	4638      	mov	r0, r7
 8007880:	47c0      	blx	r8
 8007882:	3001      	adds	r0, #1
 8007884:	d01e      	beq.n	80078c4 <_printf_common+0xa4>
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	68e5      	ldr	r5, [r4, #12]
 800788a:	6832      	ldr	r2, [r6, #0]
 800788c:	f003 0306 	and.w	r3, r3, #6
 8007890:	2b04      	cmp	r3, #4
 8007892:	bf08      	it	eq
 8007894:	1aad      	subeq	r5, r5, r2
 8007896:	68a3      	ldr	r3, [r4, #8]
 8007898:	6922      	ldr	r2, [r4, #16]
 800789a:	bf0c      	ite	eq
 800789c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078a0:	2500      	movne	r5, #0
 80078a2:	4293      	cmp	r3, r2
 80078a4:	bfc4      	itt	gt
 80078a6:	1a9b      	subgt	r3, r3, r2
 80078a8:	18ed      	addgt	r5, r5, r3
 80078aa:	2600      	movs	r6, #0
 80078ac:	341a      	adds	r4, #26
 80078ae:	42b5      	cmp	r5, r6
 80078b0:	d11a      	bne.n	80078e8 <_printf_common+0xc8>
 80078b2:	2000      	movs	r0, #0
 80078b4:	e008      	b.n	80078c8 <_printf_common+0xa8>
 80078b6:	2301      	movs	r3, #1
 80078b8:	4652      	mov	r2, sl
 80078ba:	4649      	mov	r1, r9
 80078bc:	4638      	mov	r0, r7
 80078be:	47c0      	blx	r8
 80078c0:	3001      	adds	r0, #1
 80078c2:	d103      	bne.n	80078cc <_printf_common+0xac>
 80078c4:	f04f 30ff 	mov.w	r0, #4294967295
 80078c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078cc:	3501      	adds	r5, #1
 80078ce:	e7c6      	b.n	800785e <_printf_common+0x3e>
 80078d0:	18e1      	adds	r1, r4, r3
 80078d2:	1c5a      	adds	r2, r3, #1
 80078d4:	2030      	movs	r0, #48	; 0x30
 80078d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078da:	4422      	add	r2, r4
 80078dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078e4:	3302      	adds	r3, #2
 80078e6:	e7c7      	b.n	8007878 <_printf_common+0x58>
 80078e8:	2301      	movs	r3, #1
 80078ea:	4622      	mov	r2, r4
 80078ec:	4649      	mov	r1, r9
 80078ee:	4638      	mov	r0, r7
 80078f0:	47c0      	blx	r8
 80078f2:	3001      	adds	r0, #1
 80078f4:	d0e6      	beq.n	80078c4 <_printf_common+0xa4>
 80078f6:	3601      	adds	r6, #1
 80078f8:	e7d9      	b.n	80078ae <_printf_common+0x8e>
	...

080078fc <_printf_i>:
 80078fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007900:	7e0f      	ldrb	r7, [r1, #24]
 8007902:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007904:	2f78      	cmp	r7, #120	; 0x78
 8007906:	4691      	mov	r9, r2
 8007908:	4680      	mov	r8, r0
 800790a:	460c      	mov	r4, r1
 800790c:	469a      	mov	sl, r3
 800790e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007912:	d807      	bhi.n	8007924 <_printf_i+0x28>
 8007914:	2f62      	cmp	r7, #98	; 0x62
 8007916:	d80a      	bhi.n	800792e <_printf_i+0x32>
 8007918:	2f00      	cmp	r7, #0
 800791a:	f000 80d8 	beq.w	8007ace <_printf_i+0x1d2>
 800791e:	2f58      	cmp	r7, #88	; 0x58
 8007920:	f000 80a3 	beq.w	8007a6a <_printf_i+0x16e>
 8007924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007928:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800792c:	e03a      	b.n	80079a4 <_printf_i+0xa8>
 800792e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007932:	2b15      	cmp	r3, #21
 8007934:	d8f6      	bhi.n	8007924 <_printf_i+0x28>
 8007936:	a101      	add	r1, pc, #4	; (adr r1, 800793c <_printf_i+0x40>)
 8007938:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800793c:	08007995 	.word	0x08007995
 8007940:	080079a9 	.word	0x080079a9
 8007944:	08007925 	.word	0x08007925
 8007948:	08007925 	.word	0x08007925
 800794c:	08007925 	.word	0x08007925
 8007950:	08007925 	.word	0x08007925
 8007954:	080079a9 	.word	0x080079a9
 8007958:	08007925 	.word	0x08007925
 800795c:	08007925 	.word	0x08007925
 8007960:	08007925 	.word	0x08007925
 8007964:	08007925 	.word	0x08007925
 8007968:	08007ab5 	.word	0x08007ab5
 800796c:	080079d9 	.word	0x080079d9
 8007970:	08007a97 	.word	0x08007a97
 8007974:	08007925 	.word	0x08007925
 8007978:	08007925 	.word	0x08007925
 800797c:	08007ad7 	.word	0x08007ad7
 8007980:	08007925 	.word	0x08007925
 8007984:	080079d9 	.word	0x080079d9
 8007988:	08007925 	.word	0x08007925
 800798c:	08007925 	.word	0x08007925
 8007990:	08007a9f 	.word	0x08007a9f
 8007994:	682b      	ldr	r3, [r5, #0]
 8007996:	1d1a      	adds	r2, r3, #4
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	602a      	str	r2, [r5, #0]
 800799c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079a4:	2301      	movs	r3, #1
 80079a6:	e0a3      	b.n	8007af0 <_printf_i+0x1f4>
 80079a8:	6820      	ldr	r0, [r4, #0]
 80079aa:	6829      	ldr	r1, [r5, #0]
 80079ac:	0606      	lsls	r6, r0, #24
 80079ae:	f101 0304 	add.w	r3, r1, #4
 80079b2:	d50a      	bpl.n	80079ca <_printf_i+0xce>
 80079b4:	680e      	ldr	r6, [r1, #0]
 80079b6:	602b      	str	r3, [r5, #0]
 80079b8:	2e00      	cmp	r6, #0
 80079ba:	da03      	bge.n	80079c4 <_printf_i+0xc8>
 80079bc:	232d      	movs	r3, #45	; 0x2d
 80079be:	4276      	negs	r6, r6
 80079c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079c4:	485e      	ldr	r0, [pc, #376]	; (8007b40 <_printf_i+0x244>)
 80079c6:	230a      	movs	r3, #10
 80079c8:	e019      	b.n	80079fe <_printf_i+0x102>
 80079ca:	680e      	ldr	r6, [r1, #0]
 80079cc:	602b      	str	r3, [r5, #0]
 80079ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80079d2:	bf18      	it	ne
 80079d4:	b236      	sxthne	r6, r6
 80079d6:	e7ef      	b.n	80079b8 <_printf_i+0xbc>
 80079d8:	682b      	ldr	r3, [r5, #0]
 80079da:	6820      	ldr	r0, [r4, #0]
 80079dc:	1d19      	adds	r1, r3, #4
 80079de:	6029      	str	r1, [r5, #0]
 80079e0:	0601      	lsls	r1, r0, #24
 80079e2:	d501      	bpl.n	80079e8 <_printf_i+0xec>
 80079e4:	681e      	ldr	r6, [r3, #0]
 80079e6:	e002      	b.n	80079ee <_printf_i+0xf2>
 80079e8:	0646      	lsls	r6, r0, #25
 80079ea:	d5fb      	bpl.n	80079e4 <_printf_i+0xe8>
 80079ec:	881e      	ldrh	r6, [r3, #0]
 80079ee:	4854      	ldr	r0, [pc, #336]	; (8007b40 <_printf_i+0x244>)
 80079f0:	2f6f      	cmp	r7, #111	; 0x6f
 80079f2:	bf0c      	ite	eq
 80079f4:	2308      	moveq	r3, #8
 80079f6:	230a      	movne	r3, #10
 80079f8:	2100      	movs	r1, #0
 80079fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079fe:	6865      	ldr	r5, [r4, #4]
 8007a00:	60a5      	str	r5, [r4, #8]
 8007a02:	2d00      	cmp	r5, #0
 8007a04:	bfa2      	ittt	ge
 8007a06:	6821      	ldrge	r1, [r4, #0]
 8007a08:	f021 0104 	bicge.w	r1, r1, #4
 8007a0c:	6021      	strge	r1, [r4, #0]
 8007a0e:	b90e      	cbnz	r6, 8007a14 <_printf_i+0x118>
 8007a10:	2d00      	cmp	r5, #0
 8007a12:	d04d      	beq.n	8007ab0 <_printf_i+0x1b4>
 8007a14:	4615      	mov	r5, r2
 8007a16:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a1a:	fb03 6711 	mls	r7, r3, r1, r6
 8007a1e:	5dc7      	ldrb	r7, [r0, r7]
 8007a20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a24:	4637      	mov	r7, r6
 8007a26:	42bb      	cmp	r3, r7
 8007a28:	460e      	mov	r6, r1
 8007a2a:	d9f4      	bls.n	8007a16 <_printf_i+0x11a>
 8007a2c:	2b08      	cmp	r3, #8
 8007a2e:	d10b      	bne.n	8007a48 <_printf_i+0x14c>
 8007a30:	6823      	ldr	r3, [r4, #0]
 8007a32:	07de      	lsls	r6, r3, #31
 8007a34:	d508      	bpl.n	8007a48 <_printf_i+0x14c>
 8007a36:	6923      	ldr	r3, [r4, #16]
 8007a38:	6861      	ldr	r1, [r4, #4]
 8007a3a:	4299      	cmp	r1, r3
 8007a3c:	bfde      	ittt	le
 8007a3e:	2330      	movle	r3, #48	; 0x30
 8007a40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a48:	1b52      	subs	r2, r2, r5
 8007a4a:	6122      	str	r2, [r4, #16]
 8007a4c:	f8cd a000 	str.w	sl, [sp]
 8007a50:	464b      	mov	r3, r9
 8007a52:	aa03      	add	r2, sp, #12
 8007a54:	4621      	mov	r1, r4
 8007a56:	4640      	mov	r0, r8
 8007a58:	f7ff fee2 	bl	8007820 <_printf_common>
 8007a5c:	3001      	adds	r0, #1
 8007a5e:	d14c      	bne.n	8007afa <_printf_i+0x1fe>
 8007a60:	f04f 30ff 	mov.w	r0, #4294967295
 8007a64:	b004      	add	sp, #16
 8007a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a6a:	4835      	ldr	r0, [pc, #212]	; (8007b40 <_printf_i+0x244>)
 8007a6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007a70:	6829      	ldr	r1, [r5, #0]
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a78:	6029      	str	r1, [r5, #0]
 8007a7a:	061d      	lsls	r5, r3, #24
 8007a7c:	d514      	bpl.n	8007aa8 <_printf_i+0x1ac>
 8007a7e:	07df      	lsls	r7, r3, #31
 8007a80:	bf44      	itt	mi
 8007a82:	f043 0320 	orrmi.w	r3, r3, #32
 8007a86:	6023      	strmi	r3, [r4, #0]
 8007a88:	b91e      	cbnz	r6, 8007a92 <_printf_i+0x196>
 8007a8a:	6823      	ldr	r3, [r4, #0]
 8007a8c:	f023 0320 	bic.w	r3, r3, #32
 8007a90:	6023      	str	r3, [r4, #0]
 8007a92:	2310      	movs	r3, #16
 8007a94:	e7b0      	b.n	80079f8 <_printf_i+0xfc>
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	f043 0320 	orr.w	r3, r3, #32
 8007a9c:	6023      	str	r3, [r4, #0]
 8007a9e:	2378      	movs	r3, #120	; 0x78
 8007aa0:	4828      	ldr	r0, [pc, #160]	; (8007b44 <_printf_i+0x248>)
 8007aa2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007aa6:	e7e3      	b.n	8007a70 <_printf_i+0x174>
 8007aa8:	0659      	lsls	r1, r3, #25
 8007aaa:	bf48      	it	mi
 8007aac:	b2b6      	uxthmi	r6, r6
 8007aae:	e7e6      	b.n	8007a7e <_printf_i+0x182>
 8007ab0:	4615      	mov	r5, r2
 8007ab2:	e7bb      	b.n	8007a2c <_printf_i+0x130>
 8007ab4:	682b      	ldr	r3, [r5, #0]
 8007ab6:	6826      	ldr	r6, [r4, #0]
 8007ab8:	6961      	ldr	r1, [r4, #20]
 8007aba:	1d18      	adds	r0, r3, #4
 8007abc:	6028      	str	r0, [r5, #0]
 8007abe:	0635      	lsls	r5, r6, #24
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	d501      	bpl.n	8007ac8 <_printf_i+0x1cc>
 8007ac4:	6019      	str	r1, [r3, #0]
 8007ac6:	e002      	b.n	8007ace <_printf_i+0x1d2>
 8007ac8:	0670      	lsls	r0, r6, #25
 8007aca:	d5fb      	bpl.n	8007ac4 <_printf_i+0x1c8>
 8007acc:	8019      	strh	r1, [r3, #0]
 8007ace:	2300      	movs	r3, #0
 8007ad0:	6123      	str	r3, [r4, #16]
 8007ad2:	4615      	mov	r5, r2
 8007ad4:	e7ba      	b.n	8007a4c <_printf_i+0x150>
 8007ad6:	682b      	ldr	r3, [r5, #0]
 8007ad8:	1d1a      	adds	r2, r3, #4
 8007ada:	602a      	str	r2, [r5, #0]
 8007adc:	681d      	ldr	r5, [r3, #0]
 8007ade:	6862      	ldr	r2, [r4, #4]
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	f7f8 fb84 	bl	80001f0 <memchr>
 8007ae8:	b108      	cbz	r0, 8007aee <_printf_i+0x1f2>
 8007aea:	1b40      	subs	r0, r0, r5
 8007aec:	6060      	str	r0, [r4, #4]
 8007aee:	6863      	ldr	r3, [r4, #4]
 8007af0:	6123      	str	r3, [r4, #16]
 8007af2:	2300      	movs	r3, #0
 8007af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007af8:	e7a8      	b.n	8007a4c <_printf_i+0x150>
 8007afa:	6923      	ldr	r3, [r4, #16]
 8007afc:	462a      	mov	r2, r5
 8007afe:	4649      	mov	r1, r9
 8007b00:	4640      	mov	r0, r8
 8007b02:	47d0      	blx	sl
 8007b04:	3001      	adds	r0, #1
 8007b06:	d0ab      	beq.n	8007a60 <_printf_i+0x164>
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	079b      	lsls	r3, r3, #30
 8007b0c:	d413      	bmi.n	8007b36 <_printf_i+0x23a>
 8007b0e:	68e0      	ldr	r0, [r4, #12]
 8007b10:	9b03      	ldr	r3, [sp, #12]
 8007b12:	4298      	cmp	r0, r3
 8007b14:	bfb8      	it	lt
 8007b16:	4618      	movlt	r0, r3
 8007b18:	e7a4      	b.n	8007a64 <_printf_i+0x168>
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	4632      	mov	r2, r6
 8007b1e:	4649      	mov	r1, r9
 8007b20:	4640      	mov	r0, r8
 8007b22:	47d0      	blx	sl
 8007b24:	3001      	adds	r0, #1
 8007b26:	d09b      	beq.n	8007a60 <_printf_i+0x164>
 8007b28:	3501      	adds	r5, #1
 8007b2a:	68e3      	ldr	r3, [r4, #12]
 8007b2c:	9903      	ldr	r1, [sp, #12]
 8007b2e:	1a5b      	subs	r3, r3, r1
 8007b30:	42ab      	cmp	r3, r5
 8007b32:	dcf2      	bgt.n	8007b1a <_printf_i+0x21e>
 8007b34:	e7eb      	b.n	8007b0e <_printf_i+0x212>
 8007b36:	2500      	movs	r5, #0
 8007b38:	f104 0619 	add.w	r6, r4, #25
 8007b3c:	e7f5      	b.n	8007b2a <_printf_i+0x22e>
 8007b3e:	bf00      	nop
 8007b40:	0800a11a 	.word	0x0800a11a
 8007b44:	0800a12b 	.word	0x0800a12b

08007b48 <sniprintf>:
 8007b48:	b40c      	push	{r2, r3}
 8007b4a:	b530      	push	{r4, r5, lr}
 8007b4c:	4b17      	ldr	r3, [pc, #92]	; (8007bac <sniprintf+0x64>)
 8007b4e:	1e0c      	subs	r4, r1, #0
 8007b50:	681d      	ldr	r5, [r3, #0]
 8007b52:	b09d      	sub	sp, #116	; 0x74
 8007b54:	da08      	bge.n	8007b68 <sniprintf+0x20>
 8007b56:	238b      	movs	r3, #139	; 0x8b
 8007b58:	602b      	str	r3, [r5, #0]
 8007b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5e:	b01d      	add	sp, #116	; 0x74
 8007b60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b64:	b002      	add	sp, #8
 8007b66:	4770      	bx	lr
 8007b68:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007b6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007b70:	bf14      	ite	ne
 8007b72:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007b76:	4623      	moveq	r3, r4
 8007b78:	9304      	str	r3, [sp, #16]
 8007b7a:	9307      	str	r3, [sp, #28]
 8007b7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007b80:	9002      	str	r0, [sp, #8]
 8007b82:	9006      	str	r0, [sp, #24]
 8007b84:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007b88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007b8a:	ab21      	add	r3, sp, #132	; 0x84
 8007b8c:	a902      	add	r1, sp, #8
 8007b8e:	4628      	mov	r0, r5
 8007b90:	9301      	str	r3, [sp, #4]
 8007b92:	f001 fb77 	bl	8009284 <_svfiprintf_r>
 8007b96:	1c43      	adds	r3, r0, #1
 8007b98:	bfbc      	itt	lt
 8007b9a:	238b      	movlt	r3, #139	; 0x8b
 8007b9c:	602b      	strlt	r3, [r5, #0]
 8007b9e:	2c00      	cmp	r4, #0
 8007ba0:	d0dd      	beq.n	8007b5e <sniprintf+0x16>
 8007ba2:	9b02      	ldr	r3, [sp, #8]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	701a      	strb	r2, [r3, #0]
 8007ba8:	e7d9      	b.n	8007b5e <sniprintf+0x16>
 8007baa:	bf00      	nop
 8007bac:	2000001c 	.word	0x2000001c

08007bb0 <quorem>:
 8007bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb4:	6903      	ldr	r3, [r0, #16]
 8007bb6:	690c      	ldr	r4, [r1, #16]
 8007bb8:	42a3      	cmp	r3, r4
 8007bba:	4607      	mov	r7, r0
 8007bbc:	f2c0 8081 	blt.w	8007cc2 <quorem+0x112>
 8007bc0:	3c01      	subs	r4, #1
 8007bc2:	f101 0814 	add.w	r8, r1, #20
 8007bc6:	f100 0514 	add.w	r5, r0, #20
 8007bca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bce:	9301      	str	r3, [sp, #4]
 8007bd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007be0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007be4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007be8:	d331      	bcc.n	8007c4e <quorem+0x9e>
 8007bea:	f04f 0e00 	mov.w	lr, #0
 8007bee:	4640      	mov	r0, r8
 8007bf0:	46ac      	mov	ip, r5
 8007bf2:	46f2      	mov	sl, lr
 8007bf4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007bf8:	b293      	uxth	r3, r2
 8007bfa:	fb06 e303 	mla	r3, r6, r3, lr
 8007bfe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	ebaa 0303 	sub.w	r3, sl, r3
 8007c08:	f8dc a000 	ldr.w	sl, [ip]
 8007c0c:	0c12      	lsrs	r2, r2, #16
 8007c0e:	fa13 f38a 	uxtah	r3, r3, sl
 8007c12:	fb06 e202 	mla	r2, r6, r2, lr
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	9b00      	ldr	r3, [sp, #0]
 8007c1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c1e:	b292      	uxth	r2, r2
 8007c20:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007c24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c28:	f8bd 3000 	ldrh.w	r3, [sp]
 8007c2c:	4581      	cmp	r9, r0
 8007c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c32:	f84c 3b04 	str.w	r3, [ip], #4
 8007c36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c3a:	d2db      	bcs.n	8007bf4 <quorem+0x44>
 8007c3c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c40:	b92b      	cbnz	r3, 8007c4e <quorem+0x9e>
 8007c42:	9b01      	ldr	r3, [sp, #4]
 8007c44:	3b04      	subs	r3, #4
 8007c46:	429d      	cmp	r5, r3
 8007c48:	461a      	mov	r2, r3
 8007c4a:	d32e      	bcc.n	8007caa <quorem+0xfa>
 8007c4c:	613c      	str	r4, [r7, #16]
 8007c4e:	4638      	mov	r0, r7
 8007c50:	f001 f8c4 	bl	8008ddc <__mcmp>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	db24      	blt.n	8007ca2 <quorem+0xf2>
 8007c58:	3601      	adds	r6, #1
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	f04f 0c00 	mov.w	ip, #0
 8007c60:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c64:	f8d0 e000 	ldr.w	lr, [r0]
 8007c68:	b293      	uxth	r3, r2
 8007c6a:	ebac 0303 	sub.w	r3, ip, r3
 8007c6e:	0c12      	lsrs	r2, r2, #16
 8007c70:	fa13 f38e 	uxtah	r3, r3, lr
 8007c74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c82:	45c1      	cmp	r9, r8
 8007c84:	f840 3b04 	str.w	r3, [r0], #4
 8007c88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007c8c:	d2e8      	bcs.n	8007c60 <quorem+0xb0>
 8007c8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c96:	b922      	cbnz	r2, 8007ca2 <quorem+0xf2>
 8007c98:	3b04      	subs	r3, #4
 8007c9a:	429d      	cmp	r5, r3
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	d30a      	bcc.n	8007cb6 <quorem+0x106>
 8007ca0:	613c      	str	r4, [r7, #16]
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	b003      	add	sp, #12
 8007ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007caa:	6812      	ldr	r2, [r2, #0]
 8007cac:	3b04      	subs	r3, #4
 8007cae:	2a00      	cmp	r2, #0
 8007cb0:	d1cc      	bne.n	8007c4c <quorem+0x9c>
 8007cb2:	3c01      	subs	r4, #1
 8007cb4:	e7c7      	b.n	8007c46 <quorem+0x96>
 8007cb6:	6812      	ldr	r2, [r2, #0]
 8007cb8:	3b04      	subs	r3, #4
 8007cba:	2a00      	cmp	r2, #0
 8007cbc:	d1f0      	bne.n	8007ca0 <quorem+0xf0>
 8007cbe:	3c01      	subs	r4, #1
 8007cc0:	e7eb      	b.n	8007c9a <quorem+0xea>
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	e7ee      	b.n	8007ca4 <quorem+0xf4>
	...

08007cc8 <_dtoa_r>:
 8007cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ccc:	ed2d 8b04 	vpush	{d8-d9}
 8007cd0:	ec57 6b10 	vmov	r6, r7, d0
 8007cd4:	b093      	sub	sp, #76	; 0x4c
 8007cd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007cd8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007cdc:	9106      	str	r1, [sp, #24]
 8007cde:	ee10 aa10 	vmov	sl, s0
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ce6:	930c      	str	r3, [sp, #48]	; 0x30
 8007ce8:	46bb      	mov	fp, r7
 8007cea:	b975      	cbnz	r5, 8007d0a <_dtoa_r+0x42>
 8007cec:	2010      	movs	r0, #16
 8007cee:	f000 fddd 	bl	80088ac <malloc>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	6260      	str	r0, [r4, #36]	; 0x24
 8007cf6:	b920      	cbnz	r0, 8007d02 <_dtoa_r+0x3a>
 8007cf8:	4ba7      	ldr	r3, [pc, #668]	; (8007f98 <_dtoa_r+0x2d0>)
 8007cfa:	21ea      	movs	r1, #234	; 0xea
 8007cfc:	48a7      	ldr	r0, [pc, #668]	; (8007f9c <_dtoa_r+0x2d4>)
 8007cfe:	f001 fbd1 	bl	80094a4 <__assert_func>
 8007d02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d06:	6005      	str	r5, [r0, #0]
 8007d08:	60c5      	str	r5, [r0, #12]
 8007d0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d0c:	6819      	ldr	r1, [r3, #0]
 8007d0e:	b151      	cbz	r1, 8007d26 <_dtoa_r+0x5e>
 8007d10:	685a      	ldr	r2, [r3, #4]
 8007d12:	604a      	str	r2, [r1, #4]
 8007d14:	2301      	movs	r3, #1
 8007d16:	4093      	lsls	r3, r2
 8007d18:	608b      	str	r3, [r1, #8]
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f000 fe1c 	bl	8008958 <_Bfree>
 8007d20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d22:	2200      	movs	r2, #0
 8007d24:	601a      	str	r2, [r3, #0]
 8007d26:	1e3b      	subs	r3, r7, #0
 8007d28:	bfaa      	itet	ge
 8007d2a:	2300      	movge	r3, #0
 8007d2c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007d30:	f8c8 3000 	strge.w	r3, [r8]
 8007d34:	4b9a      	ldr	r3, [pc, #616]	; (8007fa0 <_dtoa_r+0x2d8>)
 8007d36:	bfbc      	itt	lt
 8007d38:	2201      	movlt	r2, #1
 8007d3a:	f8c8 2000 	strlt.w	r2, [r8]
 8007d3e:	ea33 030b 	bics.w	r3, r3, fp
 8007d42:	d11b      	bne.n	8007d7c <_dtoa_r+0xb4>
 8007d44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d46:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d4a:	6013      	str	r3, [r2, #0]
 8007d4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d50:	4333      	orrs	r3, r6
 8007d52:	f000 8592 	beq.w	800887a <_dtoa_r+0xbb2>
 8007d56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d58:	b963      	cbnz	r3, 8007d74 <_dtoa_r+0xac>
 8007d5a:	4b92      	ldr	r3, [pc, #584]	; (8007fa4 <_dtoa_r+0x2dc>)
 8007d5c:	e022      	b.n	8007da4 <_dtoa_r+0xdc>
 8007d5e:	4b92      	ldr	r3, [pc, #584]	; (8007fa8 <_dtoa_r+0x2e0>)
 8007d60:	9301      	str	r3, [sp, #4]
 8007d62:	3308      	adds	r3, #8
 8007d64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d66:	6013      	str	r3, [r2, #0]
 8007d68:	9801      	ldr	r0, [sp, #4]
 8007d6a:	b013      	add	sp, #76	; 0x4c
 8007d6c:	ecbd 8b04 	vpop	{d8-d9}
 8007d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d74:	4b8b      	ldr	r3, [pc, #556]	; (8007fa4 <_dtoa_r+0x2dc>)
 8007d76:	9301      	str	r3, [sp, #4]
 8007d78:	3303      	adds	r3, #3
 8007d7a:	e7f3      	b.n	8007d64 <_dtoa_r+0x9c>
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2300      	movs	r3, #0
 8007d80:	4650      	mov	r0, sl
 8007d82:	4659      	mov	r1, fp
 8007d84:	f7f8 fea8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d88:	ec4b ab19 	vmov	d9, sl, fp
 8007d8c:	4680      	mov	r8, r0
 8007d8e:	b158      	cbz	r0, 8007da8 <_dtoa_r+0xe0>
 8007d90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d92:	2301      	movs	r3, #1
 8007d94:	6013      	str	r3, [r2, #0]
 8007d96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 856b 	beq.w	8008874 <_dtoa_r+0xbac>
 8007d9e:	4883      	ldr	r0, [pc, #524]	; (8007fac <_dtoa_r+0x2e4>)
 8007da0:	6018      	str	r0, [r3, #0]
 8007da2:	1e43      	subs	r3, r0, #1
 8007da4:	9301      	str	r3, [sp, #4]
 8007da6:	e7df      	b.n	8007d68 <_dtoa_r+0xa0>
 8007da8:	ec4b ab10 	vmov	d0, sl, fp
 8007dac:	aa10      	add	r2, sp, #64	; 0x40
 8007dae:	a911      	add	r1, sp, #68	; 0x44
 8007db0:	4620      	mov	r0, r4
 8007db2:	f001 f8b9 	bl	8008f28 <__d2b>
 8007db6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007dba:	ee08 0a10 	vmov	s16, r0
 8007dbe:	2d00      	cmp	r5, #0
 8007dc0:	f000 8084 	beq.w	8007ecc <_dtoa_r+0x204>
 8007dc4:	ee19 3a90 	vmov	r3, s19
 8007dc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dcc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007dd0:	4656      	mov	r6, sl
 8007dd2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007dd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007dda:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007dde:	4b74      	ldr	r3, [pc, #464]	; (8007fb0 <_dtoa_r+0x2e8>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	4630      	mov	r0, r6
 8007de4:	4639      	mov	r1, r7
 8007de6:	f7f8 fa57 	bl	8000298 <__aeabi_dsub>
 8007dea:	a365      	add	r3, pc, #404	; (adr r3, 8007f80 <_dtoa_r+0x2b8>)
 8007dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df0:	f7f8 fc0a 	bl	8000608 <__aeabi_dmul>
 8007df4:	a364      	add	r3, pc, #400	; (adr r3, 8007f88 <_dtoa_r+0x2c0>)
 8007df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfa:	f7f8 fa4f 	bl	800029c <__adddf3>
 8007dfe:	4606      	mov	r6, r0
 8007e00:	4628      	mov	r0, r5
 8007e02:	460f      	mov	r7, r1
 8007e04:	f7f8 fb96 	bl	8000534 <__aeabi_i2d>
 8007e08:	a361      	add	r3, pc, #388	; (adr r3, 8007f90 <_dtoa_r+0x2c8>)
 8007e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0e:	f7f8 fbfb 	bl	8000608 <__aeabi_dmul>
 8007e12:	4602      	mov	r2, r0
 8007e14:	460b      	mov	r3, r1
 8007e16:	4630      	mov	r0, r6
 8007e18:	4639      	mov	r1, r7
 8007e1a:	f7f8 fa3f 	bl	800029c <__adddf3>
 8007e1e:	4606      	mov	r6, r0
 8007e20:	460f      	mov	r7, r1
 8007e22:	f7f8 fea1 	bl	8000b68 <__aeabi_d2iz>
 8007e26:	2200      	movs	r2, #0
 8007e28:	9000      	str	r0, [sp, #0]
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	4639      	mov	r1, r7
 8007e30:	f7f8 fe5c 	bl	8000aec <__aeabi_dcmplt>
 8007e34:	b150      	cbz	r0, 8007e4c <_dtoa_r+0x184>
 8007e36:	9800      	ldr	r0, [sp, #0]
 8007e38:	f7f8 fb7c 	bl	8000534 <__aeabi_i2d>
 8007e3c:	4632      	mov	r2, r6
 8007e3e:	463b      	mov	r3, r7
 8007e40:	f7f8 fe4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e44:	b910      	cbnz	r0, 8007e4c <_dtoa_r+0x184>
 8007e46:	9b00      	ldr	r3, [sp, #0]
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	9300      	str	r3, [sp, #0]
 8007e4c:	9b00      	ldr	r3, [sp, #0]
 8007e4e:	2b16      	cmp	r3, #22
 8007e50:	d85a      	bhi.n	8007f08 <_dtoa_r+0x240>
 8007e52:	9a00      	ldr	r2, [sp, #0]
 8007e54:	4b57      	ldr	r3, [pc, #348]	; (8007fb4 <_dtoa_r+0x2ec>)
 8007e56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5e:	ec51 0b19 	vmov	r0, r1, d9
 8007e62:	f7f8 fe43 	bl	8000aec <__aeabi_dcmplt>
 8007e66:	2800      	cmp	r0, #0
 8007e68:	d050      	beq.n	8007f0c <_dtoa_r+0x244>
 8007e6a:	9b00      	ldr	r3, [sp, #0]
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	9300      	str	r3, [sp, #0]
 8007e70:	2300      	movs	r3, #0
 8007e72:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e76:	1b5d      	subs	r5, r3, r5
 8007e78:	1e6b      	subs	r3, r5, #1
 8007e7a:	9305      	str	r3, [sp, #20]
 8007e7c:	bf45      	ittet	mi
 8007e7e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007e82:	9304      	strmi	r3, [sp, #16]
 8007e84:	2300      	movpl	r3, #0
 8007e86:	2300      	movmi	r3, #0
 8007e88:	bf4c      	ite	mi
 8007e8a:	9305      	strmi	r3, [sp, #20]
 8007e8c:	9304      	strpl	r3, [sp, #16]
 8007e8e:	9b00      	ldr	r3, [sp, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	db3d      	blt.n	8007f10 <_dtoa_r+0x248>
 8007e94:	9b05      	ldr	r3, [sp, #20]
 8007e96:	9a00      	ldr	r2, [sp, #0]
 8007e98:	920a      	str	r2, [sp, #40]	; 0x28
 8007e9a:	4413      	add	r3, r2
 8007e9c:	9305      	str	r3, [sp, #20]
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	9307      	str	r3, [sp, #28]
 8007ea2:	9b06      	ldr	r3, [sp, #24]
 8007ea4:	2b09      	cmp	r3, #9
 8007ea6:	f200 8089 	bhi.w	8007fbc <_dtoa_r+0x2f4>
 8007eaa:	2b05      	cmp	r3, #5
 8007eac:	bfc4      	itt	gt
 8007eae:	3b04      	subgt	r3, #4
 8007eb0:	9306      	strgt	r3, [sp, #24]
 8007eb2:	9b06      	ldr	r3, [sp, #24]
 8007eb4:	f1a3 0302 	sub.w	r3, r3, #2
 8007eb8:	bfcc      	ite	gt
 8007eba:	2500      	movgt	r5, #0
 8007ebc:	2501      	movle	r5, #1
 8007ebe:	2b03      	cmp	r3, #3
 8007ec0:	f200 8087 	bhi.w	8007fd2 <_dtoa_r+0x30a>
 8007ec4:	e8df f003 	tbb	[pc, r3]
 8007ec8:	59383a2d 	.word	0x59383a2d
 8007ecc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007ed0:	441d      	add	r5, r3
 8007ed2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007ed6:	2b20      	cmp	r3, #32
 8007ed8:	bfc1      	itttt	gt
 8007eda:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ede:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007ee2:	fa0b f303 	lslgt.w	r3, fp, r3
 8007ee6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007eea:	bfda      	itte	le
 8007eec:	f1c3 0320 	rsble	r3, r3, #32
 8007ef0:	fa06 f003 	lslle.w	r0, r6, r3
 8007ef4:	4318      	orrgt	r0, r3
 8007ef6:	f7f8 fb0d 	bl	8000514 <__aeabi_ui2d>
 8007efa:	2301      	movs	r3, #1
 8007efc:	4606      	mov	r6, r0
 8007efe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007f02:	3d01      	subs	r5, #1
 8007f04:	930e      	str	r3, [sp, #56]	; 0x38
 8007f06:	e76a      	b.n	8007dde <_dtoa_r+0x116>
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e7b2      	b.n	8007e72 <_dtoa_r+0x1aa>
 8007f0c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007f0e:	e7b1      	b.n	8007e74 <_dtoa_r+0x1ac>
 8007f10:	9b04      	ldr	r3, [sp, #16]
 8007f12:	9a00      	ldr	r2, [sp, #0]
 8007f14:	1a9b      	subs	r3, r3, r2
 8007f16:	9304      	str	r3, [sp, #16]
 8007f18:	4253      	negs	r3, r2
 8007f1a:	9307      	str	r3, [sp, #28]
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	930a      	str	r3, [sp, #40]	; 0x28
 8007f20:	e7bf      	b.n	8007ea2 <_dtoa_r+0x1da>
 8007f22:	2300      	movs	r3, #0
 8007f24:	9308      	str	r3, [sp, #32]
 8007f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	dc55      	bgt.n	8007fd8 <_dtoa_r+0x310>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f32:	461a      	mov	r2, r3
 8007f34:	9209      	str	r2, [sp, #36]	; 0x24
 8007f36:	e00c      	b.n	8007f52 <_dtoa_r+0x28a>
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e7f3      	b.n	8007f24 <_dtoa_r+0x25c>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f40:	9308      	str	r3, [sp, #32]
 8007f42:	9b00      	ldr	r3, [sp, #0]
 8007f44:	4413      	add	r3, r2
 8007f46:	9302      	str	r3, [sp, #8]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	9303      	str	r3, [sp, #12]
 8007f4e:	bfb8      	it	lt
 8007f50:	2301      	movlt	r3, #1
 8007f52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007f54:	2200      	movs	r2, #0
 8007f56:	6042      	str	r2, [r0, #4]
 8007f58:	2204      	movs	r2, #4
 8007f5a:	f102 0614 	add.w	r6, r2, #20
 8007f5e:	429e      	cmp	r6, r3
 8007f60:	6841      	ldr	r1, [r0, #4]
 8007f62:	d93d      	bls.n	8007fe0 <_dtoa_r+0x318>
 8007f64:	4620      	mov	r0, r4
 8007f66:	f000 fcb7 	bl	80088d8 <_Balloc>
 8007f6a:	9001      	str	r0, [sp, #4]
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d13b      	bne.n	8007fe8 <_dtoa_r+0x320>
 8007f70:	4b11      	ldr	r3, [pc, #68]	; (8007fb8 <_dtoa_r+0x2f0>)
 8007f72:	4602      	mov	r2, r0
 8007f74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f78:	e6c0      	b.n	8007cfc <_dtoa_r+0x34>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e7df      	b.n	8007f3e <_dtoa_r+0x276>
 8007f7e:	bf00      	nop
 8007f80:	636f4361 	.word	0x636f4361
 8007f84:	3fd287a7 	.word	0x3fd287a7
 8007f88:	8b60c8b3 	.word	0x8b60c8b3
 8007f8c:	3fc68a28 	.word	0x3fc68a28
 8007f90:	509f79fb 	.word	0x509f79fb
 8007f94:	3fd34413 	.word	0x3fd34413
 8007f98:	0800a149 	.word	0x0800a149
 8007f9c:	0800a160 	.word	0x0800a160
 8007fa0:	7ff00000 	.word	0x7ff00000
 8007fa4:	0800a145 	.word	0x0800a145
 8007fa8:	0800a13c 	.word	0x0800a13c
 8007fac:	0800a119 	.word	0x0800a119
 8007fb0:	3ff80000 	.word	0x3ff80000
 8007fb4:	0800a250 	.word	0x0800a250
 8007fb8:	0800a1bb 	.word	0x0800a1bb
 8007fbc:	2501      	movs	r5, #1
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	9306      	str	r3, [sp, #24]
 8007fc2:	9508      	str	r5, [sp, #32]
 8007fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8007fc8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	2312      	movs	r3, #18
 8007fd0:	e7b0      	b.n	8007f34 <_dtoa_r+0x26c>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	9308      	str	r3, [sp, #32]
 8007fd6:	e7f5      	b.n	8007fc4 <_dtoa_r+0x2fc>
 8007fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fda:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007fde:	e7b8      	b.n	8007f52 <_dtoa_r+0x28a>
 8007fe0:	3101      	adds	r1, #1
 8007fe2:	6041      	str	r1, [r0, #4]
 8007fe4:	0052      	lsls	r2, r2, #1
 8007fe6:	e7b8      	b.n	8007f5a <_dtoa_r+0x292>
 8007fe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fea:	9a01      	ldr	r2, [sp, #4]
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	9b03      	ldr	r3, [sp, #12]
 8007ff0:	2b0e      	cmp	r3, #14
 8007ff2:	f200 809d 	bhi.w	8008130 <_dtoa_r+0x468>
 8007ff6:	2d00      	cmp	r5, #0
 8007ff8:	f000 809a 	beq.w	8008130 <_dtoa_r+0x468>
 8007ffc:	9b00      	ldr	r3, [sp, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	dd32      	ble.n	8008068 <_dtoa_r+0x3a0>
 8008002:	4ab7      	ldr	r2, [pc, #732]	; (80082e0 <_dtoa_r+0x618>)
 8008004:	f003 030f 	and.w	r3, r3, #15
 8008008:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800800c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008010:	9b00      	ldr	r3, [sp, #0]
 8008012:	05d8      	lsls	r0, r3, #23
 8008014:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008018:	d516      	bpl.n	8008048 <_dtoa_r+0x380>
 800801a:	4bb2      	ldr	r3, [pc, #712]	; (80082e4 <_dtoa_r+0x61c>)
 800801c:	ec51 0b19 	vmov	r0, r1, d9
 8008020:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008024:	f7f8 fc1a 	bl	800085c <__aeabi_ddiv>
 8008028:	f007 070f 	and.w	r7, r7, #15
 800802c:	4682      	mov	sl, r0
 800802e:	468b      	mov	fp, r1
 8008030:	2503      	movs	r5, #3
 8008032:	4eac      	ldr	r6, [pc, #688]	; (80082e4 <_dtoa_r+0x61c>)
 8008034:	b957      	cbnz	r7, 800804c <_dtoa_r+0x384>
 8008036:	4642      	mov	r2, r8
 8008038:	464b      	mov	r3, r9
 800803a:	4650      	mov	r0, sl
 800803c:	4659      	mov	r1, fp
 800803e:	f7f8 fc0d 	bl	800085c <__aeabi_ddiv>
 8008042:	4682      	mov	sl, r0
 8008044:	468b      	mov	fp, r1
 8008046:	e028      	b.n	800809a <_dtoa_r+0x3d2>
 8008048:	2502      	movs	r5, #2
 800804a:	e7f2      	b.n	8008032 <_dtoa_r+0x36a>
 800804c:	07f9      	lsls	r1, r7, #31
 800804e:	d508      	bpl.n	8008062 <_dtoa_r+0x39a>
 8008050:	4640      	mov	r0, r8
 8008052:	4649      	mov	r1, r9
 8008054:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008058:	f7f8 fad6 	bl	8000608 <__aeabi_dmul>
 800805c:	3501      	adds	r5, #1
 800805e:	4680      	mov	r8, r0
 8008060:	4689      	mov	r9, r1
 8008062:	107f      	asrs	r7, r7, #1
 8008064:	3608      	adds	r6, #8
 8008066:	e7e5      	b.n	8008034 <_dtoa_r+0x36c>
 8008068:	f000 809b 	beq.w	80081a2 <_dtoa_r+0x4da>
 800806c:	9b00      	ldr	r3, [sp, #0]
 800806e:	4f9d      	ldr	r7, [pc, #628]	; (80082e4 <_dtoa_r+0x61c>)
 8008070:	425e      	negs	r6, r3
 8008072:	4b9b      	ldr	r3, [pc, #620]	; (80082e0 <_dtoa_r+0x618>)
 8008074:	f006 020f 	and.w	r2, r6, #15
 8008078:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008080:	ec51 0b19 	vmov	r0, r1, d9
 8008084:	f7f8 fac0 	bl	8000608 <__aeabi_dmul>
 8008088:	1136      	asrs	r6, r6, #4
 800808a:	4682      	mov	sl, r0
 800808c:	468b      	mov	fp, r1
 800808e:	2300      	movs	r3, #0
 8008090:	2502      	movs	r5, #2
 8008092:	2e00      	cmp	r6, #0
 8008094:	d17a      	bne.n	800818c <_dtoa_r+0x4c4>
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1d3      	bne.n	8008042 <_dtoa_r+0x37a>
 800809a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800809c:	2b00      	cmp	r3, #0
 800809e:	f000 8082 	beq.w	80081a6 <_dtoa_r+0x4de>
 80080a2:	4b91      	ldr	r3, [pc, #580]	; (80082e8 <_dtoa_r+0x620>)
 80080a4:	2200      	movs	r2, #0
 80080a6:	4650      	mov	r0, sl
 80080a8:	4659      	mov	r1, fp
 80080aa:	f7f8 fd1f 	bl	8000aec <__aeabi_dcmplt>
 80080ae:	2800      	cmp	r0, #0
 80080b0:	d079      	beq.n	80081a6 <_dtoa_r+0x4de>
 80080b2:	9b03      	ldr	r3, [sp, #12]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d076      	beq.n	80081a6 <_dtoa_r+0x4de>
 80080b8:	9b02      	ldr	r3, [sp, #8]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	dd36      	ble.n	800812c <_dtoa_r+0x464>
 80080be:	9b00      	ldr	r3, [sp, #0]
 80080c0:	4650      	mov	r0, sl
 80080c2:	4659      	mov	r1, fp
 80080c4:	1e5f      	subs	r7, r3, #1
 80080c6:	2200      	movs	r2, #0
 80080c8:	4b88      	ldr	r3, [pc, #544]	; (80082ec <_dtoa_r+0x624>)
 80080ca:	f7f8 fa9d 	bl	8000608 <__aeabi_dmul>
 80080ce:	9e02      	ldr	r6, [sp, #8]
 80080d0:	4682      	mov	sl, r0
 80080d2:	468b      	mov	fp, r1
 80080d4:	3501      	adds	r5, #1
 80080d6:	4628      	mov	r0, r5
 80080d8:	f7f8 fa2c 	bl	8000534 <__aeabi_i2d>
 80080dc:	4652      	mov	r2, sl
 80080de:	465b      	mov	r3, fp
 80080e0:	f7f8 fa92 	bl	8000608 <__aeabi_dmul>
 80080e4:	4b82      	ldr	r3, [pc, #520]	; (80082f0 <_dtoa_r+0x628>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	f7f8 f8d8 	bl	800029c <__adddf3>
 80080ec:	46d0      	mov	r8, sl
 80080ee:	46d9      	mov	r9, fp
 80080f0:	4682      	mov	sl, r0
 80080f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80080f6:	2e00      	cmp	r6, #0
 80080f8:	d158      	bne.n	80081ac <_dtoa_r+0x4e4>
 80080fa:	4b7e      	ldr	r3, [pc, #504]	; (80082f4 <_dtoa_r+0x62c>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	4640      	mov	r0, r8
 8008100:	4649      	mov	r1, r9
 8008102:	f7f8 f8c9 	bl	8000298 <__aeabi_dsub>
 8008106:	4652      	mov	r2, sl
 8008108:	465b      	mov	r3, fp
 800810a:	4680      	mov	r8, r0
 800810c:	4689      	mov	r9, r1
 800810e:	f7f8 fd0b 	bl	8000b28 <__aeabi_dcmpgt>
 8008112:	2800      	cmp	r0, #0
 8008114:	f040 8295 	bne.w	8008642 <_dtoa_r+0x97a>
 8008118:	4652      	mov	r2, sl
 800811a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800811e:	4640      	mov	r0, r8
 8008120:	4649      	mov	r1, r9
 8008122:	f7f8 fce3 	bl	8000aec <__aeabi_dcmplt>
 8008126:	2800      	cmp	r0, #0
 8008128:	f040 8289 	bne.w	800863e <_dtoa_r+0x976>
 800812c:	ec5b ab19 	vmov	sl, fp, d9
 8008130:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008132:	2b00      	cmp	r3, #0
 8008134:	f2c0 8148 	blt.w	80083c8 <_dtoa_r+0x700>
 8008138:	9a00      	ldr	r2, [sp, #0]
 800813a:	2a0e      	cmp	r2, #14
 800813c:	f300 8144 	bgt.w	80083c8 <_dtoa_r+0x700>
 8008140:	4b67      	ldr	r3, [pc, #412]	; (80082e0 <_dtoa_r+0x618>)
 8008142:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008146:	e9d3 8900 	ldrd	r8, r9, [r3]
 800814a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800814c:	2b00      	cmp	r3, #0
 800814e:	f280 80d5 	bge.w	80082fc <_dtoa_r+0x634>
 8008152:	9b03      	ldr	r3, [sp, #12]
 8008154:	2b00      	cmp	r3, #0
 8008156:	f300 80d1 	bgt.w	80082fc <_dtoa_r+0x634>
 800815a:	f040 826f 	bne.w	800863c <_dtoa_r+0x974>
 800815e:	4b65      	ldr	r3, [pc, #404]	; (80082f4 <_dtoa_r+0x62c>)
 8008160:	2200      	movs	r2, #0
 8008162:	4640      	mov	r0, r8
 8008164:	4649      	mov	r1, r9
 8008166:	f7f8 fa4f 	bl	8000608 <__aeabi_dmul>
 800816a:	4652      	mov	r2, sl
 800816c:	465b      	mov	r3, fp
 800816e:	f7f8 fcd1 	bl	8000b14 <__aeabi_dcmpge>
 8008172:	9e03      	ldr	r6, [sp, #12]
 8008174:	4637      	mov	r7, r6
 8008176:	2800      	cmp	r0, #0
 8008178:	f040 8245 	bne.w	8008606 <_dtoa_r+0x93e>
 800817c:	9d01      	ldr	r5, [sp, #4]
 800817e:	2331      	movs	r3, #49	; 0x31
 8008180:	f805 3b01 	strb.w	r3, [r5], #1
 8008184:	9b00      	ldr	r3, [sp, #0]
 8008186:	3301      	adds	r3, #1
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	e240      	b.n	800860e <_dtoa_r+0x946>
 800818c:	07f2      	lsls	r2, r6, #31
 800818e:	d505      	bpl.n	800819c <_dtoa_r+0x4d4>
 8008190:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008194:	f7f8 fa38 	bl	8000608 <__aeabi_dmul>
 8008198:	3501      	adds	r5, #1
 800819a:	2301      	movs	r3, #1
 800819c:	1076      	asrs	r6, r6, #1
 800819e:	3708      	adds	r7, #8
 80081a0:	e777      	b.n	8008092 <_dtoa_r+0x3ca>
 80081a2:	2502      	movs	r5, #2
 80081a4:	e779      	b.n	800809a <_dtoa_r+0x3d2>
 80081a6:	9f00      	ldr	r7, [sp, #0]
 80081a8:	9e03      	ldr	r6, [sp, #12]
 80081aa:	e794      	b.n	80080d6 <_dtoa_r+0x40e>
 80081ac:	9901      	ldr	r1, [sp, #4]
 80081ae:	4b4c      	ldr	r3, [pc, #304]	; (80082e0 <_dtoa_r+0x618>)
 80081b0:	4431      	add	r1, r6
 80081b2:	910d      	str	r1, [sp, #52]	; 0x34
 80081b4:	9908      	ldr	r1, [sp, #32]
 80081b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80081ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081be:	2900      	cmp	r1, #0
 80081c0:	d043      	beq.n	800824a <_dtoa_r+0x582>
 80081c2:	494d      	ldr	r1, [pc, #308]	; (80082f8 <_dtoa_r+0x630>)
 80081c4:	2000      	movs	r0, #0
 80081c6:	f7f8 fb49 	bl	800085c <__aeabi_ddiv>
 80081ca:	4652      	mov	r2, sl
 80081cc:	465b      	mov	r3, fp
 80081ce:	f7f8 f863 	bl	8000298 <__aeabi_dsub>
 80081d2:	9d01      	ldr	r5, [sp, #4]
 80081d4:	4682      	mov	sl, r0
 80081d6:	468b      	mov	fp, r1
 80081d8:	4649      	mov	r1, r9
 80081da:	4640      	mov	r0, r8
 80081dc:	f7f8 fcc4 	bl	8000b68 <__aeabi_d2iz>
 80081e0:	4606      	mov	r6, r0
 80081e2:	f7f8 f9a7 	bl	8000534 <__aeabi_i2d>
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	4640      	mov	r0, r8
 80081ec:	4649      	mov	r1, r9
 80081ee:	f7f8 f853 	bl	8000298 <__aeabi_dsub>
 80081f2:	3630      	adds	r6, #48	; 0x30
 80081f4:	f805 6b01 	strb.w	r6, [r5], #1
 80081f8:	4652      	mov	r2, sl
 80081fa:	465b      	mov	r3, fp
 80081fc:	4680      	mov	r8, r0
 80081fe:	4689      	mov	r9, r1
 8008200:	f7f8 fc74 	bl	8000aec <__aeabi_dcmplt>
 8008204:	2800      	cmp	r0, #0
 8008206:	d163      	bne.n	80082d0 <_dtoa_r+0x608>
 8008208:	4642      	mov	r2, r8
 800820a:	464b      	mov	r3, r9
 800820c:	4936      	ldr	r1, [pc, #216]	; (80082e8 <_dtoa_r+0x620>)
 800820e:	2000      	movs	r0, #0
 8008210:	f7f8 f842 	bl	8000298 <__aeabi_dsub>
 8008214:	4652      	mov	r2, sl
 8008216:	465b      	mov	r3, fp
 8008218:	f7f8 fc68 	bl	8000aec <__aeabi_dcmplt>
 800821c:	2800      	cmp	r0, #0
 800821e:	f040 80b5 	bne.w	800838c <_dtoa_r+0x6c4>
 8008222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008224:	429d      	cmp	r5, r3
 8008226:	d081      	beq.n	800812c <_dtoa_r+0x464>
 8008228:	4b30      	ldr	r3, [pc, #192]	; (80082ec <_dtoa_r+0x624>)
 800822a:	2200      	movs	r2, #0
 800822c:	4650      	mov	r0, sl
 800822e:	4659      	mov	r1, fp
 8008230:	f7f8 f9ea 	bl	8000608 <__aeabi_dmul>
 8008234:	4b2d      	ldr	r3, [pc, #180]	; (80082ec <_dtoa_r+0x624>)
 8008236:	4682      	mov	sl, r0
 8008238:	468b      	mov	fp, r1
 800823a:	4640      	mov	r0, r8
 800823c:	4649      	mov	r1, r9
 800823e:	2200      	movs	r2, #0
 8008240:	f7f8 f9e2 	bl	8000608 <__aeabi_dmul>
 8008244:	4680      	mov	r8, r0
 8008246:	4689      	mov	r9, r1
 8008248:	e7c6      	b.n	80081d8 <_dtoa_r+0x510>
 800824a:	4650      	mov	r0, sl
 800824c:	4659      	mov	r1, fp
 800824e:	f7f8 f9db 	bl	8000608 <__aeabi_dmul>
 8008252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008254:	9d01      	ldr	r5, [sp, #4]
 8008256:	930f      	str	r3, [sp, #60]	; 0x3c
 8008258:	4682      	mov	sl, r0
 800825a:	468b      	mov	fp, r1
 800825c:	4649      	mov	r1, r9
 800825e:	4640      	mov	r0, r8
 8008260:	f7f8 fc82 	bl	8000b68 <__aeabi_d2iz>
 8008264:	4606      	mov	r6, r0
 8008266:	f7f8 f965 	bl	8000534 <__aeabi_i2d>
 800826a:	3630      	adds	r6, #48	; 0x30
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	4640      	mov	r0, r8
 8008272:	4649      	mov	r1, r9
 8008274:	f7f8 f810 	bl	8000298 <__aeabi_dsub>
 8008278:	f805 6b01 	strb.w	r6, [r5], #1
 800827c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800827e:	429d      	cmp	r5, r3
 8008280:	4680      	mov	r8, r0
 8008282:	4689      	mov	r9, r1
 8008284:	f04f 0200 	mov.w	r2, #0
 8008288:	d124      	bne.n	80082d4 <_dtoa_r+0x60c>
 800828a:	4b1b      	ldr	r3, [pc, #108]	; (80082f8 <_dtoa_r+0x630>)
 800828c:	4650      	mov	r0, sl
 800828e:	4659      	mov	r1, fp
 8008290:	f7f8 f804 	bl	800029c <__adddf3>
 8008294:	4602      	mov	r2, r0
 8008296:	460b      	mov	r3, r1
 8008298:	4640      	mov	r0, r8
 800829a:	4649      	mov	r1, r9
 800829c:	f7f8 fc44 	bl	8000b28 <__aeabi_dcmpgt>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	d173      	bne.n	800838c <_dtoa_r+0x6c4>
 80082a4:	4652      	mov	r2, sl
 80082a6:	465b      	mov	r3, fp
 80082a8:	4913      	ldr	r1, [pc, #76]	; (80082f8 <_dtoa_r+0x630>)
 80082aa:	2000      	movs	r0, #0
 80082ac:	f7f7 fff4 	bl	8000298 <__aeabi_dsub>
 80082b0:	4602      	mov	r2, r0
 80082b2:	460b      	mov	r3, r1
 80082b4:	4640      	mov	r0, r8
 80082b6:	4649      	mov	r1, r9
 80082b8:	f7f8 fc18 	bl	8000aec <__aeabi_dcmplt>
 80082bc:	2800      	cmp	r0, #0
 80082be:	f43f af35 	beq.w	800812c <_dtoa_r+0x464>
 80082c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80082c4:	1e6b      	subs	r3, r5, #1
 80082c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80082c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80082cc:	2b30      	cmp	r3, #48	; 0x30
 80082ce:	d0f8      	beq.n	80082c2 <_dtoa_r+0x5fa>
 80082d0:	9700      	str	r7, [sp, #0]
 80082d2:	e049      	b.n	8008368 <_dtoa_r+0x6a0>
 80082d4:	4b05      	ldr	r3, [pc, #20]	; (80082ec <_dtoa_r+0x624>)
 80082d6:	f7f8 f997 	bl	8000608 <__aeabi_dmul>
 80082da:	4680      	mov	r8, r0
 80082dc:	4689      	mov	r9, r1
 80082de:	e7bd      	b.n	800825c <_dtoa_r+0x594>
 80082e0:	0800a250 	.word	0x0800a250
 80082e4:	0800a228 	.word	0x0800a228
 80082e8:	3ff00000 	.word	0x3ff00000
 80082ec:	40240000 	.word	0x40240000
 80082f0:	401c0000 	.word	0x401c0000
 80082f4:	40140000 	.word	0x40140000
 80082f8:	3fe00000 	.word	0x3fe00000
 80082fc:	9d01      	ldr	r5, [sp, #4]
 80082fe:	4656      	mov	r6, sl
 8008300:	465f      	mov	r7, fp
 8008302:	4642      	mov	r2, r8
 8008304:	464b      	mov	r3, r9
 8008306:	4630      	mov	r0, r6
 8008308:	4639      	mov	r1, r7
 800830a:	f7f8 faa7 	bl	800085c <__aeabi_ddiv>
 800830e:	f7f8 fc2b 	bl	8000b68 <__aeabi_d2iz>
 8008312:	4682      	mov	sl, r0
 8008314:	f7f8 f90e 	bl	8000534 <__aeabi_i2d>
 8008318:	4642      	mov	r2, r8
 800831a:	464b      	mov	r3, r9
 800831c:	f7f8 f974 	bl	8000608 <__aeabi_dmul>
 8008320:	4602      	mov	r2, r0
 8008322:	460b      	mov	r3, r1
 8008324:	4630      	mov	r0, r6
 8008326:	4639      	mov	r1, r7
 8008328:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800832c:	f7f7 ffb4 	bl	8000298 <__aeabi_dsub>
 8008330:	f805 6b01 	strb.w	r6, [r5], #1
 8008334:	9e01      	ldr	r6, [sp, #4]
 8008336:	9f03      	ldr	r7, [sp, #12]
 8008338:	1bae      	subs	r6, r5, r6
 800833a:	42b7      	cmp	r7, r6
 800833c:	4602      	mov	r2, r0
 800833e:	460b      	mov	r3, r1
 8008340:	d135      	bne.n	80083ae <_dtoa_r+0x6e6>
 8008342:	f7f7 ffab 	bl	800029c <__adddf3>
 8008346:	4642      	mov	r2, r8
 8008348:	464b      	mov	r3, r9
 800834a:	4606      	mov	r6, r0
 800834c:	460f      	mov	r7, r1
 800834e:	f7f8 fbeb 	bl	8000b28 <__aeabi_dcmpgt>
 8008352:	b9d0      	cbnz	r0, 800838a <_dtoa_r+0x6c2>
 8008354:	4642      	mov	r2, r8
 8008356:	464b      	mov	r3, r9
 8008358:	4630      	mov	r0, r6
 800835a:	4639      	mov	r1, r7
 800835c:	f7f8 fbbc 	bl	8000ad8 <__aeabi_dcmpeq>
 8008360:	b110      	cbz	r0, 8008368 <_dtoa_r+0x6a0>
 8008362:	f01a 0f01 	tst.w	sl, #1
 8008366:	d110      	bne.n	800838a <_dtoa_r+0x6c2>
 8008368:	4620      	mov	r0, r4
 800836a:	ee18 1a10 	vmov	r1, s16
 800836e:	f000 faf3 	bl	8008958 <_Bfree>
 8008372:	2300      	movs	r3, #0
 8008374:	9800      	ldr	r0, [sp, #0]
 8008376:	702b      	strb	r3, [r5, #0]
 8008378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800837a:	3001      	adds	r0, #1
 800837c:	6018      	str	r0, [r3, #0]
 800837e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008380:	2b00      	cmp	r3, #0
 8008382:	f43f acf1 	beq.w	8007d68 <_dtoa_r+0xa0>
 8008386:	601d      	str	r5, [r3, #0]
 8008388:	e4ee      	b.n	8007d68 <_dtoa_r+0xa0>
 800838a:	9f00      	ldr	r7, [sp, #0]
 800838c:	462b      	mov	r3, r5
 800838e:	461d      	mov	r5, r3
 8008390:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008394:	2a39      	cmp	r2, #57	; 0x39
 8008396:	d106      	bne.n	80083a6 <_dtoa_r+0x6de>
 8008398:	9a01      	ldr	r2, [sp, #4]
 800839a:	429a      	cmp	r2, r3
 800839c:	d1f7      	bne.n	800838e <_dtoa_r+0x6c6>
 800839e:	9901      	ldr	r1, [sp, #4]
 80083a0:	2230      	movs	r2, #48	; 0x30
 80083a2:	3701      	adds	r7, #1
 80083a4:	700a      	strb	r2, [r1, #0]
 80083a6:	781a      	ldrb	r2, [r3, #0]
 80083a8:	3201      	adds	r2, #1
 80083aa:	701a      	strb	r2, [r3, #0]
 80083ac:	e790      	b.n	80082d0 <_dtoa_r+0x608>
 80083ae:	4ba6      	ldr	r3, [pc, #664]	; (8008648 <_dtoa_r+0x980>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	f7f8 f929 	bl	8000608 <__aeabi_dmul>
 80083b6:	2200      	movs	r2, #0
 80083b8:	2300      	movs	r3, #0
 80083ba:	4606      	mov	r6, r0
 80083bc:	460f      	mov	r7, r1
 80083be:	f7f8 fb8b 	bl	8000ad8 <__aeabi_dcmpeq>
 80083c2:	2800      	cmp	r0, #0
 80083c4:	d09d      	beq.n	8008302 <_dtoa_r+0x63a>
 80083c6:	e7cf      	b.n	8008368 <_dtoa_r+0x6a0>
 80083c8:	9a08      	ldr	r2, [sp, #32]
 80083ca:	2a00      	cmp	r2, #0
 80083cc:	f000 80d7 	beq.w	800857e <_dtoa_r+0x8b6>
 80083d0:	9a06      	ldr	r2, [sp, #24]
 80083d2:	2a01      	cmp	r2, #1
 80083d4:	f300 80ba 	bgt.w	800854c <_dtoa_r+0x884>
 80083d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083da:	2a00      	cmp	r2, #0
 80083dc:	f000 80b2 	beq.w	8008544 <_dtoa_r+0x87c>
 80083e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80083e4:	9e07      	ldr	r6, [sp, #28]
 80083e6:	9d04      	ldr	r5, [sp, #16]
 80083e8:	9a04      	ldr	r2, [sp, #16]
 80083ea:	441a      	add	r2, r3
 80083ec:	9204      	str	r2, [sp, #16]
 80083ee:	9a05      	ldr	r2, [sp, #20]
 80083f0:	2101      	movs	r1, #1
 80083f2:	441a      	add	r2, r3
 80083f4:	4620      	mov	r0, r4
 80083f6:	9205      	str	r2, [sp, #20]
 80083f8:	f000 fb66 	bl	8008ac8 <__i2b>
 80083fc:	4607      	mov	r7, r0
 80083fe:	2d00      	cmp	r5, #0
 8008400:	dd0c      	ble.n	800841c <_dtoa_r+0x754>
 8008402:	9b05      	ldr	r3, [sp, #20]
 8008404:	2b00      	cmp	r3, #0
 8008406:	dd09      	ble.n	800841c <_dtoa_r+0x754>
 8008408:	42ab      	cmp	r3, r5
 800840a:	9a04      	ldr	r2, [sp, #16]
 800840c:	bfa8      	it	ge
 800840e:	462b      	movge	r3, r5
 8008410:	1ad2      	subs	r2, r2, r3
 8008412:	9204      	str	r2, [sp, #16]
 8008414:	9a05      	ldr	r2, [sp, #20]
 8008416:	1aed      	subs	r5, r5, r3
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	9305      	str	r3, [sp, #20]
 800841c:	9b07      	ldr	r3, [sp, #28]
 800841e:	b31b      	cbz	r3, 8008468 <_dtoa_r+0x7a0>
 8008420:	9b08      	ldr	r3, [sp, #32]
 8008422:	2b00      	cmp	r3, #0
 8008424:	f000 80af 	beq.w	8008586 <_dtoa_r+0x8be>
 8008428:	2e00      	cmp	r6, #0
 800842a:	dd13      	ble.n	8008454 <_dtoa_r+0x78c>
 800842c:	4639      	mov	r1, r7
 800842e:	4632      	mov	r2, r6
 8008430:	4620      	mov	r0, r4
 8008432:	f000 fc09 	bl	8008c48 <__pow5mult>
 8008436:	ee18 2a10 	vmov	r2, s16
 800843a:	4601      	mov	r1, r0
 800843c:	4607      	mov	r7, r0
 800843e:	4620      	mov	r0, r4
 8008440:	f000 fb58 	bl	8008af4 <__multiply>
 8008444:	ee18 1a10 	vmov	r1, s16
 8008448:	4680      	mov	r8, r0
 800844a:	4620      	mov	r0, r4
 800844c:	f000 fa84 	bl	8008958 <_Bfree>
 8008450:	ee08 8a10 	vmov	s16, r8
 8008454:	9b07      	ldr	r3, [sp, #28]
 8008456:	1b9a      	subs	r2, r3, r6
 8008458:	d006      	beq.n	8008468 <_dtoa_r+0x7a0>
 800845a:	ee18 1a10 	vmov	r1, s16
 800845e:	4620      	mov	r0, r4
 8008460:	f000 fbf2 	bl	8008c48 <__pow5mult>
 8008464:	ee08 0a10 	vmov	s16, r0
 8008468:	2101      	movs	r1, #1
 800846a:	4620      	mov	r0, r4
 800846c:	f000 fb2c 	bl	8008ac8 <__i2b>
 8008470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008472:	2b00      	cmp	r3, #0
 8008474:	4606      	mov	r6, r0
 8008476:	f340 8088 	ble.w	800858a <_dtoa_r+0x8c2>
 800847a:	461a      	mov	r2, r3
 800847c:	4601      	mov	r1, r0
 800847e:	4620      	mov	r0, r4
 8008480:	f000 fbe2 	bl	8008c48 <__pow5mult>
 8008484:	9b06      	ldr	r3, [sp, #24]
 8008486:	2b01      	cmp	r3, #1
 8008488:	4606      	mov	r6, r0
 800848a:	f340 8081 	ble.w	8008590 <_dtoa_r+0x8c8>
 800848e:	f04f 0800 	mov.w	r8, #0
 8008492:	6933      	ldr	r3, [r6, #16]
 8008494:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008498:	6918      	ldr	r0, [r3, #16]
 800849a:	f000 fac5 	bl	8008a28 <__hi0bits>
 800849e:	f1c0 0020 	rsb	r0, r0, #32
 80084a2:	9b05      	ldr	r3, [sp, #20]
 80084a4:	4418      	add	r0, r3
 80084a6:	f010 001f 	ands.w	r0, r0, #31
 80084aa:	f000 8092 	beq.w	80085d2 <_dtoa_r+0x90a>
 80084ae:	f1c0 0320 	rsb	r3, r0, #32
 80084b2:	2b04      	cmp	r3, #4
 80084b4:	f340 808a 	ble.w	80085cc <_dtoa_r+0x904>
 80084b8:	f1c0 001c 	rsb	r0, r0, #28
 80084bc:	9b04      	ldr	r3, [sp, #16]
 80084be:	4403      	add	r3, r0
 80084c0:	9304      	str	r3, [sp, #16]
 80084c2:	9b05      	ldr	r3, [sp, #20]
 80084c4:	4403      	add	r3, r0
 80084c6:	4405      	add	r5, r0
 80084c8:	9305      	str	r3, [sp, #20]
 80084ca:	9b04      	ldr	r3, [sp, #16]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	dd07      	ble.n	80084e0 <_dtoa_r+0x818>
 80084d0:	ee18 1a10 	vmov	r1, s16
 80084d4:	461a      	mov	r2, r3
 80084d6:	4620      	mov	r0, r4
 80084d8:	f000 fc10 	bl	8008cfc <__lshift>
 80084dc:	ee08 0a10 	vmov	s16, r0
 80084e0:	9b05      	ldr	r3, [sp, #20]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	dd05      	ble.n	80084f2 <_dtoa_r+0x82a>
 80084e6:	4631      	mov	r1, r6
 80084e8:	461a      	mov	r2, r3
 80084ea:	4620      	mov	r0, r4
 80084ec:	f000 fc06 	bl	8008cfc <__lshift>
 80084f0:	4606      	mov	r6, r0
 80084f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d06e      	beq.n	80085d6 <_dtoa_r+0x90e>
 80084f8:	ee18 0a10 	vmov	r0, s16
 80084fc:	4631      	mov	r1, r6
 80084fe:	f000 fc6d 	bl	8008ddc <__mcmp>
 8008502:	2800      	cmp	r0, #0
 8008504:	da67      	bge.n	80085d6 <_dtoa_r+0x90e>
 8008506:	9b00      	ldr	r3, [sp, #0]
 8008508:	3b01      	subs	r3, #1
 800850a:	ee18 1a10 	vmov	r1, s16
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	220a      	movs	r2, #10
 8008512:	2300      	movs	r3, #0
 8008514:	4620      	mov	r0, r4
 8008516:	f000 fa41 	bl	800899c <__multadd>
 800851a:	9b08      	ldr	r3, [sp, #32]
 800851c:	ee08 0a10 	vmov	s16, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 81b1 	beq.w	8008888 <_dtoa_r+0xbc0>
 8008526:	2300      	movs	r3, #0
 8008528:	4639      	mov	r1, r7
 800852a:	220a      	movs	r2, #10
 800852c:	4620      	mov	r0, r4
 800852e:	f000 fa35 	bl	800899c <__multadd>
 8008532:	9b02      	ldr	r3, [sp, #8]
 8008534:	2b00      	cmp	r3, #0
 8008536:	4607      	mov	r7, r0
 8008538:	f300 808e 	bgt.w	8008658 <_dtoa_r+0x990>
 800853c:	9b06      	ldr	r3, [sp, #24]
 800853e:	2b02      	cmp	r3, #2
 8008540:	dc51      	bgt.n	80085e6 <_dtoa_r+0x91e>
 8008542:	e089      	b.n	8008658 <_dtoa_r+0x990>
 8008544:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008546:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800854a:	e74b      	b.n	80083e4 <_dtoa_r+0x71c>
 800854c:	9b03      	ldr	r3, [sp, #12]
 800854e:	1e5e      	subs	r6, r3, #1
 8008550:	9b07      	ldr	r3, [sp, #28]
 8008552:	42b3      	cmp	r3, r6
 8008554:	bfbf      	itttt	lt
 8008556:	9b07      	ldrlt	r3, [sp, #28]
 8008558:	9607      	strlt	r6, [sp, #28]
 800855a:	1af2      	sublt	r2, r6, r3
 800855c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800855e:	bfb6      	itet	lt
 8008560:	189b      	addlt	r3, r3, r2
 8008562:	1b9e      	subge	r6, r3, r6
 8008564:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008566:	9b03      	ldr	r3, [sp, #12]
 8008568:	bfb8      	it	lt
 800856a:	2600      	movlt	r6, #0
 800856c:	2b00      	cmp	r3, #0
 800856e:	bfb7      	itett	lt
 8008570:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008574:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008578:	1a9d      	sublt	r5, r3, r2
 800857a:	2300      	movlt	r3, #0
 800857c:	e734      	b.n	80083e8 <_dtoa_r+0x720>
 800857e:	9e07      	ldr	r6, [sp, #28]
 8008580:	9d04      	ldr	r5, [sp, #16]
 8008582:	9f08      	ldr	r7, [sp, #32]
 8008584:	e73b      	b.n	80083fe <_dtoa_r+0x736>
 8008586:	9a07      	ldr	r2, [sp, #28]
 8008588:	e767      	b.n	800845a <_dtoa_r+0x792>
 800858a:	9b06      	ldr	r3, [sp, #24]
 800858c:	2b01      	cmp	r3, #1
 800858e:	dc18      	bgt.n	80085c2 <_dtoa_r+0x8fa>
 8008590:	f1ba 0f00 	cmp.w	sl, #0
 8008594:	d115      	bne.n	80085c2 <_dtoa_r+0x8fa>
 8008596:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800859a:	b993      	cbnz	r3, 80085c2 <_dtoa_r+0x8fa>
 800859c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80085a0:	0d1b      	lsrs	r3, r3, #20
 80085a2:	051b      	lsls	r3, r3, #20
 80085a4:	b183      	cbz	r3, 80085c8 <_dtoa_r+0x900>
 80085a6:	9b04      	ldr	r3, [sp, #16]
 80085a8:	3301      	adds	r3, #1
 80085aa:	9304      	str	r3, [sp, #16]
 80085ac:	9b05      	ldr	r3, [sp, #20]
 80085ae:	3301      	adds	r3, #1
 80085b0:	9305      	str	r3, [sp, #20]
 80085b2:	f04f 0801 	mov.w	r8, #1
 80085b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f47f af6a 	bne.w	8008492 <_dtoa_r+0x7ca>
 80085be:	2001      	movs	r0, #1
 80085c0:	e76f      	b.n	80084a2 <_dtoa_r+0x7da>
 80085c2:	f04f 0800 	mov.w	r8, #0
 80085c6:	e7f6      	b.n	80085b6 <_dtoa_r+0x8ee>
 80085c8:	4698      	mov	r8, r3
 80085ca:	e7f4      	b.n	80085b6 <_dtoa_r+0x8ee>
 80085cc:	f43f af7d 	beq.w	80084ca <_dtoa_r+0x802>
 80085d0:	4618      	mov	r0, r3
 80085d2:	301c      	adds	r0, #28
 80085d4:	e772      	b.n	80084bc <_dtoa_r+0x7f4>
 80085d6:	9b03      	ldr	r3, [sp, #12]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	dc37      	bgt.n	800864c <_dtoa_r+0x984>
 80085dc:	9b06      	ldr	r3, [sp, #24]
 80085de:	2b02      	cmp	r3, #2
 80085e0:	dd34      	ble.n	800864c <_dtoa_r+0x984>
 80085e2:	9b03      	ldr	r3, [sp, #12]
 80085e4:	9302      	str	r3, [sp, #8]
 80085e6:	9b02      	ldr	r3, [sp, #8]
 80085e8:	b96b      	cbnz	r3, 8008606 <_dtoa_r+0x93e>
 80085ea:	4631      	mov	r1, r6
 80085ec:	2205      	movs	r2, #5
 80085ee:	4620      	mov	r0, r4
 80085f0:	f000 f9d4 	bl	800899c <__multadd>
 80085f4:	4601      	mov	r1, r0
 80085f6:	4606      	mov	r6, r0
 80085f8:	ee18 0a10 	vmov	r0, s16
 80085fc:	f000 fbee 	bl	8008ddc <__mcmp>
 8008600:	2800      	cmp	r0, #0
 8008602:	f73f adbb 	bgt.w	800817c <_dtoa_r+0x4b4>
 8008606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008608:	9d01      	ldr	r5, [sp, #4]
 800860a:	43db      	mvns	r3, r3
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	f04f 0800 	mov.w	r8, #0
 8008612:	4631      	mov	r1, r6
 8008614:	4620      	mov	r0, r4
 8008616:	f000 f99f 	bl	8008958 <_Bfree>
 800861a:	2f00      	cmp	r7, #0
 800861c:	f43f aea4 	beq.w	8008368 <_dtoa_r+0x6a0>
 8008620:	f1b8 0f00 	cmp.w	r8, #0
 8008624:	d005      	beq.n	8008632 <_dtoa_r+0x96a>
 8008626:	45b8      	cmp	r8, r7
 8008628:	d003      	beq.n	8008632 <_dtoa_r+0x96a>
 800862a:	4641      	mov	r1, r8
 800862c:	4620      	mov	r0, r4
 800862e:	f000 f993 	bl	8008958 <_Bfree>
 8008632:	4639      	mov	r1, r7
 8008634:	4620      	mov	r0, r4
 8008636:	f000 f98f 	bl	8008958 <_Bfree>
 800863a:	e695      	b.n	8008368 <_dtoa_r+0x6a0>
 800863c:	2600      	movs	r6, #0
 800863e:	4637      	mov	r7, r6
 8008640:	e7e1      	b.n	8008606 <_dtoa_r+0x93e>
 8008642:	9700      	str	r7, [sp, #0]
 8008644:	4637      	mov	r7, r6
 8008646:	e599      	b.n	800817c <_dtoa_r+0x4b4>
 8008648:	40240000 	.word	0x40240000
 800864c:	9b08      	ldr	r3, [sp, #32]
 800864e:	2b00      	cmp	r3, #0
 8008650:	f000 80ca 	beq.w	80087e8 <_dtoa_r+0xb20>
 8008654:	9b03      	ldr	r3, [sp, #12]
 8008656:	9302      	str	r3, [sp, #8]
 8008658:	2d00      	cmp	r5, #0
 800865a:	dd05      	ble.n	8008668 <_dtoa_r+0x9a0>
 800865c:	4639      	mov	r1, r7
 800865e:	462a      	mov	r2, r5
 8008660:	4620      	mov	r0, r4
 8008662:	f000 fb4b 	bl	8008cfc <__lshift>
 8008666:	4607      	mov	r7, r0
 8008668:	f1b8 0f00 	cmp.w	r8, #0
 800866c:	d05b      	beq.n	8008726 <_dtoa_r+0xa5e>
 800866e:	6879      	ldr	r1, [r7, #4]
 8008670:	4620      	mov	r0, r4
 8008672:	f000 f931 	bl	80088d8 <_Balloc>
 8008676:	4605      	mov	r5, r0
 8008678:	b928      	cbnz	r0, 8008686 <_dtoa_r+0x9be>
 800867a:	4b87      	ldr	r3, [pc, #540]	; (8008898 <_dtoa_r+0xbd0>)
 800867c:	4602      	mov	r2, r0
 800867e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008682:	f7ff bb3b 	b.w	8007cfc <_dtoa_r+0x34>
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	3202      	adds	r2, #2
 800868a:	0092      	lsls	r2, r2, #2
 800868c:	f107 010c 	add.w	r1, r7, #12
 8008690:	300c      	adds	r0, #12
 8008692:	f000 f913 	bl	80088bc <memcpy>
 8008696:	2201      	movs	r2, #1
 8008698:	4629      	mov	r1, r5
 800869a:	4620      	mov	r0, r4
 800869c:	f000 fb2e 	bl	8008cfc <__lshift>
 80086a0:	9b01      	ldr	r3, [sp, #4]
 80086a2:	f103 0901 	add.w	r9, r3, #1
 80086a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80086aa:	4413      	add	r3, r2
 80086ac:	9305      	str	r3, [sp, #20]
 80086ae:	f00a 0301 	and.w	r3, sl, #1
 80086b2:	46b8      	mov	r8, r7
 80086b4:	9304      	str	r3, [sp, #16]
 80086b6:	4607      	mov	r7, r0
 80086b8:	4631      	mov	r1, r6
 80086ba:	ee18 0a10 	vmov	r0, s16
 80086be:	f7ff fa77 	bl	8007bb0 <quorem>
 80086c2:	4641      	mov	r1, r8
 80086c4:	9002      	str	r0, [sp, #8]
 80086c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80086ca:	ee18 0a10 	vmov	r0, s16
 80086ce:	f000 fb85 	bl	8008ddc <__mcmp>
 80086d2:	463a      	mov	r2, r7
 80086d4:	9003      	str	r0, [sp, #12]
 80086d6:	4631      	mov	r1, r6
 80086d8:	4620      	mov	r0, r4
 80086da:	f000 fb9b 	bl	8008e14 <__mdiff>
 80086de:	68c2      	ldr	r2, [r0, #12]
 80086e0:	f109 3bff 	add.w	fp, r9, #4294967295
 80086e4:	4605      	mov	r5, r0
 80086e6:	bb02      	cbnz	r2, 800872a <_dtoa_r+0xa62>
 80086e8:	4601      	mov	r1, r0
 80086ea:	ee18 0a10 	vmov	r0, s16
 80086ee:	f000 fb75 	bl	8008ddc <__mcmp>
 80086f2:	4602      	mov	r2, r0
 80086f4:	4629      	mov	r1, r5
 80086f6:	4620      	mov	r0, r4
 80086f8:	9207      	str	r2, [sp, #28]
 80086fa:	f000 f92d 	bl	8008958 <_Bfree>
 80086fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008702:	ea43 0102 	orr.w	r1, r3, r2
 8008706:	9b04      	ldr	r3, [sp, #16]
 8008708:	430b      	orrs	r3, r1
 800870a:	464d      	mov	r5, r9
 800870c:	d10f      	bne.n	800872e <_dtoa_r+0xa66>
 800870e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008712:	d02a      	beq.n	800876a <_dtoa_r+0xaa2>
 8008714:	9b03      	ldr	r3, [sp, #12]
 8008716:	2b00      	cmp	r3, #0
 8008718:	dd02      	ble.n	8008720 <_dtoa_r+0xa58>
 800871a:	9b02      	ldr	r3, [sp, #8]
 800871c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008720:	f88b a000 	strb.w	sl, [fp]
 8008724:	e775      	b.n	8008612 <_dtoa_r+0x94a>
 8008726:	4638      	mov	r0, r7
 8008728:	e7ba      	b.n	80086a0 <_dtoa_r+0x9d8>
 800872a:	2201      	movs	r2, #1
 800872c:	e7e2      	b.n	80086f4 <_dtoa_r+0xa2c>
 800872e:	9b03      	ldr	r3, [sp, #12]
 8008730:	2b00      	cmp	r3, #0
 8008732:	db04      	blt.n	800873e <_dtoa_r+0xa76>
 8008734:	9906      	ldr	r1, [sp, #24]
 8008736:	430b      	orrs	r3, r1
 8008738:	9904      	ldr	r1, [sp, #16]
 800873a:	430b      	orrs	r3, r1
 800873c:	d122      	bne.n	8008784 <_dtoa_r+0xabc>
 800873e:	2a00      	cmp	r2, #0
 8008740:	ddee      	ble.n	8008720 <_dtoa_r+0xa58>
 8008742:	ee18 1a10 	vmov	r1, s16
 8008746:	2201      	movs	r2, #1
 8008748:	4620      	mov	r0, r4
 800874a:	f000 fad7 	bl	8008cfc <__lshift>
 800874e:	4631      	mov	r1, r6
 8008750:	ee08 0a10 	vmov	s16, r0
 8008754:	f000 fb42 	bl	8008ddc <__mcmp>
 8008758:	2800      	cmp	r0, #0
 800875a:	dc03      	bgt.n	8008764 <_dtoa_r+0xa9c>
 800875c:	d1e0      	bne.n	8008720 <_dtoa_r+0xa58>
 800875e:	f01a 0f01 	tst.w	sl, #1
 8008762:	d0dd      	beq.n	8008720 <_dtoa_r+0xa58>
 8008764:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008768:	d1d7      	bne.n	800871a <_dtoa_r+0xa52>
 800876a:	2339      	movs	r3, #57	; 0x39
 800876c:	f88b 3000 	strb.w	r3, [fp]
 8008770:	462b      	mov	r3, r5
 8008772:	461d      	mov	r5, r3
 8008774:	3b01      	subs	r3, #1
 8008776:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800877a:	2a39      	cmp	r2, #57	; 0x39
 800877c:	d071      	beq.n	8008862 <_dtoa_r+0xb9a>
 800877e:	3201      	adds	r2, #1
 8008780:	701a      	strb	r2, [r3, #0]
 8008782:	e746      	b.n	8008612 <_dtoa_r+0x94a>
 8008784:	2a00      	cmp	r2, #0
 8008786:	dd07      	ble.n	8008798 <_dtoa_r+0xad0>
 8008788:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800878c:	d0ed      	beq.n	800876a <_dtoa_r+0xaa2>
 800878e:	f10a 0301 	add.w	r3, sl, #1
 8008792:	f88b 3000 	strb.w	r3, [fp]
 8008796:	e73c      	b.n	8008612 <_dtoa_r+0x94a>
 8008798:	9b05      	ldr	r3, [sp, #20]
 800879a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800879e:	4599      	cmp	r9, r3
 80087a0:	d047      	beq.n	8008832 <_dtoa_r+0xb6a>
 80087a2:	ee18 1a10 	vmov	r1, s16
 80087a6:	2300      	movs	r3, #0
 80087a8:	220a      	movs	r2, #10
 80087aa:	4620      	mov	r0, r4
 80087ac:	f000 f8f6 	bl	800899c <__multadd>
 80087b0:	45b8      	cmp	r8, r7
 80087b2:	ee08 0a10 	vmov	s16, r0
 80087b6:	f04f 0300 	mov.w	r3, #0
 80087ba:	f04f 020a 	mov.w	r2, #10
 80087be:	4641      	mov	r1, r8
 80087c0:	4620      	mov	r0, r4
 80087c2:	d106      	bne.n	80087d2 <_dtoa_r+0xb0a>
 80087c4:	f000 f8ea 	bl	800899c <__multadd>
 80087c8:	4680      	mov	r8, r0
 80087ca:	4607      	mov	r7, r0
 80087cc:	f109 0901 	add.w	r9, r9, #1
 80087d0:	e772      	b.n	80086b8 <_dtoa_r+0x9f0>
 80087d2:	f000 f8e3 	bl	800899c <__multadd>
 80087d6:	4639      	mov	r1, r7
 80087d8:	4680      	mov	r8, r0
 80087da:	2300      	movs	r3, #0
 80087dc:	220a      	movs	r2, #10
 80087de:	4620      	mov	r0, r4
 80087e0:	f000 f8dc 	bl	800899c <__multadd>
 80087e4:	4607      	mov	r7, r0
 80087e6:	e7f1      	b.n	80087cc <_dtoa_r+0xb04>
 80087e8:	9b03      	ldr	r3, [sp, #12]
 80087ea:	9302      	str	r3, [sp, #8]
 80087ec:	9d01      	ldr	r5, [sp, #4]
 80087ee:	ee18 0a10 	vmov	r0, s16
 80087f2:	4631      	mov	r1, r6
 80087f4:	f7ff f9dc 	bl	8007bb0 <quorem>
 80087f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80087fc:	9b01      	ldr	r3, [sp, #4]
 80087fe:	f805 ab01 	strb.w	sl, [r5], #1
 8008802:	1aea      	subs	r2, r5, r3
 8008804:	9b02      	ldr	r3, [sp, #8]
 8008806:	4293      	cmp	r3, r2
 8008808:	dd09      	ble.n	800881e <_dtoa_r+0xb56>
 800880a:	ee18 1a10 	vmov	r1, s16
 800880e:	2300      	movs	r3, #0
 8008810:	220a      	movs	r2, #10
 8008812:	4620      	mov	r0, r4
 8008814:	f000 f8c2 	bl	800899c <__multadd>
 8008818:	ee08 0a10 	vmov	s16, r0
 800881c:	e7e7      	b.n	80087ee <_dtoa_r+0xb26>
 800881e:	9b02      	ldr	r3, [sp, #8]
 8008820:	2b00      	cmp	r3, #0
 8008822:	bfc8      	it	gt
 8008824:	461d      	movgt	r5, r3
 8008826:	9b01      	ldr	r3, [sp, #4]
 8008828:	bfd8      	it	le
 800882a:	2501      	movle	r5, #1
 800882c:	441d      	add	r5, r3
 800882e:	f04f 0800 	mov.w	r8, #0
 8008832:	ee18 1a10 	vmov	r1, s16
 8008836:	2201      	movs	r2, #1
 8008838:	4620      	mov	r0, r4
 800883a:	f000 fa5f 	bl	8008cfc <__lshift>
 800883e:	4631      	mov	r1, r6
 8008840:	ee08 0a10 	vmov	s16, r0
 8008844:	f000 faca 	bl	8008ddc <__mcmp>
 8008848:	2800      	cmp	r0, #0
 800884a:	dc91      	bgt.n	8008770 <_dtoa_r+0xaa8>
 800884c:	d102      	bne.n	8008854 <_dtoa_r+0xb8c>
 800884e:	f01a 0f01 	tst.w	sl, #1
 8008852:	d18d      	bne.n	8008770 <_dtoa_r+0xaa8>
 8008854:	462b      	mov	r3, r5
 8008856:	461d      	mov	r5, r3
 8008858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800885c:	2a30      	cmp	r2, #48	; 0x30
 800885e:	d0fa      	beq.n	8008856 <_dtoa_r+0xb8e>
 8008860:	e6d7      	b.n	8008612 <_dtoa_r+0x94a>
 8008862:	9a01      	ldr	r2, [sp, #4]
 8008864:	429a      	cmp	r2, r3
 8008866:	d184      	bne.n	8008772 <_dtoa_r+0xaaa>
 8008868:	9b00      	ldr	r3, [sp, #0]
 800886a:	3301      	adds	r3, #1
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	2331      	movs	r3, #49	; 0x31
 8008870:	7013      	strb	r3, [r2, #0]
 8008872:	e6ce      	b.n	8008612 <_dtoa_r+0x94a>
 8008874:	4b09      	ldr	r3, [pc, #36]	; (800889c <_dtoa_r+0xbd4>)
 8008876:	f7ff ba95 	b.w	8007da4 <_dtoa_r+0xdc>
 800887a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800887c:	2b00      	cmp	r3, #0
 800887e:	f47f aa6e 	bne.w	8007d5e <_dtoa_r+0x96>
 8008882:	4b07      	ldr	r3, [pc, #28]	; (80088a0 <_dtoa_r+0xbd8>)
 8008884:	f7ff ba8e 	b.w	8007da4 <_dtoa_r+0xdc>
 8008888:	9b02      	ldr	r3, [sp, #8]
 800888a:	2b00      	cmp	r3, #0
 800888c:	dcae      	bgt.n	80087ec <_dtoa_r+0xb24>
 800888e:	9b06      	ldr	r3, [sp, #24]
 8008890:	2b02      	cmp	r3, #2
 8008892:	f73f aea8 	bgt.w	80085e6 <_dtoa_r+0x91e>
 8008896:	e7a9      	b.n	80087ec <_dtoa_r+0xb24>
 8008898:	0800a1bb 	.word	0x0800a1bb
 800889c:	0800a118 	.word	0x0800a118
 80088a0:	0800a13c 	.word	0x0800a13c

080088a4 <_localeconv_r>:
 80088a4:	4800      	ldr	r0, [pc, #0]	; (80088a8 <_localeconv_r+0x4>)
 80088a6:	4770      	bx	lr
 80088a8:	20000170 	.word	0x20000170

080088ac <malloc>:
 80088ac:	4b02      	ldr	r3, [pc, #8]	; (80088b8 <malloc+0xc>)
 80088ae:	4601      	mov	r1, r0
 80088b0:	6818      	ldr	r0, [r3, #0]
 80088b2:	f000 bc17 	b.w	80090e4 <_malloc_r>
 80088b6:	bf00      	nop
 80088b8:	2000001c 	.word	0x2000001c

080088bc <memcpy>:
 80088bc:	440a      	add	r2, r1
 80088be:	4291      	cmp	r1, r2
 80088c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80088c4:	d100      	bne.n	80088c8 <memcpy+0xc>
 80088c6:	4770      	bx	lr
 80088c8:	b510      	push	{r4, lr}
 80088ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088d2:	4291      	cmp	r1, r2
 80088d4:	d1f9      	bne.n	80088ca <memcpy+0xe>
 80088d6:	bd10      	pop	{r4, pc}

080088d8 <_Balloc>:
 80088d8:	b570      	push	{r4, r5, r6, lr}
 80088da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80088dc:	4604      	mov	r4, r0
 80088de:	460d      	mov	r5, r1
 80088e0:	b976      	cbnz	r6, 8008900 <_Balloc+0x28>
 80088e2:	2010      	movs	r0, #16
 80088e4:	f7ff ffe2 	bl	80088ac <malloc>
 80088e8:	4602      	mov	r2, r0
 80088ea:	6260      	str	r0, [r4, #36]	; 0x24
 80088ec:	b920      	cbnz	r0, 80088f8 <_Balloc+0x20>
 80088ee:	4b18      	ldr	r3, [pc, #96]	; (8008950 <_Balloc+0x78>)
 80088f0:	4818      	ldr	r0, [pc, #96]	; (8008954 <_Balloc+0x7c>)
 80088f2:	2166      	movs	r1, #102	; 0x66
 80088f4:	f000 fdd6 	bl	80094a4 <__assert_func>
 80088f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088fc:	6006      	str	r6, [r0, #0]
 80088fe:	60c6      	str	r6, [r0, #12]
 8008900:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008902:	68f3      	ldr	r3, [r6, #12]
 8008904:	b183      	cbz	r3, 8008928 <_Balloc+0x50>
 8008906:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800890e:	b9b8      	cbnz	r0, 8008940 <_Balloc+0x68>
 8008910:	2101      	movs	r1, #1
 8008912:	fa01 f605 	lsl.w	r6, r1, r5
 8008916:	1d72      	adds	r2, r6, #5
 8008918:	0092      	lsls	r2, r2, #2
 800891a:	4620      	mov	r0, r4
 800891c:	f000 fb60 	bl	8008fe0 <_calloc_r>
 8008920:	b160      	cbz	r0, 800893c <_Balloc+0x64>
 8008922:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008926:	e00e      	b.n	8008946 <_Balloc+0x6e>
 8008928:	2221      	movs	r2, #33	; 0x21
 800892a:	2104      	movs	r1, #4
 800892c:	4620      	mov	r0, r4
 800892e:	f000 fb57 	bl	8008fe0 <_calloc_r>
 8008932:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008934:	60f0      	str	r0, [r6, #12]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1e4      	bne.n	8008906 <_Balloc+0x2e>
 800893c:	2000      	movs	r0, #0
 800893e:	bd70      	pop	{r4, r5, r6, pc}
 8008940:	6802      	ldr	r2, [r0, #0]
 8008942:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008946:	2300      	movs	r3, #0
 8008948:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800894c:	e7f7      	b.n	800893e <_Balloc+0x66>
 800894e:	bf00      	nop
 8008950:	0800a149 	.word	0x0800a149
 8008954:	0800a1cc 	.word	0x0800a1cc

08008958 <_Bfree>:
 8008958:	b570      	push	{r4, r5, r6, lr}
 800895a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800895c:	4605      	mov	r5, r0
 800895e:	460c      	mov	r4, r1
 8008960:	b976      	cbnz	r6, 8008980 <_Bfree+0x28>
 8008962:	2010      	movs	r0, #16
 8008964:	f7ff ffa2 	bl	80088ac <malloc>
 8008968:	4602      	mov	r2, r0
 800896a:	6268      	str	r0, [r5, #36]	; 0x24
 800896c:	b920      	cbnz	r0, 8008978 <_Bfree+0x20>
 800896e:	4b09      	ldr	r3, [pc, #36]	; (8008994 <_Bfree+0x3c>)
 8008970:	4809      	ldr	r0, [pc, #36]	; (8008998 <_Bfree+0x40>)
 8008972:	218a      	movs	r1, #138	; 0x8a
 8008974:	f000 fd96 	bl	80094a4 <__assert_func>
 8008978:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800897c:	6006      	str	r6, [r0, #0]
 800897e:	60c6      	str	r6, [r0, #12]
 8008980:	b13c      	cbz	r4, 8008992 <_Bfree+0x3a>
 8008982:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008984:	6862      	ldr	r2, [r4, #4]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800898c:	6021      	str	r1, [r4, #0]
 800898e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008992:	bd70      	pop	{r4, r5, r6, pc}
 8008994:	0800a149 	.word	0x0800a149
 8008998:	0800a1cc 	.word	0x0800a1cc

0800899c <__multadd>:
 800899c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089a0:	690d      	ldr	r5, [r1, #16]
 80089a2:	4607      	mov	r7, r0
 80089a4:	460c      	mov	r4, r1
 80089a6:	461e      	mov	r6, r3
 80089a8:	f101 0c14 	add.w	ip, r1, #20
 80089ac:	2000      	movs	r0, #0
 80089ae:	f8dc 3000 	ldr.w	r3, [ip]
 80089b2:	b299      	uxth	r1, r3
 80089b4:	fb02 6101 	mla	r1, r2, r1, r6
 80089b8:	0c1e      	lsrs	r6, r3, #16
 80089ba:	0c0b      	lsrs	r3, r1, #16
 80089bc:	fb02 3306 	mla	r3, r2, r6, r3
 80089c0:	b289      	uxth	r1, r1
 80089c2:	3001      	adds	r0, #1
 80089c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80089c8:	4285      	cmp	r5, r0
 80089ca:	f84c 1b04 	str.w	r1, [ip], #4
 80089ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80089d2:	dcec      	bgt.n	80089ae <__multadd+0x12>
 80089d4:	b30e      	cbz	r6, 8008a1a <__multadd+0x7e>
 80089d6:	68a3      	ldr	r3, [r4, #8]
 80089d8:	42ab      	cmp	r3, r5
 80089da:	dc19      	bgt.n	8008a10 <__multadd+0x74>
 80089dc:	6861      	ldr	r1, [r4, #4]
 80089de:	4638      	mov	r0, r7
 80089e0:	3101      	adds	r1, #1
 80089e2:	f7ff ff79 	bl	80088d8 <_Balloc>
 80089e6:	4680      	mov	r8, r0
 80089e8:	b928      	cbnz	r0, 80089f6 <__multadd+0x5a>
 80089ea:	4602      	mov	r2, r0
 80089ec:	4b0c      	ldr	r3, [pc, #48]	; (8008a20 <__multadd+0x84>)
 80089ee:	480d      	ldr	r0, [pc, #52]	; (8008a24 <__multadd+0x88>)
 80089f0:	21b5      	movs	r1, #181	; 0xb5
 80089f2:	f000 fd57 	bl	80094a4 <__assert_func>
 80089f6:	6922      	ldr	r2, [r4, #16]
 80089f8:	3202      	adds	r2, #2
 80089fa:	f104 010c 	add.w	r1, r4, #12
 80089fe:	0092      	lsls	r2, r2, #2
 8008a00:	300c      	adds	r0, #12
 8008a02:	f7ff ff5b 	bl	80088bc <memcpy>
 8008a06:	4621      	mov	r1, r4
 8008a08:	4638      	mov	r0, r7
 8008a0a:	f7ff ffa5 	bl	8008958 <_Bfree>
 8008a0e:	4644      	mov	r4, r8
 8008a10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a14:	3501      	adds	r5, #1
 8008a16:	615e      	str	r6, [r3, #20]
 8008a18:	6125      	str	r5, [r4, #16]
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a20:	0800a1bb 	.word	0x0800a1bb
 8008a24:	0800a1cc 	.word	0x0800a1cc

08008a28 <__hi0bits>:
 8008a28:	0c03      	lsrs	r3, r0, #16
 8008a2a:	041b      	lsls	r3, r3, #16
 8008a2c:	b9d3      	cbnz	r3, 8008a64 <__hi0bits+0x3c>
 8008a2e:	0400      	lsls	r0, r0, #16
 8008a30:	2310      	movs	r3, #16
 8008a32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008a36:	bf04      	itt	eq
 8008a38:	0200      	lsleq	r0, r0, #8
 8008a3a:	3308      	addeq	r3, #8
 8008a3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008a40:	bf04      	itt	eq
 8008a42:	0100      	lsleq	r0, r0, #4
 8008a44:	3304      	addeq	r3, #4
 8008a46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008a4a:	bf04      	itt	eq
 8008a4c:	0080      	lsleq	r0, r0, #2
 8008a4e:	3302      	addeq	r3, #2
 8008a50:	2800      	cmp	r0, #0
 8008a52:	db05      	blt.n	8008a60 <__hi0bits+0x38>
 8008a54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008a58:	f103 0301 	add.w	r3, r3, #1
 8008a5c:	bf08      	it	eq
 8008a5e:	2320      	moveq	r3, #32
 8008a60:	4618      	mov	r0, r3
 8008a62:	4770      	bx	lr
 8008a64:	2300      	movs	r3, #0
 8008a66:	e7e4      	b.n	8008a32 <__hi0bits+0xa>

08008a68 <__lo0bits>:
 8008a68:	6803      	ldr	r3, [r0, #0]
 8008a6a:	f013 0207 	ands.w	r2, r3, #7
 8008a6e:	4601      	mov	r1, r0
 8008a70:	d00b      	beq.n	8008a8a <__lo0bits+0x22>
 8008a72:	07da      	lsls	r2, r3, #31
 8008a74:	d423      	bmi.n	8008abe <__lo0bits+0x56>
 8008a76:	0798      	lsls	r0, r3, #30
 8008a78:	bf49      	itett	mi
 8008a7a:	085b      	lsrmi	r3, r3, #1
 8008a7c:	089b      	lsrpl	r3, r3, #2
 8008a7e:	2001      	movmi	r0, #1
 8008a80:	600b      	strmi	r3, [r1, #0]
 8008a82:	bf5c      	itt	pl
 8008a84:	600b      	strpl	r3, [r1, #0]
 8008a86:	2002      	movpl	r0, #2
 8008a88:	4770      	bx	lr
 8008a8a:	b298      	uxth	r0, r3
 8008a8c:	b9a8      	cbnz	r0, 8008aba <__lo0bits+0x52>
 8008a8e:	0c1b      	lsrs	r3, r3, #16
 8008a90:	2010      	movs	r0, #16
 8008a92:	b2da      	uxtb	r2, r3
 8008a94:	b90a      	cbnz	r2, 8008a9a <__lo0bits+0x32>
 8008a96:	3008      	adds	r0, #8
 8008a98:	0a1b      	lsrs	r3, r3, #8
 8008a9a:	071a      	lsls	r2, r3, #28
 8008a9c:	bf04      	itt	eq
 8008a9e:	091b      	lsreq	r3, r3, #4
 8008aa0:	3004      	addeq	r0, #4
 8008aa2:	079a      	lsls	r2, r3, #30
 8008aa4:	bf04      	itt	eq
 8008aa6:	089b      	lsreq	r3, r3, #2
 8008aa8:	3002      	addeq	r0, #2
 8008aaa:	07da      	lsls	r2, r3, #31
 8008aac:	d403      	bmi.n	8008ab6 <__lo0bits+0x4e>
 8008aae:	085b      	lsrs	r3, r3, #1
 8008ab0:	f100 0001 	add.w	r0, r0, #1
 8008ab4:	d005      	beq.n	8008ac2 <__lo0bits+0x5a>
 8008ab6:	600b      	str	r3, [r1, #0]
 8008ab8:	4770      	bx	lr
 8008aba:	4610      	mov	r0, r2
 8008abc:	e7e9      	b.n	8008a92 <__lo0bits+0x2a>
 8008abe:	2000      	movs	r0, #0
 8008ac0:	4770      	bx	lr
 8008ac2:	2020      	movs	r0, #32
 8008ac4:	4770      	bx	lr
	...

08008ac8 <__i2b>:
 8008ac8:	b510      	push	{r4, lr}
 8008aca:	460c      	mov	r4, r1
 8008acc:	2101      	movs	r1, #1
 8008ace:	f7ff ff03 	bl	80088d8 <_Balloc>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	b928      	cbnz	r0, 8008ae2 <__i2b+0x1a>
 8008ad6:	4b05      	ldr	r3, [pc, #20]	; (8008aec <__i2b+0x24>)
 8008ad8:	4805      	ldr	r0, [pc, #20]	; (8008af0 <__i2b+0x28>)
 8008ada:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008ade:	f000 fce1 	bl	80094a4 <__assert_func>
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	6144      	str	r4, [r0, #20]
 8008ae6:	6103      	str	r3, [r0, #16]
 8008ae8:	bd10      	pop	{r4, pc}
 8008aea:	bf00      	nop
 8008aec:	0800a1bb 	.word	0x0800a1bb
 8008af0:	0800a1cc 	.word	0x0800a1cc

08008af4 <__multiply>:
 8008af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af8:	4691      	mov	r9, r2
 8008afa:	690a      	ldr	r2, [r1, #16]
 8008afc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	bfb8      	it	lt
 8008b04:	460b      	movlt	r3, r1
 8008b06:	460c      	mov	r4, r1
 8008b08:	bfbc      	itt	lt
 8008b0a:	464c      	movlt	r4, r9
 8008b0c:	4699      	movlt	r9, r3
 8008b0e:	6927      	ldr	r7, [r4, #16]
 8008b10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008b14:	68a3      	ldr	r3, [r4, #8]
 8008b16:	6861      	ldr	r1, [r4, #4]
 8008b18:	eb07 060a 	add.w	r6, r7, sl
 8008b1c:	42b3      	cmp	r3, r6
 8008b1e:	b085      	sub	sp, #20
 8008b20:	bfb8      	it	lt
 8008b22:	3101      	addlt	r1, #1
 8008b24:	f7ff fed8 	bl	80088d8 <_Balloc>
 8008b28:	b930      	cbnz	r0, 8008b38 <__multiply+0x44>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	4b44      	ldr	r3, [pc, #272]	; (8008c40 <__multiply+0x14c>)
 8008b2e:	4845      	ldr	r0, [pc, #276]	; (8008c44 <__multiply+0x150>)
 8008b30:	f240 115d 	movw	r1, #349	; 0x15d
 8008b34:	f000 fcb6 	bl	80094a4 <__assert_func>
 8008b38:	f100 0514 	add.w	r5, r0, #20
 8008b3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008b40:	462b      	mov	r3, r5
 8008b42:	2200      	movs	r2, #0
 8008b44:	4543      	cmp	r3, r8
 8008b46:	d321      	bcc.n	8008b8c <__multiply+0x98>
 8008b48:	f104 0314 	add.w	r3, r4, #20
 8008b4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008b50:	f109 0314 	add.w	r3, r9, #20
 8008b54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008b58:	9202      	str	r2, [sp, #8]
 8008b5a:	1b3a      	subs	r2, r7, r4
 8008b5c:	3a15      	subs	r2, #21
 8008b5e:	f022 0203 	bic.w	r2, r2, #3
 8008b62:	3204      	adds	r2, #4
 8008b64:	f104 0115 	add.w	r1, r4, #21
 8008b68:	428f      	cmp	r7, r1
 8008b6a:	bf38      	it	cc
 8008b6c:	2204      	movcc	r2, #4
 8008b6e:	9201      	str	r2, [sp, #4]
 8008b70:	9a02      	ldr	r2, [sp, #8]
 8008b72:	9303      	str	r3, [sp, #12]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d80c      	bhi.n	8008b92 <__multiply+0x9e>
 8008b78:	2e00      	cmp	r6, #0
 8008b7a:	dd03      	ble.n	8008b84 <__multiply+0x90>
 8008b7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d05a      	beq.n	8008c3a <__multiply+0x146>
 8008b84:	6106      	str	r6, [r0, #16]
 8008b86:	b005      	add	sp, #20
 8008b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b8c:	f843 2b04 	str.w	r2, [r3], #4
 8008b90:	e7d8      	b.n	8008b44 <__multiply+0x50>
 8008b92:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b96:	f1ba 0f00 	cmp.w	sl, #0
 8008b9a:	d024      	beq.n	8008be6 <__multiply+0xf2>
 8008b9c:	f104 0e14 	add.w	lr, r4, #20
 8008ba0:	46a9      	mov	r9, r5
 8008ba2:	f04f 0c00 	mov.w	ip, #0
 8008ba6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008baa:	f8d9 1000 	ldr.w	r1, [r9]
 8008bae:	fa1f fb82 	uxth.w	fp, r2
 8008bb2:	b289      	uxth	r1, r1
 8008bb4:	fb0a 110b 	mla	r1, sl, fp, r1
 8008bb8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008bbc:	f8d9 2000 	ldr.w	r2, [r9]
 8008bc0:	4461      	add	r1, ip
 8008bc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008bc6:	fb0a c20b 	mla	r2, sl, fp, ip
 8008bca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008bce:	b289      	uxth	r1, r1
 8008bd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008bd4:	4577      	cmp	r7, lr
 8008bd6:	f849 1b04 	str.w	r1, [r9], #4
 8008bda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008bde:	d8e2      	bhi.n	8008ba6 <__multiply+0xb2>
 8008be0:	9a01      	ldr	r2, [sp, #4]
 8008be2:	f845 c002 	str.w	ip, [r5, r2]
 8008be6:	9a03      	ldr	r2, [sp, #12]
 8008be8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008bec:	3304      	adds	r3, #4
 8008bee:	f1b9 0f00 	cmp.w	r9, #0
 8008bf2:	d020      	beq.n	8008c36 <__multiply+0x142>
 8008bf4:	6829      	ldr	r1, [r5, #0]
 8008bf6:	f104 0c14 	add.w	ip, r4, #20
 8008bfa:	46ae      	mov	lr, r5
 8008bfc:	f04f 0a00 	mov.w	sl, #0
 8008c00:	f8bc b000 	ldrh.w	fp, [ip]
 8008c04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008c08:	fb09 220b 	mla	r2, r9, fp, r2
 8008c0c:	4492      	add	sl, r2
 8008c0e:	b289      	uxth	r1, r1
 8008c10:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008c14:	f84e 1b04 	str.w	r1, [lr], #4
 8008c18:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008c1c:	f8be 1000 	ldrh.w	r1, [lr]
 8008c20:	0c12      	lsrs	r2, r2, #16
 8008c22:	fb09 1102 	mla	r1, r9, r2, r1
 8008c26:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008c2a:	4567      	cmp	r7, ip
 8008c2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008c30:	d8e6      	bhi.n	8008c00 <__multiply+0x10c>
 8008c32:	9a01      	ldr	r2, [sp, #4]
 8008c34:	50a9      	str	r1, [r5, r2]
 8008c36:	3504      	adds	r5, #4
 8008c38:	e79a      	b.n	8008b70 <__multiply+0x7c>
 8008c3a:	3e01      	subs	r6, #1
 8008c3c:	e79c      	b.n	8008b78 <__multiply+0x84>
 8008c3e:	bf00      	nop
 8008c40:	0800a1bb 	.word	0x0800a1bb
 8008c44:	0800a1cc 	.word	0x0800a1cc

08008c48 <__pow5mult>:
 8008c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c4c:	4615      	mov	r5, r2
 8008c4e:	f012 0203 	ands.w	r2, r2, #3
 8008c52:	4606      	mov	r6, r0
 8008c54:	460f      	mov	r7, r1
 8008c56:	d007      	beq.n	8008c68 <__pow5mult+0x20>
 8008c58:	4c25      	ldr	r4, [pc, #148]	; (8008cf0 <__pow5mult+0xa8>)
 8008c5a:	3a01      	subs	r2, #1
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c62:	f7ff fe9b 	bl	800899c <__multadd>
 8008c66:	4607      	mov	r7, r0
 8008c68:	10ad      	asrs	r5, r5, #2
 8008c6a:	d03d      	beq.n	8008ce8 <__pow5mult+0xa0>
 8008c6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008c6e:	b97c      	cbnz	r4, 8008c90 <__pow5mult+0x48>
 8008c70:	2010      	movs	r0, #16
 8008c72:	f7ff fe1b 	bl	80088ac <malloc>
 8008c76:	4602      	mov	r2, r0
 8008c78:	6270      	str	r0, [r6, #36]	; 0x24
 8008c7a:	b928      	cbnz	r0, 8008c88 <__pow5mult+0x40>
 8008c7c:	4b1d      	ldr	r3, [pc, #116]	; (8008cf4 <__pow5mult+0xac>)
 8008c7e:	481e      	ldr	r0, [pc, #120]	; (8008cf8 <__pow5mult+0xb0>)
 8008c80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008c84:	f000 fc0e 	bl	80094a4 <__assert_func>
 8008c88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c8c:	6004      	str	r4, [r0, #0]
 8008c8e:	60c4      	str	r4, [r0, #12]
 8008c90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008c94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c98:	b94c      	cbnz	r4, 8008cae <__pow5mult+0x66>
 8008c9a:	f240 2171 	movw	r1, #625	; 0x271
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	f7ff ff12 	bl	8008ac8 <__i2b>
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008caa:	4604      	mov	r4, r0
 8008cac:	6003      	str	r3, [r0, #0]
 8008cae:	f04f 0900 	mov.w	r9, #0
 8008cb2:	07eb      	lsls	r3, r5, #31
 8008cb4:	d50a      	bpl.n	8008ccc <__pow5mult+0x84>
 8008cb6:	4639      	mov	r1, r7
 8008cb8:	4622      	mov	r2, r4
 8008cba:	4630      	mov	r0, r6
 8008cbc:	f7ff ff1a 	bl	8008af4 <__multiply>
 8008cc0:	4639      	mov	r1, r7
 8008cc2:	4680      	mov	r8, r0
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	f7ff fe47 	bl	8008958 <_Bfree>
 8008cca:	4647      	mov	r7, r8
 8008ccc:	106d      	asrs	r5, r5, #1
 8008cce:	d00b      	beq.n	8008ce8 <__pow5mult+0xa0>
 8008cd0:	6820      	ldr	r0, [r4, #0]
 8008cd2:	b938      	cbnz	r0, 8008ce4 <__pow5mult+0x9c>
 8008cd4:	4622      	mov	r2, r4
 8008cd6:	4621      	mov	r1, r4
 8008cd8:	4630      	mov	r0, r6
 8008cda:	f7ff ff0b 	bl	8008af4 <__multiply>
 8008cde:	6020      	str	r0, [r4, #0]
 8008ce0:	f8c0 9000 	str.w	r9, [r0]
 8008ce4:	4604      	mov	r4, r0
 8008ce6:	e7e4      	b.n	8008cb2 <__pow5mult+0x6a>
 8008ce8:	4638      	mov	r0, r7
 8008cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cee:	bf00      	nop
 8008cf0:	0800a318 	.word	0x0800a318
 8008cf4:	0800a149 	.word	0x0800a149
 8008cf8:	0800a1cc 	.word	0x0800a1cc

08008cfc <__lshift>:
 8008cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d00:	460c      	mov	r4, r1
 8008d02:	6849      	ldr	r1, [r1, #4]
 8008d04:	6923      	ldr	r3, [r4, #16]
 8008d06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d0a:	68a3      	ldr	r3, [r4, #8]
 8008d0c:	4607      	mov	r7, r0
 8008d0e:	4691      	mov	r9, r2
 8008d10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d14:	f108 0601 	add.w	r6, r8, #1
 8008d18:	42b3      	cmp	r3, r6
 8008d1a:	db0b      	blt.n	8008d34 <__lshift+0x38>
 8008d1c:	4638      	mov	r0, r7
 8008d1e:	f7ff fddb 	bl	80088d8 <_Balloc>
 8008d22:	4605      	mov	r5, r0
 8008d24:	b948      	cbnz	r0, 8008d3a <__lshift+0x3e>
 8008d26:	4602      	mov	r2, r0
 8008d28:	4b2a      	ldr	r3, [pc, #168]	; (8008dd4 <__lshift+0xd8>)
 8008d2a:	482b      	ldr	r0, [pc, #172]	; (8008dd8 <__lshift+0xdc>)
 8008d2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008d30:	f000 fbb8 	bl	80094a4 <__assert_func>
 8008d34:	3101      	adds	r1, #1
 8008d36:	005b      	lsls	r3, r3, #1
 8008d38:	e7ee      	b.n	8008d18 <__lshift+0x1c>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	f100 0114 	add.w	r1, r0, #20
 8008d40:	f100 0210 	add.w	r2, r0, #16
 8008d44:	4618      	mov	r0, r3
 8008d46:	4553      	cmp	r3, sl
 8008d48:	db37      	blt.n	8008dba <__lshift+0xbe>
 8008d4a:	6920      	ldr	r0, [r4, #16]
 8008d4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d50:	f104 0314 	add.w	r3, r4, #20
 8008d54:	f019 091f 	ands.w	r9, r9, #31
 8008d58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008d60:	d02f      	beq.n	8008dc2 <__lshift+0xc6>
 8008d62:	f1c9 0e20 	rsb	lr, r9, #32
 8008d66:	468a      	mov	sl, r1
 8008d68:	f04f 0c00 	mov.w	ip, #0
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	fa02 f209 	lsl.w	r2, r2, r9
 8008d72:	ea42 020c 	orr.w	r2, r2, ip
 8008d76:	f84a 2b04 	str.w	r2, [sl], #4
 8008d7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d7e:	4298      	cmp	r0, r3
 8008d80:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008d84:	d8f2      	bhi.n	8008d6c <__lshift+0x70>
 8008d86:	1b03      	subs	r3, r0, r4
 8008d88:	3b15      	subs	r3, #21
 8008d8a:	f023 0303 	bic.w	r3, r3, #3
 8008d8e:	3304      	adds	r3, #4
 8008d90:	f104 0215 	add.w	r2, r4, #21
 8008d94:	4290      	cmp	r0, r2
 8008d96:	bf38      	it	cc
 8008d98:	2304      	movcc	r3, #4
 8008d9a:	f841 c003 	str.w	ip, [r1, r3]
 8008d9e:	f1bc 0f00 	cmp.w	ip, #0
 8008da2:	d001      	beq.n	8008da8 <__lshift+0xac>
 8008da4:	f108 0602 	add.w	r6, r8, #2
 8008da8:	3e01      	subs	r6, #1
 8008daa:	4638      	mov	r0, r7
 8008dac:	612e      	str	r6, [r5, #16]
 8008dae:	4621      	mov	r1, r4
 8008db0:	f7ff fdd2 	bl	8008958 <_Bfree>
 8008db4:	4628      	mov	r0, r5
 8008db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dba:	f842 0f04 	str.w	r0, [r2, #4]!
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	e7c1      	b.n	8008d46 <__lshift+0x4a>
 8008dc2:	3904      	subs	r1, #4
 8008dc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dc8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008dcc:	4298      	cmp	r0, r3
 8008dce:	d8f9      	bhi.n	8008dc4 <__lshift+0xc8>
 8008dd0:	e7ea      	b.n	8008da8 <__lshift+0xac>
 8008dd2:	bf00      	nop
 8008dd4:	0800a1bb 	.word	0x0800a1bb
 8008dd8:	0800a1cc 	.word	0x0800a1cc

08008ddc <__mcmp>:
 8008ddc:	b530      	push	{r4, r5, lr}
 8008dde:	6902      	ldr	r2, [r0, #16]
 8008de0:	690c      	ldr	r4, [r1, #16]
 8008de2:	1b12      	subs	r2, r2, r4
 8008de4:	d10e      	bne.n	8008e04 <__mcmp+0x28>
 8008de6:	f100 0314 	add.w	r3, r0, #20
 8008dea:	3114      	adds	r1, #20
 8008dec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008df0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008df4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008df8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008dfc:	42a5      	cmp	r5, r4
 8008dfe:	d003      	beq.n	8008e08 <__mcmp+0x2c>
 8008e00:	d305      	bcc.n	8008e0e <__mcmp+0x32>
 8008e02:	2201      	movs	r2, #1
 8008e04:	4610      	mov	r0, r2
 8008e06:	bd30      	pop	{r4, r5, pc}
 8008e08:	4283      	cmp	r3, r0
 8008e0a:	d3f3      	bcc.n	8008df4 <__mcmp+0x18>
 8008e0c:	e7fa      	b.n	8008e04 <__mcmp+0x28>
 8008e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e12:	e7f7      	b.n	8008e04 <__mcmp+0x28>

08008e14 <__mdiff>:
 8008e14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e18:	460c      	mov	r4, r1
 8008e1a:	4606      	mov	r6, r0
 8008e1c:	4611      	mov	r1, r2
 8008e1e:	4620      	mov	r0, r4
 8008e20:	4690      	mov	r8, r2
 8008e22:	f7ff ffdb 	bl	8008ddc <__mcmp>
 8008e26:	1e05      	subs	r5, r0, #0
 8008e28:	d110      	bne.n	8008e4c <__mdiff+0x38>
 8008e2a:	4629      	mov	r1, r5
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	f7ff fd53 	bl	80088d8 <_Balloc>
 8008e32:	b930      	cbnz	r0, 8008e42 <__mdiff+0x2e>
 8008e34:	4b3a      	ldr	r3, [pc, #232]	; (8008f20 <__mdiff+0x10c>)
 8008e36:	4602      	mov	r2, r0
 8008e38:	f240 2132 	movw	r1, #562	; 0x232
 8008e3c:	4839      	ldr	r0, [pc, #228]	; (8008f24 <__mdiff+0x110>)
 8008e3e:	f000 fb31 	bl	80094a4 <__assert_func>
 8008e42:	2301      	movs	r3, #1
 8008e44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e4c:	bfa4      	itt	ge
 8008e4e:	4643      	movge	r3, r8
 8008e50:	46a0      	movge	r8, r4
 8008e52:	4630      	mov	r0, r6
 8008e54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008e58:	bfa6      	itte	ge
 8008e5a:	461c      	movge	r4, r3
 8008e5c:	2500      	movge	r5, #0
 8008e5e:	2501      	movlt	r5, #1
 8008e60:	f7ff fd3a 	bl	80088d8 <_Balloc>
 8008e64:	b920      	cbnz	r0, 8008e70 <__mdiff+0x5c>
 8008e66:	4b2e      	ldr	r3, [pc, #184]	; (8008f20 <__mdiff+0x10c>)
 8008e68:	4602      	mov	r2, r0
 8008e6a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008e6e:	e7e5      	b.n	8008e3c <__mdiff+0x28>
 8008e70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008e74:	6926      	ldr	r6, [r4, #16]
 8008e76:	60c5      	str	r5, [r0, #12]
 8008e78:	f104 0914 	add.w	r9, r4, #20
 8008e7c:	f108 0514 	add.w	r5, r8, #20
 8008e80:	f100 0e14 	add.w	lr, r0, #20
 8008e84:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008e88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008e8c:	f108 0210 	add.w	r2, r8, #16
 8008e90:	46f2      	mov	sl, lr
 8008e92:	2100      	movs	r1, #0
 8008e94:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008e9c:	fa1f f883 	uxth.w	r8, r3
 8008ea0:	fa11 f18b 	uxtah	r1, r1, fp
 8008ea4:	0c1b      	lsrs	r3, r3, #16
 8008ea6:	eba1 0808 	sub.w	r8, r1, r8
 8008eaa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008eae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008eb2:	fa1f f888 	uxth.w	r8, r8
 8008eb6:	1419      	asrs	r1, r3, #16
 8008eb8:	454e      	cmp	r6, r9
 8008eba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008ebe:	f84a 3b04 	str.w	r3, [sl], #4
 8008ec2:	d8e7      	bhi.n	8008e94 <__mdiff+0x80>
 8008ec4:	1b33      	subs	r3, r6, r4
 8008ec6:	3b15      	subs	r3, #21
 8008ec8:	f023 0303 	bic.w	r3, r3, #3
 8008ecc:	3304      	adds	r3, #4
 8008ece:	3415      	adds	r4, #21
 8008ed0:	42a6      	cmp	r6, r4
 8008ed2:	bf38      	it	cc
 8008ed4:	2304      	movcc	r3, #4
 8008ed6:	441d      	add	r5, r3
 8008ed8:	4473      	add	r3, lr
 8008eda:	469e      	mov	lr, r3
 8008edc:	462e      	mov	r6, r5
 8008ede:	4566      	cmp	r6, ip
 8008ee0:	d30e      	bcc.n	8008f00 <__mdiff+0xec>
 8008ee2:	f10c 0203 	add.w	r2, ip, #3
 8008ee6:	1b52      	subs	r2, r2, r5
 8008ee8:	f022 0203 	bic.w	r2, r2, #3
 8008eec:	3d03      	subs	r5, #3
 8008eee:	45ac      	cmp	ip, r5
 8008ef0:	bf38      	it	cc
 8008ef2:	2200      	movcc	r2, #0
 8008ef4:	441a      	add	r2, r3
 8008ef6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008efa:	b17b      	cbz	r3, 8008f1c <__mdiff+0x108>
 8008efc:	6107      	str	r7, [r0, #16]
 8008efe:	e7a3      	b.n	8008e48 <__mdiff+0x34>
 8008f00:	f856 8b04 	ldr.w	r8, [r6], #4
 8008f04:	fa11 f288 	uxtah	r2, r1, r8
 8008f08:	1414      	asrs	r4, r2, #16
 8008f0a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008f0e:	b292      	uxth	r2, r2
 8008f10:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008f14:	f84e 2b04 	str.w	r2, [lr], #4
 8008f18:	1421      	asrs	r1, r4, #16
 8008f1a:	e7e0      	b.n	8008ede <__mdiff+0xca>
 8008f1c:	3f01      	subs	r7, #1
 8008f1e:	e7ea      	b.n	8008ef6 <__mdiff+0xe2>
 8008f20:	0800a1bb 	.word	0x0800a1bb
 8008f24:	0800a1cc 	.word	0x0800a1cc

08008f28 <__d2b>:
 8008f28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f2c:	4689      	mov	r9, r1
 8008f2e:	2101      	movs	r1, #1
 8008f30:	ec57 6b10 	vmov	r6, r7, d0
 8008f34:	4690      	mov	r8, r2
 8008f36:	f7ff fccf 	bl	80088d8 <_Balloc>
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	b930      	cbnz	r0, 8008f4c <__d2b+0x24>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	4b25      	ldr	r3, [pc, #148]	; (8008fd8 <__d2b+0xb0>)
 8008f42:	4826      	ldr	r0, [pc, #152]	; (8008fdc <__d2b+0xb4>)
 8008f44:	f240 310a 	movw	r1, #778	; 0x30a
 8008f48:	f000 faac 	bl	80094a4 <__assert_func>
 8008f4c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008f50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f54:	bb35      	cbnz	r5, 8008fa4 <__d2b+0x7c>
 8008f56:	2e00      	cmp	r6, #0
 8008f58:	9301      	str	r3, [sp, #4]
 8008f5a:	d028      	beq.n	8008fae <__d2b+0x86>
 8008f5c:	4668      	mov	r0, sp
 8008f5e:	9600      	str	r6, [sp, #0]
 8008f60:	f7ff fd82 	bl	8008a68 <__lo0bits>
 8008f64:	9900      	ldr	r1, [sp, #0]
 8008f66:	b300      	cbz	r0, 8008faa <__d2b+0x82>
 8008f68:	9a01      	ldr	r2, [sp, #4]
 8008f6a:	f1c0 0320 	rsb	r3, r0, #32
 8008f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f72:	430b      	orrs	r3, r1
 8008f74:	40c2      	lsrs	r2, r0
 8008f76:	6163      	str	r3, [r4, #20]
 8008f78:	9201      	str	r2, [sp, #4]
 8008f7a:	9b01      	ldr	r3, [sp, #4]
 8008f7c:	61a3      	str	r3, [r4, #24]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	bf14      	ite	ne
 8008f82:	2202      	movne	r2, #2
 8008f84:	2201      	moveq	r2, #1
 8008f86:	6122      	str	r2, [r4, #16]
 8008f88:	b1d5      	cbz	r5, 8008fc0 <__d2b+0x98>
 8008f8a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f8e:	4405      	add	r5, r0
 8008f90:	f8c9 5000 	str.w	r5, [r9]
 8008f94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f98:	f8c8 0000 	str.w	r0, [r8]
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	b003      	add	sp, #12
 8008fa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fa8:	e7d5      	b.n	8008f56 <__d2b+0x2e>
 8008faa:	6161      	str	r1, [r4, #20]
 8008fac:	e7e5      	b.n	8008f7a <__d2b+0x52>
 8008fae:	a801      	add	r0, sp, #4
 8008fb0:	f7ff fd5a 	bl	8008a68 <__lo0bits>
 8008fb4:	9b01      	ldr	r3, [sp, #4]
 8008fb6:	6163      	str	r3, [r4, #20]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	6122      	str	r2, [r4, #16]
 8008fbc:	3020      	adds	r0, #32
 8008fbe:	e7e3      	b.n	8008f88 <__d2b+0x60>
 8008fc0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008fc4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008fc8:	f8c9 0000 	str.w	r0, [r9]
 8008fcc:	6918      	ldr	r0, [r3, #16]
 8008fce:	f7ff fd2b 	bl	8008a28 <__hi0bits>
 8008fd2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008fd6:	e7df      	b.n	8008f98 <__d2b+0x70>
 8008fd8:	0800a1bb 	.word	0x0800a1bb
 8008fdc:	0800a1cc 	.word	0x0800a1cc

08008fe0 <_calloc_r>:
 8008fe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fe2:	fba1 2402 	umull	r2, r4, r1, r2
 8008fe6:	b94c      	cbnz	r4, 8008ffc <_calloc_r+0x1c>
 8008fe8:	4611      	mov	r1, r2
 8008fea:	9201      	str	r2, [sp, #4]
 8008fec:	f000 f87a 	bl	80090e4 <_malloc_r>
 8008ff0:	9a01      	ldr	r2, [sp, #4]
 8008ff2:	4605      	mov	r5, r0
 8008ff4:	b930      	cbnz	r0, 8009004 <_calloc_r+0x24>
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	b003      	add	sp, #12
 8008ffa:	bd30      	pop	{r4, r5, pc}
 8008ffc:	220c      	movs	r2, #12
 8008ffe:	6002      	str	r2, [r0, #0]
 8009000:	2500      	movs	r5, #0
 8009002:	e7f8      	b.n	8008ff6 <_calloc_r+0x16>
 8009004:	4621      	mov	r1, r4
 8009006:	f7fe f92d 	bl	8007264 <memset>
 800900a:	e7f4      	b.n	8008ff6 <_calloc_r+0x16>

0800900c <_free_r>:
 800900c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800900e:	2900      	cmp	r1, #0
 8009010:	d044      	beq.n	800909c <_free_r+0x90>
 8009012:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009016:	9001      	str	r0, [sp, #4]
 8009018:	2b00      	cmp	r3, #0
 800901a:	f1a1 0404 	sub.w	r4, r1, #4
 800901e:	bfb8      	it	lt
 8009020:	18e4      	addlt	r4, r4, r3
 8009022:	f000 fa9b 	bl	800955c <__malloc_lock>
 8009026:	4a1e      	ldr	r2, [pc, #120]	; (80090a0 <_free_r+0x94>)
 8009028:	9801      	ldr	r0, [sp, #4]
 800902a:	6813      	ldr	r3, [r2, #0]
 800902c:	b933      	cbnz	r3, 800903c <_free_r+0x30>
 800902e:	6063      	str	r3, [r4, #4]
 8009030:	6014      	str	r4, [r2, #0]
 8009032:	b003      	add	sp, #12
 8009034:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009038:	f000 ba96 	b.w	8009568 <__malloc_unlock>
 800903c:	42a3      	cmp	r3, r4
 800903e:	d908      	bls.n	8009052 <_free_r+0x46>
 8009040:	6825      	ldr	r5, [r4, #0]
 8009042:	1961      	adds	r1, r4, r5
 8009044:	428b      	cmp	r3, r1
 8009046:	bf01      	itttt	eq
 8009048:	6819      	ldreq	r1, [r3, #0]
 800904a:	685b      	ldreq	r3, [r3, #4]
 800904c:	1949      	addeq	r1, r1, r5
 800904e:	6021      	streq	r1, [r4, #0]
 8009050:	e7ed      	b.n	800902e <_free_r+0x22>
 8009052:	461a      	mov	r2, r3
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	b10b      	cbz	r3, 800905c <_free_r+0x50>
 8009058:	42a3      	cmp	r3, r4
 800905a:	d9fa      	bls.n	8009052 <_free_r+0x46>
 800905c:	6811      	ldr	r1, [r2, #0]
 800905e:	1855      	adds	r5, r2, r1
 8009060:	42a5      	cmp	r5, r4
 8009062:	d10b      	bne.n	800907c <_free_r+0x70>
 8009064:	6824      	ldr	r4, [r4, #0]
 8009066:	4421      	add	r1, r4
 8009068:	1854      	adds	r4, r2, r1
 800906a:	42a3      	cmp	r3, r4
 800906c:	6011      	str	r1, [r2, #0]
 800906e:	d1e0      	bne.n	8009032 <_free_r+0x26>
 8009070:	681c      	ldr	r4, [r3, #0]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	6053      	str	r3, [r2, #4]
 8009076:	4421      	add	r1, r4
 8009078:	6011      	str	r1, [r2, #0]
 800907a:	e7da      	b.n	8009032 <_free_r+0x26>
 800907c:	d902      	bls.n	8009084 <_free_r+0x78>
 800907e:	230c      	movs	r3, #12
 8009080:	6003      	str	r3, [r0, #0]
 8009082:	e7d6      	b.n	8009032 <_free_r+0x26>
 8009084:	6825      	ldr	r5, [r4, #0]
 8009086:	1961      	adds	r1, r4, r5
 8009088:	428b      	cmp	r3, r1
 800908a:	bf04      	itt	eq
 800908c:	6819      	ldreq	r1, [r3, #0]
 800908e:	685b      	ldreq	r3, [r3, #4]
 8009090:	6063      	str	r3, [r4, #4]
 8009092:	bf04      	itt	eq
 8009094:	1949      	addeq	r1, r1, r5
 8009096:	6021      	streq	r1, [r4, #0]
 8009098:	6054      	str	r4, [r2, #4]
 800909a:	e7ca      	b.n	8009032 <_free_r+0x26>
 800909c:	b003      	add	sp, #12
 800909e:	bd30      	pop	{r4, r5, pc}
 80090a0:	200003b8 	.word	0x200003b8

080090a4 <sbrk_aligned>:
 80090a4:	b570      	push	{r4, r5, r6, lr}
 80090a6:	4e0e      	ldr	r6, [pc, #56]	; (80090e0 <sbrk_aligned+0x3c>)
 80090a8:	460c      	mov	r4, r1
 80090aa:	6831      	ldr	r1, [r6, #0]
 80090ac:	4605      	mov	r5, r0
 80090ae:	b911      	cbnz	r1, 80090b6 <sbrk_aligned+0x12>
 80090b0:	f000 f9e8 	bl	8009484 <_sbrk_r>
 80090b4:	6030      	str	r0, [r6, #0]
 80090b6:	4621      	mov	r1, r4
 80090b8:	4628      	mov	r0, r5
 80090ba:	f000 f9e3 	bl	8009484 <_sbrk_r>
 80090be:	1c43      	adds	r3, r0, #1
 80090c0:	d00a      	beq.n	80090d8 <sbrk_aligned+0x34>
 80090c2:	1cc4      	adds	r4, r0, #3
 80090c4:	f024 0403 	bic.w	r4, r4, #3
 80090c8:	42a0      	cmp	r0, r4
 80090ca:	d007      	beq.n	80090dc <sbrk_aligned+0x38>
 80090cc:	1a21      	subs	r1, r4, r0
 80090ce:	4628      	mov	r0, r5
 80090d0:	f000 f9d8 	bl	8009484 <_sbrk_r>
 80090d4:	3001      	adds	r0, #1
 80090d6:	d101      	bne.n	80090dc <sbrk_aligned+0x38>
 80090d8:	f04f 34ff 	mov.w	r4, #4294967295
 80090dc:	4620      	mov	r0, r4
 80090de:	bd70      	pop	{r4, r5, r6, pc}
 80090e0:	200003bc 	.word	0x200003bc

080090e4 <_malloc_r>:
 80090e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090e8:	1ccd      	adds	r5, r1, #3
 80090ea:	f025 0503 	bic.w	r5, r5, #3
 80090ee:	3508      	adds	r5, #8
 80090f0:	2d0c      	cmp	r5, #12
 80090f2:	bf38      	it	cc
 80090f4:	250c      	movcc	r5, #12
 80090f6:	2d00      	cmp	r5, #0
 80090f8:	4607      	mov	r7, r0
 80090fa:	db01      	blt.n	8009100 <_malloc_r+0x1c>
 80090fc:	42a9      	cmp	r1, r5
 80090fe:	d905      	bls.n	800910c <_malloc_r+0x28>
 8009100:	230c      	movs	r3, #12
 8009102:	603b      	str	r3, [r7, #0]
 8009104:	2600      	movs	r6, #0
 8009106:	4630      	mov	r0, r6
 8009108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800910c:	4e2e      	ldr	r6, [pc, #184]	; (80091c8 <_malloc_r+0xe4>)
 800910e:	f000 fa25 	bl	800955c <__malloc_lock>
 8009112:	6833      	ldr	r3, [r6, #0]
 8009114:	461c      	mov	r4, r3
 8009116:	bb34      	cbnz	r4, 8009166 <_malloc_r+0x82>
 8009118:	4629      	mov	r1, r5
 800911a:	4638      	mov	r0, r7
 800911c:	f7ff ffc2 	bl	80090a4 <sbrk_aligned>
 8009120:	1c43      	adds	r3, r0, #1
 8009122:	4604      	mov	r4, r0
 8009124:	d14d      	bne.n	80091c2 <_malloc_r+0xde>
 8009126:	6834      	ldr	r4, [r6, #0]
 8009128:	4626      	mov	r6, r4
 800912a:	2e00      	cmp	r6, #0
 800912c:	d140      	bne.n	80091b0 <_malloc_r+0xcc>
 800912e:	6823      	ldr	r3, [r4, #0]
 8009130:	4631      	mov	r1, r6
 8009132:	4638      	mov	r0, r7
 8009134:	eb04 0803 	add.w	r8, r4, r3
 8009138:	f000 f9a4 	bl	8009484 <_sbrk_r>
 800913c:	4580      	cmp	r8, r0
 800913e:	d13a      	bne.n	80091b6 <_malloc_r+0xd2>
 8009140:	6821      	ldr	r1, [r4, #0]
 8009142:	3503      	adds	r5, #3
 8009144:	1a6d      	subs	r5, r5, r1
 8009146:	f025 0503 	bic.w	r5, r5, #3
 800914a:	3508      	adds	r5, #8
 800914c:	2d0c      	cmp	r5, #12
 800914e:	bf38      	it	cc
 8009150:	250c      	movcc	r5, #12
 8009152:	4629      	mov	r1, r5
 8009154:	4638      	mov	r0, r7
 8009156:	f7ff ffa5 	bl	80090a4 <sbrk_aligned>
 800915a:	3001      	adds	r0, #1
 800915c:	d02b      	beq.n	80091b6 <_malloc_r+0xd2>
 800915e:	6823      	ldr	r3, [r4, #0]
 8009160:	442b      	add	r3, r5
 8009162:	6023      	str	r3, [r4, #0]
 8009164:	e00e      	b.n	8009184 <_malloc_r+0xa0>
 8009166:	6822      	ldr	r2, [r4, #0]
 8009168:	1b52      	subs	r2, r2, r5
 800916a:	d41e      	bmi.n	80091aa <_malloc_r+0xc6>
 800916c:	2a0b      	cmp	r2, #11
 800916e:	d916      	bls.n	800919e <_malloc_r+0xba>
 8009170:	1961      	adds	r1, r4, r5
 8009172:	42a3      	cmp	r3, r4
 8009174:	6025      	str	r5, [r4, #0]
 8009176:	bf18      	it	ne
 8009178:	6059      	strne	r1, [r3, #4]
 800917a:	6863      	ldr	r3, [r4, #4]
 800917c:	bf08      	it	eq
 800917e:	6031      	streq	r1, [r6, #0]
 8009180:	5162      	str	r2, [r4, r5]
 8009182:	604b      	str	r3, [r1, #4]
 8009184:	4638      	mov	r0, r7
 8009186:	f104 060b 	add.w	r6, r4, #11
 800918a:	f000 f9ed 	bl	8009568 <__malloc_unlock>
 800918e:	f026 0607 	bic.w	r6, r6, #7
 8009192:	1d23      	adds	r3, r4, #4
 8009194:	1af2      	subs	r2, r6, r3
 8009196:	d0b6      	beq.n	8009106 <_malloc_r+0x22>
 8009198:	1b9b      	subs	r3, r3, r6
 800919a:	50a3      	str	r3, [r4, r2]
 800919c:	e7b3      	b.n	8009106 <_malloc_r+0x22>
 800919e:	6862      	ldr	r2, [r4, #4]
 80091a0:	42a3      	cmp	r3, r4
 80091a2:	bf0c      	ite	eq
 80091a4:	6032      	streq	r2, [r6, #0]
 80091a6:	605a      	strne	r2, [r3, #4]
 80091a8:	e7ec      	b.n	8009184 <_malloc_r+0xa0>
 80091aa:	4623      	mov	r3, r4
 80091ac:	6864      	ldr	r4, [r4, #4]
 80091ae:	e7b2      	b.n	8009116 <_malloc_r+0x32>
 80091b0:	4634      	mov	r4, r6
 80091b2:	6876      	ldr	r6, [r6, #4]
 80091b4:	e7b9      	b.n	800912a <_malloc_r+0x46>
 80091b6:	230c      	movs	r3, #12
 80091b8:	603b      	str	r3, [r7, #0]
 80091ba:	4638      	mov	r0, r7
 80091bc:	f000 f9d4 	bl	8009568 <__malloc_unlock>
 80091c0:	e7a1      	b.n	8009106 <_malloc_r+0x22>
 80091c2:	6025      	str	r5, [r4, #0]
 80091c4:	e7de      	b.n	8009184 <_malloc_r+0xa0>
 80091c6:	bf00      	nop
 80091c8:	200003b8 	.word	0x200003b8

080091cc <__ssputs_r>:
 80091cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091d0:	688e      	ldr	r6, [r1, #8]
 80091d2:	429e      	cmp	r6, r3
 80091d4:	4682      	mov	sl, r0
 80091d6:	460c      	mov	r4, r1
 80091d8:	4690      	mov	r8, r2
 80091da:	461f      	mov	r7, r3
 80091dc:	d838      	bhi.n	8009250 <__ssputs_r+0x84>
 80091de:	898a      	ldrh	r2, [r1, #12]
 80091e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80091e4:	d032      	beq.n	800924c <__ssputs_r+0x80>
 80091e6:	6825      	ldr	r5, [r4, #0]
 80091e8:	6909      	ldr	r1, [r1, #16]
 80091ea:	eba5 0901 	sub.w	r9, r5, r1
 80091ee:	6965      	ldr	r5, [r4, #20]
 80091f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091f8:	3301      	adds	r3, #1
 80091fa:	444b      	add	r3, r9
 80091fc:	106d      	asrs	r5, r5, #1
 80091fe:	429d      	cmp	r5, r3
 8009200:	bf38      	it	cc
 8009202:	461d      	movcc	r5, r3
 8009204:	0553      	lsls	r3, r2, #21
 8009206:	d531      	bpl.n	800926c <__ssputs_r+0xa0>
 8009208:	4629      	mov	r1, r5
 800920a:	f7ff ff6b 	bl	80090e4 <_malloc_r>
 800920e:	4606      	mov	r6, r0
 8009210:	b950      	cbnz	r0, 8009228 <__ssputs_r+0x5c>
 8009212:	230c      	movs	r3, #12
 8009214:	f8ca 3000 	str.w	r3, [sl]
 8009218:	89a3      	ldrh	r3, [r4, #12]
 800921a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800921e:	81a3      	strh	r3, [r4, #12]
 8009220:	f04f 30ff 	mov.w	r0, #4294967295
 8009224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009228:	6921      	ldr	r1, [r4, #16]
 800922a:	464a      	mov	r2, r9
 800922c:	f7ff fb46 	bl	80088bc <memcpy>
 8009230:	89a3      	ldrh	r3, [r4, #12]
 8009232:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800923a:	81a3      	strh	r3, [r4, #12]
 800923c:	6126      	str	r6, [r4, #16]
 800923e:	6165      	str	r5, [r4, #20]
 8009240:	444e      	add	r6, r9
 8009242:	eba5 0509 	sub.w	r5, r5, r9
 8009246:	6026      	str	r6, [r4, #0]
 8009248:	60a5      	str	r5, [r4, #8]
 800924a:	463e      	mov	r6, r7
 800924c:	42be      	cmp	r6, r7
 800924e:	d900      	bls.n	8009252 <__ssputs_r+0x86>
 8009250:	463e      	mov	r6, r7
 8009252:	6820      	ldr	r0, [r4, #0]
 8009254:	4632      	mov	r2, r6
 8009256:	4641      	mov	r1, r8
 8009258:	f000 f966 	bl	8009528 <memmove>
 800925c:	68a3      	ldr	r3, [r4, #8]
 800925e:	1b9b      	subs	r3, r3, r6
 8009260:	60a3      	str	r3, [r4, #8]
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	4433      	add	r3, r6
 8009266:	6023      	str	r3, [r4, #0]
 8009268:	2000      	movs	r0, #0
 800926a:	e7db      	b.n	8009224 <__ssputs_r+0x58>
 800926c:	462a      	mov	r2, r5
 800926e:	f000 f981 	bl	8009574 <_realloc_r>
 8009272:	4606      	mov	r6, r0
 8009274:	2800      	cmp	r0, #0
 8009276:	d1e1      	bne.n	800923c <__ssputs_r+0x70>
 8009278:	6921      	ldr	r1, [r4, #16]
 800927a:	4650      	mov	r0, sl
 800927c:	f7ff fec6 	bl	800900c <_free_r>
 8009280:	e7c7      	b.n	8009212 <__ssputs_r+0x46>
	...

08009284 <_svfiprintf_r>:
 8009284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009288:	4698      	mov	r8, r3
 800928a:	898b      	ldrh	r3, [r1, #12]
 800928c:	061b      	lsls	r3, r3, #24
 800928e:	b09d      	sub	sp, #116	; 0x74
 8009290:	4607      	mov	r7, r0
 8009292:	460d      	mov	r5, r1
 8009294:	4614      	mov	r4, r2
 8009296:	d50e      	bpl.n	80092b6 <_svfiprintf_r+0x32>
 8009298:	690b      	ldr	r3, [r1, #16]
 800929a:	b963      	cbnz	r3, 80092b6 <_svfiprintf_r+0x32>
 800929c:	2140      	movs	r1, #64	; 0x40
 800929e:	f7ff ff21 	bl	80090e4 <_malloc_r>
 80092a2:	6028      	str	r0, [r5, #0]
 80092a4:	6128      	str	r0, [r5, #16]
 80092a6:	b920      	cbnz	r0, 80092b2 <_svfiprintf_r+0x2e>
 80092a8:	230c      	movs	r3, #12
 80092aa:	603b      	str	r3, [r7, #0]
 80092ac:	f04f 30ff 	mov.w	r0, #4294967295
 80092b0:	e0d1      	b.n	8009456 <_svfiprintf_r+0x1d2>
 80092b2:	2340      	movs	r3, #64	; 0x40
 80092b4:	616b      	str	r3, [r5, #20]
 80092b6:	2300      	movs	r3, #0
 80092b8:	9309      	str	r3, [sp, #36]	; 0x24
 80092ba:	2320      	movs	r3, #32
 80092bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80092c4:	2330      	movs	r3, #48	; 0x30
 80092c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009470 <_svfiprintf_r+0x1ec>
 80092ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092ce:	f04f 0901 	mov.w	r9, #1
 80092d2:	4623      	mov	r3, r4
 80092d4:	469a      	mov	sl, r3
 80092d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092da:	b10a      	cbz	r2, 80092e0 <_svfiprintf_r+0x5c>
 80092dc:	2a25      	cmp	r2, #37	; 0x25
 80092de:	d1f9      	bne.n	80092d4 <_svfiprintf_r+0x50>
 80092e0:	ebba 0b04 	subs.w	fp, sl, r4
 80092e4:	d00b      	beq.n	80092fe <_svfiprintf_r+0x7a>
 80092e6:	465b      	mov	r3, fp
 80092e8:	4622      	mov	r2, r4
 80092ea:	4629      	mov	r1, r5
 80092ec:	4638      	mov	r0, r7
 80092ee:	f7ff ff6d 	bl	80091cc <__ssputs_r>
 80092f2:	3001      	adds	r0, #1
 80092f4:	f000 80aa 	beq.w	800944c <_svfiprintf_r+0x1c8>
 80092f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092fa:	445a      	add	r2, fp
 80092fc:	9209      	str	r2, [sp, #36]	; 0x24
 80092fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009302:	2b00      	cmp	r3, #0
 8009304:	f000 80a2 	beq.w	800944c <_svfiprintf_r+0x1c8>
 8009308:	2300      	movs	r3, #0
 800930a:	f04f 32ff 	mov.w	r2, #4294967295
 800930e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009312:	f10a 0a01 	add.w	sl, sl, #1
 8009316:	9304      	str	r3, [sp, #16]
 8009318:	9307      	str	r3, [sp, #28]
 800931a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800931e:	931a      	str	r3, [sp, #104]	; 0x68
 8009320:	4654      	mov	r4, sl
 8009322:	2205      	movs	r2, #5
 8009324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009328:	4851      	ldr	r0, [pc, #324]	; (8009470 <_svfiprintf_r+0x1ec>)
 800932a:	f7f6 ff61 	bl	80001f0 <memchr>
 800932e:	9a04      	ldr	r2, [sp, #16]
 8009330:	b9d8      	cbnz	r0, 800936a <_svfiprintf_r+0xe6>
 8009332:	06d0      	lsls	r0, r2, #27
 8009334:	bf44      	itt	mi
 8009336:	2320      	movmi	r3, #32
 8009338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800933c:	0711      	lsls	r1, r2, #28
 800933e:	bf44      	itt	mi
 8009340:	232b      	movmi	r3, #43	; 0x2b
 8009342:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009346:	f89a 3000 	ldrb.w	r3, [sl]
 800934a:	2b2a      	cmp	r3, #42	; 0x2a
 800934c:	d015      	beq.n	800937a <_svfiprintf_r+0xf6>
 800934e:	9a07      	ldr	r2, [sp, #28]
 8009350:	4654      	mov	r4, sl
 8009352:	2000      	movs	r0, #0
 8009354:	f04f 0c0a 	mov.w	ip, #10
 8009358:	4621      	mov	r1, r4
 800935a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800935e:	3b30      	subs	r3, #48	; 0x30
 8009360:	2b09      	cmp	r3, #9
 8009362:	d94e      	bls.n	8009402 <_svfiprintf_r+0x17e>
 8009364:	b1b0      	cbz	r0, 8009394 <_svfiprintf_r+0x110>
 8009366:	9207      	str	r2, [sp, #28]
 8009368:	e014      	b.n	8009394 <_svfiprintf_r+0x110>
 800936a:	eba0 0308 	sub.w	r3, r0, r8
 800936e:	fa09 f303 	lsl.w	r3, r9, r3
 8009372:	4313      	orrs	r3, r2
 8009374:	9304      	str	r3, [sp, #16]
 8009376:	46a2      	mov	sl, r4
 8009378:	e7d2      	b.n	8009320 <_svfiprintf_r+0x9c>
 800937a:	9b03      	ldr	r3, [sp, #12]
 800937c:	1d19      	adds	r1, r3, #4
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	9103      	str	r1, [sp, #12]
 8009382:	2b00      	cmp	r3, #0
 8009384:	bfbb      	ittet	lt
 8009386:	425b      	neglt	r3, r3
 8009388:	f042 0202 	orrlt.w	r2, r2, #2
 800938c:	9307      	strge	r3, [sp, #28]
 800938e:	9307      	strlt	r3, [sp, #28]
 8009390:	bfb8      	it	lt
 8009392:	9204      	strlt	r2, [sp, #16]
 8009394:	7823      	ldrb	r3, [r4, #0]
 8009396:	2b2e      	cmp	r3, #46	; 0x2e
 8009398:	d10c      	bne.n	80093b4 <_svfiprintf_r+0x130>
 800939a:	7863      	ldrb	r3, [r4, #1]
 800939c:	2b2a      	cmp	r3, #42	; 0x2a
 800939e:	d135      	bne.n	800940c <_svfiprintf_r+0x188>
 80093a0:	9b03      	ldr	r3, [sp, #12]
 80093a2:	1d1a      	adds	r2, r3, #4
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	9203      	str	r2, [sp, #12]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	bfb8      	it	lt
 80093ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80093b0:	3402      	adds	r4, #2
 80093b2:	9305      	str	r3, [sp, #20]
 80093b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009480 <_svfiprintf_r+0x1fc>
 80093b8:	7821      	ldrb	r1, [r4, #0]
 80093ba:	2203      	movs	r2, #3
 80093bc:	4650      	mov	r0, sl
 80093be:	f7f6 ff17 	bl	80001f0 <memchr>
 80093c2:	b140      	cbz	r0, 80093d6 <_svfiprintf_r+0x152>
 80093c4:	2340      	movs	r3, #64	; 0x40
 80093c6:	eba0 000a 	sub.w	r0, r0, sl
 80093ca:	fa03 f000 	lsl.w	r0, r3, r0
 80093ce:	9b04      	ldr	r3, [sp, #16]
 80093d0:	4303      	orrs	r3, r0
 80093d2:	3401      	adds	r4, #1
 80093d4:	9304      	str	r3, [sp, #16]
 80093d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093da:	4826      	ldr	r0, [pc, #152]	; (8009474 <_svfiprintf_r+0x1f0>)
 80093dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093e0:	2206      	movs	r2, #6
 80093e2:	f7f6 ff05 	bl	80001f0 <memchr>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	d038      	beq.n	800945c <_svfiprintf_r+0x1d8>
 80093ea:	4b23      	ldr	r3, [pc, #140]	; (8009478 <_svfiprintf_r+0x1f4>)
 80093ec:	bb1b      	cbnz	r3, 8009436 <_svfiprintf_r+0x1b2>
 80093ee:	9b03      	ldr	r3, [sp, #12]
 80093f0:	3307      	adds	r3, #7
 80093f2:	f023 0307 	bic.w	r3, r3, #7
 80093f6:	3308      	adds	r3, #8
 80093f8:	9303      	str	r3, [sp, #12]
 80093fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093fc:	4433      	add	r3, r6
 80093fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009400:	e767      	b.n	80092d2 <_svfiprintf_r+0x4e>
 8009402:	fb0c 3202 	mla	r2, ip, r2, r3
 8009406:	460c      	mov	r4, r1
 8009408:	2001      	movs	r0, #1
 800940a:	e7a5      	b.n	8009358 <_svfiprintf_r+0xd4>
 800940c:	2300      	movs	r3, #0
 800940e:	3401      	adds	r4, #1
 8009410:	9305      	str	r3, [sp, #20]
 8009412:	4619      	mov	r1, r3
 8009414:	f04f 0c0a 	mov.w	ip, #10
 8009418:	4620      	mov	r0, r4
 800941a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800941e:	3a30      	subs	r2, #48	; 0x30
 8009420:	2a09      	cmp	r2, #9
 8009422:	d903      	bls.n	800942c <_svfiprintf_r+0x1a8>
 8009424:	2b00      	cmp	r3, #0
 8009426:	d0c5      	beq.n	80093b4 <_svfiprintf_r+0x130>
 8009428:	9105      	str	r1, [sp, #20]
 800942a:	e7c3      	b.n	80093b4 <_svfiprintf_r+0x130>
 800942c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009430:	4604      	mov	r4, r0
 8009432:	2301      	movs	r3, #1
 8009434:	e7f0      	b.n	8009418 <_svfiprintf_r+0x194>
 8009436:	ab03      	add	r3, sp, #12
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	462a      	mov	r2, r5
 800943c:	4b0f      	ldr	r3, [pc, #60]	; (800947c <_svfiprintf_r+0x1f8>)
 800943e:	a904      	add	r1, sp, #16
 8009440:	4638      	mov	r0, r7
 8009442:	f7fd ffb7 	bl	80073b4 <_printf_float>
 8009446:	1c42      	adds	r2, r0, #1
 8009448:	4606      	mov	r6, r0
 800944a:	d1d6      	bne.n	80093fa <_svfiprintf_r+0x176>
 800944c:	89ab      	ldrh	r3, [r5, #12]
 800944e:	065b      	lsls	r3, r3, #25
 8009450:	f53f af2c 	bmi.w	80092ac <_svfiprintf_r+0x28>
 8009454:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009456:	b01d      	add	sp, #116	; 0x74
 8009458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800945c:	ab03      	add	r3, sp, #12
 800945e:	9300      	str	r3, [sp, #0]
 8009460:	462a      	mov	r2, r5
 8009462:	4b06      	ldr	r3, [pc, #24]	; (800947c <_svfiprintf_r+0x1f8>)
 8009464:	a904      	add	r1, sp, #16
 8009466:	4638      	mov	r0, r7
 8009468:	f7fe fa48 	bl	80078fc <_printf_i>
 800946c:	e7eb      	b.n	8009446 <_svfiprintf_r+0x1c2>
 800946e:	bf00      	nop
 8009470:	0800a324 	.word	0x0800a324
 8009474:	0800a32e 	.word	0x0800a32e
 8009478:	080073b5 	.word	0x080073b5
 800947c:	080091cd 	.word	0x080091cd
 8009480:	0800a32a 	.word	0x0800a32a

08009484 <_sbrk_r>:
 8009484:	b538      	push	{r3, r4, r5, lr}
 8009486:	4d06      	ldr	r5, [pc, #24]	; (80094a0 <_sbrk_r+0x1c>)
 8009488:	2300      	movs	r3, #0
 800948a:	4604      	mov	r4, r0
 800948c:	4608      	mov	r0, r1
 800948e:	602b      	str	r3, [r5, #0]
 8009490:	f7f8 fa7e 	bl	8001990 <_sbrk>
 8009494:	1c43      	adds	r3, r0, #1
 8009496:	d102      	bne.n	800949e <_sbrk_r+0x1a>
 8009498:	682b      	ldr	r3, [r5, #0]
 800949a:	b103      	cbz	r3, 800949e <_sbrk_r+0x1a>
 800949c:	6023      	str	r3, [r4, #0]
 800949e:	bd38      	pop	{r3, r4, r5, pc}
 80094a0:	200003c0 	.word	0x200003c0

080094a4 <__assert_func>:
 80094a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094a6:	4614      	mov	r4, r2
 80094a8:	461a      	mov	r2, r3
 80094aa:	4b09      	ldr	r3, [pc, #36]	; (80094d0 <__assert_func+0x2c>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4605      	mov	r5, r0
 80094b0:	68d8      	ldr	r0, [r3, #12]
 80094b2:	b14c      	cbz	r4, 80094c8 <__assert_func+0x24>
 80094b4:	4b07      	ldr	r3, [pc, #28]	; (80094d4 <__assert_func+0x30>)
 80094b6:	9100      	str	r1, [sp, #0]
 80094b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80094bc:	4906      	ldr	r1, [pc, #24]	; (80094d8 <__assert_func+0x34>)
 80094be:	462b      	mov	r3, r5
 80094c0:	f000 f80e 	bl	80094e0 <fiprintf>
 80094c4:	f000 faac 	bl	8009a20 <abort>
 80094c8:	4b04      	ldr	r3, [pc, #16]	; (80094dc <__assert_func+0x38>)
 80094ca:	461c      	mov	r4, r3
 80094cc:	e7f3      	b.n	80094b6 <__assert_func+0x12>
 80094ce:	bf00      	nop
 80094d0:	2000001c 	.word	0x2000001c
 80094d4:	0800a335 	.word	0x0800a335
 80094d8:	0800a342 	.word	0x0800a342
 80094dc:	0800a370 	.word	0x0800a370

080094e0 <fiprintf>:
 80094e0:	b40e      	push	{r1, r2, r3}
 80094e2:	b503      	push	{r0, r1, lr}
 80094e4:	4601      	mov	r1, r0
 80094e6:	ab03      	add	r3, sp, #12
 80094e8:	4805      	ldr	r0, [pc, #20]	; (8009500 <fiprintf+0x20>)
 80094ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80094ee:	6800      	ldr	r0, [r0, #0]
 80094f0:	9301      	str	r3, [sp, #4]
 80094f2:	f000 f897 	bl	8009624 <_vfiprintf_r>
 80094f6:	b002      	add	sp, #8
 80094f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80094fc:	b003      	add	sp, #12
 80094fe:	4770      	bx	lr
 8009500:	2000001c 	.word	0x2000001c

08009504 <__ascii_mbtowc>:
 8009504:	b082      	sub	sp, #8
 8009506:	b901      	cbnz	r1, 800950a <__ascii_mbtowc+0x6>
 8009508:	a901      	add	r1, sp, #4
 800950a:	b142      	cbz	r2, 800951e <__ascii_mbtowc+0x1a>
 800950c:	b14b      	cbz	r3, 8009522 <__ascii_mbtowc+0x1e>
 800950e:	7813      	ldrb	r3, [r2, #0]
 8009510:	600b      	str	r3, [r1, #0]
 8009512:	7812      	ldrb	r2, [r2, #0]
 8009514:	1e10      	subs	r0, r2, #0
 8009516:	bf18      	it	ne
 8009518:	2001      	movne	r0, #1
 800951a:	b002      	add	sp, #8
 800951c:	4770      	bx	lr
 800951e:	4610      	mov	r0, r2
 8009520:	e7fb      	b.n	800951a <__ascii_mbtowc+0x16>
 8009522:	f06f 0001 	mvn.w	r0, #1
 8009526:	e7f8      	b.n	800951a <__ascii_mbtowc+0x16>

08009528 <memmove>:
 8009528:	4288      	cmp	r0, r1
 800952a:	b510      	push	{r4, lr}
 800952c:	eb01 0402 	add.w	r4, r1, r2
 8009530:	d902      	bls.n	8009538 <memmove+0x10>
 8009532:	4284      	cmp	r4, r0
 8009534:	4623      	mov	r3, r4
 8009536:	d807      	bhi.n	8009548 <memmove+0x20>
 8009538:	1e43      	subs	r3, r0, #1
 800953a:	42a1      	cmp	r1, r4
 800953c:	d008      	beq.n	8009550 <memmove+0x28>
 800953e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009542:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009546:	e7f8      	b.n	800953a <memmove+0x12>
 8009548:	4402      	add	r2, r0
 800954a:	4601      	mov	r1, r0
 800954c:	428a      	cmp	r2, r1
 800954e:	d100      	bne.n	8009552 <memmove+0x2a>
 8009550:	bd10      	pop	{r4, pc}
 8009552:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009556:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800955a:	e7f7      	b.n	800954c <memmove+0x24>

0800955c <__malloc_lock>:
 800955c:	4801      	ldr	r0, [pc, #4]	; (8009564 <__malloc_lock+0x8>)
 800955e:	f000 bc1f 	b.w	8009da0 <__retarget_lock_acquire_recursive>
 8009562:	bf00      	nop
 8009564:	200003c4 	.word	0x200003c4

08009568 <__malloc_unlock>:
 8009568:	4801      	ldr	r0, [pc, #4]	; (8009570 <__malloc_unlock+0x8>)
 800956a:	f000 bc1a 	b.w	8009da2 <__retarget_lock_release_recursive>
 800956e:	bf00      	nop
 8009570:	200003c4 	.word	0x200003c4

08009574 <_realloc_r>:
 8009574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009578:	4680      	mov	r8, r0
 800957a:	4614      	mov	r4, r2
 800957c:	460e      	mov	r6, r1
 800957e:	b921      	cbnz	r1, 800958a <_realloc_r+0x16>
 8009580:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009584:	4611      	mov	r1, r2
 8009586:	f7ff bdad 	b.w	80090e4 <_malloc_r>
 800958a:	b92a      	cbnz	r2, 8009598 <_realloc_r+0x24>
 800958c:	f7ff fd3e 	bl	800900c <_free_r>
 8009590:	4625      	mov	r5, r4
 8009592:	4628      	mov	r0, r5
 8009594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009598:	f000 fc6a 	bl	8009e70 <_malloc_usable_size_r>
 800959c:	4284      	cmp	r4, r0
 800959e:	4607      	mov	r7, r0
 80095a0:	d802      	bhi.n	80095a8 <_realloc_r+0x34>
 80095a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80095a6:	d812      	bhi.n	80095ce <_realloc_r+0x5a>
 80095a8:	4621      	mov	r1, r4
 80095aa:	4640      	mov	r0, r8
 80095ac:	f7ff fd9a 	bl	80090e4 <_malloc_r>
 80095b0:	4605      	mov	r5, r0
 80095b2:	2800      	cmp	r0, #0
 80095b4:	d0ed      	beq.n	8009592 <_realloc_r+0x1e>
 80095b6:	42bc      	cmp	r4, r7
 80095b8:	4622      	mov	r2, r4
 80095ba:	4631      	mov	r1, r6
 80095bc:	bf28      	it	cs
 80095be:	463a      	movcs	r2, r7
 80095c0:	f7ff f97c 	bl	80088bc <memcpy>
 80095c4:	4631      	mov	r1, r6
 80095c6:	4640      	mov	r0, r8
 80095c8:	f7ff fd20 	bl	800900c <_free_r>
 80095cc:	e7e1      	b.n	8009592 <_realloc_r+0x1e>
 80095ce:	4635      	mov	r5, r6
 80095d0:	e7df      	b.n	8009592 <_realloc_r+0x1e>

080095d2 <__sfputc_r>:
 80095d2:	6893      	ldr	r3, [r2, #8]
 80095d4:	3b01      	subs	r3, #1
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	b410      	push	{r4}
 80095da:	6093      	str	r3, [r2, #8]
 80095dc:	da08      	bge.n	80095f0 <__sfputc_r+0x1e>
 80095de:	6994      	ldr	r4, [r2, #24]
 80095e0:	42a3      	cmp	r3, r4
 80095e2:	db01      	blt.n	80095e8 <__sfputc_r+0x16>
 80095e4:	290a      	cmp	r1, #10
 80095e6:	d103      	bne.n	80095f0 <__sfputc_r+0x1e>
 80095e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095ec:	f000 b94a 	b.w	8009884 <__swbuf_r>
 80095f0:	6813      	ldr	r3, [r2, #0]
 80095f2:	1c58      	adds	r0, r3, #1
 80095f4:	6010      	str	r0, [r2, #0]
 80095f6:	7019      	strb	r1, [r3, #0]
 80095f8:	4608      	mov	r0, r1
 80095fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <__sfputs_r>:
 8009600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009602:	4606      	mov	r6, r0
 8009604:	460f      	mov	r7, r1
 8009606:	4614      	mov	r4, r2
 8009608:	18d5      	adds	r5, r2, r3
 800960a:	42ac      	cmp	r4, r5
 800960c:	d101      	bne.n	8009612 <__sfputs_r+0x12>
 800960e:	2000      	movs	r0, #0
 8009610:	e007      	b.n	8009622 <__sfputs_r+0x22>
 8009612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009616:	463a      	mov	r2, r7
 8009618:	4630      	mov	r0, r6
 800961a:	f7ff ffda 	bl	80095d2 <__sfputc_r>
 800961e:	1c43      	adds	r3, r0, #1
 8009620:	d1f3      	bne.n	800960a <__sfputs_r+0xa>
 8009622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009624 <_vfiprintf_r>:
 8009624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009628:	460d      	mov	r5, r1
 800962a:	b09d      	sub	sp, #116	; 0x74
 800962c:	4614      	mov	r4, r2
 800962e:	4698      	mov	r8, r3
 8009630:	4606      	mov	r6, r0
 8009632:	b118      	cbz	r0, 800963c <_vfiprintf_r+0x18>
 8009634:	6983      	ldr	r3, [r0, #24]
 8009636:	b90b      	cbnz	r3, 800963c <_vfiprintf_r+0x18>
 8009638:	f000 fb14 	bl	8009c64 <__sinit>
 800963c:	4b89      	ldr	r3, [pc, #548]	; (8009864 <_vfiprintf_r+0x240>)
 800963e:	429d      	cmp	r5, r3
 8009640:	d11b      	bne.n	800967a <_vfiprintf_r+0x56>
 8009642:	6875      	ldr	r5, [r6, #4]
 8009644:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009646:	07d9      	lsls	r1, r3, #31
 8009648:	d405      	bmi.n	8009656 <_vfiprintf_r+0x32>
 800964a:	89ab      	ldrh	r3, [r5, #12]
 800964c:	059a      	lsls	r2, r3, #22
 800964e:	d402      	bmi.n	8009656 <_vfiprintf_r+0x32>
 8009650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009652:	f000 fba5 	bl	8009da0 <__retarget_lock_acquire_recursive>
 8009656:	89ab      	ldrh	r3, [r5, #12]
 8009658:	071b      	lsls	r3, r3, #28
 800965a:	d501      	bpl.n	8009660 <_vfiprintf_r+0x3c>
 800965c:	692b      	ldr	r3, [r5, #16]
 800965e:	b9eb      	cbnz	r3, 800969c <_vfiprintf_r+0x78>
 8009660:	4629      	mov	r1, r5
 8009662:	4630      	mov	r0, r6
 8009664:	f000 f96e 	bl	8009944 <__swsetup_r>
 8009668:	b1c0      	cbz	r0, 800969c <_vfiprintf_r+0x78>
 800966a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800966c:	07dc      	lsls	r4, r3, #31
 800966e:	d50e      	bpl.n	800968e <_vfiprintf_r+0x6a>
 8009670:	f04f 30ff 	mov.w	r0, #4294967295
 8009674:	b01d      	add	sp, #116	; 0x74
 8009676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800967a:	4b7b      	ldr	r3, [pc, #492]	; (8009868 <_vfiprintf_r+0x244>)
 800967c:	429d      	cmp	r5, r3
 800967e:	d101      	bne.n	8009684 <_vfiprintf_r+0x60>
 8009680:	68b5      	ldr	r5, [r6, #8]
 8009682:	e7df      	b.n	8009644 <_vfiprintf_r+0x20>
 8009684:	4b79      	ldr	r3, [pc, #484]	; (800986c <_vfiprintf_r+0x248>)
 8009686:	429d      	cmp	r5, r3
 8009688:	bf08      	it	eq
 800968a:	68f5      	ldreq	r5, [r6, #12]
 800968c:	e7da      	b.n	8009644 <_vfiprintf_r+0x20>
 800968e:	89ab      	ldrh	r3, [r5, #12]
 8009690:	0598      	lsls	r0, r3, #22
 8009692:	d4ed      	bmi.n	8009670 <_vfiprintf_r+0x4c>
 8009694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009696:	f000 fb84 	bl	8009da2 <__retarget_lock_release_recursive>
 800969a:	e7e9      	b.n	8009670 <_vfiprintf_r+0x4c>
 800969c:	2300      	movs	r3, #0
 800969e:	9309      	str	r3, [sp, #36]	; 0x24
 80096a0:	2320      	movs	r3, #32
 80096a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80096aa:	2330      	movs	r3, #48	; 0x30
 80096ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009870 <_vfiprintf_r+0x24c>
 80096b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096b4:	f04f 0901 	mov.w	r9, #1
 80096b8:	4623      	mov	r3, r4
 80096ba:	469a      	mov	sl, r3
 80096bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096c0:	b10a      	cbz	r2, 80096c6 <_vfiprintf_r+0xa2>
 80096c2:	2a25      	cmp	r2, #37	; 0x25
 80096c4:	d1f9      	bne.n	80096ba <_vfiprintf_r+0x96>
 80096c6:	ebba 0b04 	subs.w	fp, sl, r4
 80096ca:	d00b      	beq.n	80096e4 <_vfiprintf_r+0xc0>
 80096cc:	465b      	mov	r3, fp
 80096ce:	4622      	mov	r2, r4
 80096d0:	4629      	mov	r1, r5
 80096d2:	4630      	mov	r0, r6
 80096d4:	f7ff ff94 	bl	8009600 <__sfputs_r>
 80096d8:	3001      	adds	r0, #1
 80096da:	f000 80aa 	beq.w	8009832 <_vfiprintf_r+0x20e>
 80096de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096e0:	445a      	add	r2, fp
 80096e2:	9209      	str	r2, [sp, #36]	; 0x24
 80096e4:	f89a 3000 	ldrb.w	r3, [sl]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f000 80a2 	beq.w	8009832 <_vfiprintf_r+0x20e>
 80096ee:	2300      	movs	r3, #0
 80096f0:	f04f 32ff 	mov.w	r2, #4294967295
 80096f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096f8:	f10a 0a01 	add.w	sl, sl, #1
 80096fc:	9304      	str	r3, [sp, #16]
 80096fe:	9307      	str	r3, [sp, #28]
 8009700:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009704:	931a      	str	r3, [sp, #104]	; 0x68
 8009706:	4654      	mov	r4, sl
 8009708:	2205      	movs	r2, #5
 800970a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800970e:	4858      	ldr	r0, [pc, #352]	; (8009870 <_vfiprintf_r+0x24c>)
 8009710:	f7f6 fd6e 	bl	80001f0 <memchr>
 8009714:	9a04      	ldr	r2, [sp, #16]
 8009716:	b9d8      	cbnz	r0, 8009750 <_vfiprintf_r+0x12c>
 8009718:	06d1      	lsls	r1, r2, #27
 800971a:	bf44      	itt	mi
 800971c:	2320      	movmi	r3, #32
 800971e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009722:	0713      	lsls	r3, r2, #28
 8009724:	bf44      	itt	mi
 8009726:	232b      	movmi	r3, #43	; 0x2b
 8009728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800972c:	f89a 3000 	ldrb.w	r3, [sl]
 8009730:	2b2a      	cmp	r3, #42	; 0x2a
 8009732:	d015      	beq.n	8009760 <_vfiprintf_r+0x13c>
 8009734:	9a07      	ldr	r2, [sp, #28]
 8009736:	4654      	mov	r4, sl
 8009738:	2000      	movs	r0, #0
 800973a:	f04f 0c0a 	mov.w	ip, #10
 800973e:	4621      	mov	r1, r4
 8009740:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009744:	3b30      	subs	r3, #48	; 0x30
 8009746:	2b09      	cmp	r3, #9
 8009748:	d94e      	bls.n	80097e8 <_vfiprintf_r+0x1c4>
 800974a:	b1b0      	cbz	r0, 800977a <_vfiprintf_r+0x156>
 800974c:	9207      	str	r2, [sp, #28]
 800974e:	e014      	b.n	800977a <_vfiprintf_r+0x156>
 8009750:	eba0 0308 	sub.w	r3, r0, r8
 8009754:	fa09 f303 	lsl.w	r3, r9, r3
 8009758:	4313      	orrs	r3, r2
 800975a:	9304      	str	r3, [sp, #16]
 800975c:	46a2      	mov	sl, r4
 800975e:	e7d2      	b.n	8009706 <_vfiprintf_r+0xe2>
 8009760:	9b03      	ldr	r3, [sp, #12]
 8009762:	1d19      	adds	r1, r3, #4
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	9103      	str	r1, [sp, #12]
 8009768:	2b00      	cmp	r3, #0
 800976a:	bfbb      	ittet	lt
 800976c:	425b      	neglt	r3, r3
 800976e:	f042 0202 	orrlt.w	r2, r2, #2
 8009772:	9307      	strge	r3, [sp, #28]
 8009774:	9307      	strlt	r3, [sp, #28]
 8009776:	bfb8      	it	lt
 8009778:	9204      	strlt	r2, [sp, #16]
 800977a:	7823      	ldrb	r3, [r4, #0]
 800977c:	2b2e      	cmp	r3, #46	; 0x2e
 800977e:	d10c      	bne.n	800979a <_vfiprintf_r+0x176>
 8009780:	7863      	ldrb	r3, [r4, #1]
 8009782:	2b2a      	cmp	r3, #42	; 0x2a
 8009784:	d135      	bne.n	80097f2 <_vfiprintf_r+0x1ce>
 8009786:	9b03      	ldr	r3, [sp, #12]
 8009788:	1d1a      	adds	r2, r3, #4
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	9203      	str	r2, [sp, #12]
 800978e:	2b00      	cmp	r3, #0
 8009790:	bfb8      	it	lt
 8009792:	f04f 33ff 	movlt.w	r3, #4294967295
 8009796:	3402      	adds	r4, #2
 8009798:	9305      	str	r3, [sp, #20]
 800979a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009880 <_vfiprintf_r+0x25c>
 800979e:	7821      	ldrb	r1, [r4, #0]
 80097a0:	2203      	movs	r2, #3
 80097a2:	4650      	mov	r0, sl
 80097a4:	f7f6 fd24 	bl	80001f0 <memchr>
 80097a8:	b140      	cbz	r0, 80097bc <_vfiprintf_r+0x198>
 80097aa:	2340      	movs	r3, #64	; 0x40
 80097ac:	eba0 000a 	sub.w	r0, r0, sl
 80097b0:	fa03 f000 	lsl.w	r0, r3, r0
 80097b4:	9b04      	ldr	r3, [sp, #16]
 80097b6:	4303      	orrs	r3, r0
 80097b8:	3401      	adds	r4, #1
 80097ba:	9304      	str	r3, [sp, #16]
 80097bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097c0:	482c      	ldr	r0, [pc, #176]	; (8009874 <_vfiprintf_r+0x250>)
 80097c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097c6:	2206      	movs	r2, #6
 80097c8:	f7f6 fd12 	bl	80001f0 <memchr>
 80097cc:	2800      	cmp	r0, #0
 80097ce:	d03f      	beq.n	8009850 <_vfiprintf_r+0x22c>
 80097d0:	4b29      	ldr	r3, [pc, #164]	; (8009878 <_vfiprintf_r+0x254>)
 80097d2:	bb1b      	cbnz	r3, 800981c <_vfiprintf_r+0x1f8>
 80097d4:	9b03      	ldr	r3, [sp, #12]
 80097d6:	3307      	adds	r3, #7
 80097d8:	f023 0307 	bic.w	r3, r3, #7
 80097dc:	3308      	adds	r3, #8
 80097de:	9303      	str	r3, [sp, #12]
 80097e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097e2:	443b      	add	r3, r7
 80097e4:	9309      	str	r3, [sp, #36]	; 0x24
 80097e6:	e767      	b.n	80096b8 <_vfiprintf_r+0x94>
 80097e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80097ec:	460c      	mov	r4, r1
 80097ee:	2001      	movs	r0, #1
 80097f0:	e7a5      	b.n	800973e <_vfiprintf_r+0x11a>
 80097f2:	2300      	movs	r3, #0
 80097f4:	3401      	adds	r4, #1
 80097f6:	9305      	str	r3, [sp, #20]
 80097f8:	4619      	mov	r1, r3
 80097fa:	f04f 0c0a 	mov.w	ip, #10
 80097fe:	4620      	mov	r0, r4
 8009800:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009804:	3a30      	subs	r2, #48	; 0x30
 8009806:	2a09      	cmp	r2, #9
 8009808:	d903      	bls.n	8009812 <_vfiprintf_r+0x1ee>
 800980a:	2b00      	cmp	r3, #0
 800980c:	d0c5      	beq.n	800979a <_vfiprintf_r+0x176>
 800980e:	9105      	str	r1, [sp, #20]
 8009810:	e7c3      	b.n	800979a <_vfiprintf_r+0x176>
 8009812:	fb0c 2101 	mla	r1, ip, r1, r2
 8009816:	4604      	mov	r4, r0
 8009818:	2301      	movs	r3, #1
 800981a:	e7f0      	b.n	80097fe <_vfiprintf_r+0x1da>
 800981c:	ab03      	add	r3, sp, #12
 800981e:	9300      	str	r3, [sp, #0]
 8009820:	462a      	mov	r2, r5
 8009822:	4b16      	ldr	r3, [pc, #88]	; (800987c <_vfiprintf_r+0x258>)
 8009824:	a904      	add	r1, sp, #16
 8009826:	4630      	mov	r0, r6
 8009828:	f7fd fdc4 	bl	80073b4 <_printf_float>
 800982c:	4607      	mov	r7, r0
 800982e:	1c78      	adds	r0, r7, #1
 8009830:	d1d6      	bne.n	80097e0 <_vfiprintf_r+0x1bc>
 8009832:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009834:	07d9      	lsls	r1, r3, #31
 8009836:	d405      	bmi.n	8009844 <_vfiprintf_r+0x220>
 8009838:	89ab      	ldrh	r3, [r5, #12]
 800983a:	059a      	lsls	r2, r3, #22
 800983c:	d402      	bmi.n	8009844 <_vfiprintf_r+0x220>
 800983e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009840:	f000 faaf 	bl	8009da2 <__retarget_lock_release_recursive>
 8009844:	89ab      	ldrh	r3, [r5, #12]
 8009846:	065b      	lsls	r3, r3, #25
 8009848:	f53f af12 	bmi.w	8009670 <_vfiprintf_r+0x4c>
 800984c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800984e:	e711      	b.n	8009674 <_vfiprintf_r+0x50>
 8009850:	ab03      	add	r3, sp, #12
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	462a      	mov	r2, r5
 8009856:	4b09      	ldr	r3, [pc, #36]	; (800987c <_vfiprintf_r+0x258>)
 8009858:	a904      	add	r1, sp, #16
 800985a:	4630      	mov	r0, r6
 800985c:	f7fe f84e 	bl	80078fc <_printf_i>
 8009860:	e7e4      	b.n	800982c <_vfiprintf_r+0x208>
 8009862:	bf00      	nop
 8009864:	0800a49c 	.word	0x0800a49c
 8009868:	0800a4bc 	.word	0x0800a4bc
 800986c:	0800a47c 	.word	0x0800a47c
 8009870:	0800a324 	.word	0x0800a324
 8009874:	0800a32e 	.word	0x0800a32e
 8009878:	080073b5 	.word	0x080073b5
 800987c:	08009601 	.word	0x08009601
 8009880:	0800a32a 	.word	0x0800a32a

08009884 <__swbuf_r>:
 8009884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009886:	460e      	mov	r6, r1
 8009888:	4614      	mov	r4, r2
 800988a:	4605      	mov	r5, r0
 800988c:	b118      	cbz	r0, 8009896 <__swbuf_r+0x12>
 800988e:	6983      	ldr	r3, [r0, #24]
 8009890:	b90b      	cbnz	r3, 8009896 <__swbuf_r+0x12>
 8009892:	f000 f9e7 	bl	8009c64 <__sinit>
 8009896:	4b21      	ldr	r3, [pc, #132]	; (800991c <__swbuf_r+0x98>)
 8009898:	429c      	cmp	r4, r3
 800989a:	d12b      	bne.n	80098f4 <__swbuf_r+0x70>
 800989c:	686c      	ldr	r4, [r5, #4]
 800989e:	69a3      	ldr	r3, [r4, #24]
 80098a0:	60a3      	str	r3, [r4, #8]
 80098a2:	89a3      	ldrh	r3, [r4, #12]
 80098a4:	071a      	lsls	r2, r3, #28
 80098a6:	d52f      	bpl.n	8009908 <__swbuf_r+0x84>
 80098a8:	6923      	ldr	r3, [r4, #16]
 80098aa:	b36b      	cbz	r3, 8009908 <__swbuf_r+0x84>
 80098ac:	6923      	ldr	r3, [r4, #16]
 80098ae:	6820      	ldr	r0, [r4, #0]
 80098b0:	1ac0      	subs	r0, r0, r3
 80098b2:	6963      	ldr	r3, [r4, #20]
 80098b4:	b2f6      	uxtb	r6, r6
 80098b6:	4283      	cmp	r3, r0
 80098b8:	4637      	mov	r7, r6
 80098ba:	dc04      	bgt.n	80098c6 <__swbuf_r+0x42>
 80098bc:	4621      	mov	r1, r4
 80098be:	4628      	mov	r0, r5
 80098c0:	f000 f93c 	bl	8009b3c <_fflush_r>
 80098c4:	bb30      	cbnz	r0, 8009914 <__swbuf_r+0x90>
 80098c6:	68a3      	ldr	r3, [r4, #8]
 80098c8:	3b01      	subs	r3, #1
 80098ca:	60a3      	str	r3, [r4, #8]
 80098cc:	6823      	ldr	r3, [r4, #0]
 80098ce:	1c5a      	adds	r2, r3, #1
 80098d0:	6022      	str	r2, [r4, #0]
 80098d2:	701e      	strb	r6, [r3, #0]
 80098d4:	6963      	ldr	r3, [r4, #20]
 80098d6:	3001      	adds	r0, #1
 80098d8:	4283      	cmp	r3, r0
 80098da:	d004      	beq.n	80098e6 <__swbuf_r+0x62>
 80098dc:	89a3      	ldrh	r3, [r4, #12]
 80098de:	07db      	lsls	r3, r3, #31
 80098e0:	d506      	bpl.n	80098f0 <__swbuf_r+0x6c>
 80098e2:	2e0a      	cmp	r6, #10
 80098e4:	d104      	bne.n	80098f0 <__swbuf_r+0x6c>
 80098e6:	4621      	mov	r1, r4
 80098e8:	4628      	mov	r0, r5
 80098ea:	f000 f927 	bl	8009b3c <_fflush_r>
 80098ee:	b988      	cbnz	r0, 8009914 <__swbuf_r+0x90>
 80098f0:	4638      	mov	r0, r7
 80098f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098f4:	4b0a      	ldr	r3, [pc, #40]	; (8009920 <__swbuf_r+0x9c>)
 80098f6:	429c      	cmp	r4, r3
 80098f8:	d101      	bne.n	80098fe <__swbuf_r+0x7a>
 80098fa:	68ac      	ldr	r4, [r5, #8]
 80098fc:	e7cf      	b.n	800989e <__swbuf_r+0x1a>
 80098fe:	4b09      	ldr	r3, [pc, #36]	; (8009924 <__swbuf_r+0xa0>)
 8009900:	429c      	cmp	r4, r3
 8009902:	bf08      	it	eq
 8009904:	68ec      	ldreq	r4, [r5, #12]
 8009906:	e7ca      	b.n	800989e <__swbuf_r+0x1a>
 8009908:	4621      	mov	r1, r4
 800990a:	4628      	mov	r0, r5
 800990c:	f000 f81a 	bl	8009944 <__swsetup_r>
 8009910:	2800      	cmp	r0, #0
 8009912:	d0cb      	beq.n	80098ac <__swbuf_r+0x28>
 8009914:	f04f 37ff 	mov.w	r7, #4294967295
 8009918:	e7ea      	b.n	80098f0 <__swbuf_r+0x6c>
 800991a:	bf00      	nop
 800991c:	0800a49c 	.word	0x0800a49c
 8009920:	0800a4bc 	.word	0x0800a4bc
 8009924:	0800a47c 	.word	0x0800a47c

08009928 <__ascii_wctomb>:
 8009928:	b149      	cbz	r1, 800993e <__ascii_wctomb+0x16>
 800992a:	2aff      	cmp	r2, #255	; 0xff
 800992c:	bf85      	ittet	hi
 800992e:	238a      	movhi	r3, #138	; 0x8a
 8009930:	6003      	strhi	r3, [r0, #0]
 8009932:	700a      	strbls	r2, [r1, #0]
 8009934:	f04f 30ff 	movhi.w	r0, #4294967295
 8009938:	bf98      	it	ls
 800993a:	2001      	movls	r0, #1
 800993c:	4770      	bx	lr
 800993e:	4608      	mov	r0, r1
 8009940:	4770      	bx	lr
	...

08009944 <__swsetup_r>:
 8009944:	4b32      	ldr	r3, [pc, #200]	; (8009a10 <__swsetup_r+0xcc>)
 8009946:	b570      	push	{r4, r5, r6, lr}
 8009948:	681d      	ldr	r5, [r3, #0]
 800994a:	4606      	mov	r6, r0
 800994c:	460c      	mov	r4, r1
 800994e:	b125      	cbz	r5, 800995a <__swsetup_r+0x16>
 8009950:	69ab      	ldr	r3, [r5, #24]
 8009952:	b913      	cbnz	r3, 800995a <__swsetup_r+0x16>
 8009954:	4628      	mov	r0, r5
 8009956:	f000 f985 	bl	8009c64 <__sinit>
 800995a:	4b2e      	ldr	r3, [pc, #184]	; (8009a14 <__swsetup_r+0xd0>)
 800995c:	429c      	cmp	r4, r3
 800995e:	d10f      	bne.n	8009980 <__swsetup_r+0x3c>
 8009960:	686c      	ldr	r4, [r5, #4]
 8009962:	89a3      	ldrh	r3, [r4, #12]
 8009964:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009968:	0719      	lsls	r1, r3, #28
 800996a:	d42c      	bmi.n	80099c6 <__swsetup_r+0x82>
 800996c:	06dd      	lsls	r5, r3, #27
 800996e:	d411      	bmi.n	8009994 <__swsetup_r+0x50>
 8009970:	2309      	movs	r3, #9
 8009972:	6033      	str	r3, [r6, #0]
 8009974:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009978:	81a3      	strh	r3, [r4, #12]
 800997a:	f04f 30ff 	mov.w	r0, #4294967295
 800997e:	e03e      	b.n	80099fe <__swsetup_r+0xba>
 8009980:	4b25      	ldr	r3, [pc, #148]	; (8009a18 <__swsetup_r+0xd4>)
 8009982:	429c      	cmp	r4, r3
 8009984:	d101      	bne.n	800998a <__swsetup_r+0x46>
 8009986:	68ac      	ldr	r4, [r5, #8]
 8009988:	e7eb      	b.n	8009962 <__swsetup_r+0x1e>
 800998a:	4b24      	ldr	r3, [pc, #144]	; (8009a1c <__swsetup_r+0xd8>)
 800998c:	429c      	cmp	r4, r3
 800998e:	bf08      	it	eq
 8009990:	68ec      	ldreq	r4, [r5, #12]
 8009992:	e7e6      	b.n	8009962 <__swsetup_r+0x1e>
 8009994:	0758      	lsls	r0, r3, #29
 8009996:	d512      	bpl.n	80099be <__swsetup_r+0x7a>
 8009998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800999a:	b141      	cbz	r1, 80099ae <__swsetup_r+0x6a>
 800999c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099a0:	4299      	cmp	r1, r3
 80099a2:	d002      	beq.n	80099aa <__swsetup_r+0x66>
 80099a4:	4630      	mov	r0, r6
 80099a6:	f7ff fb31 	bl	800900c <_free_r>
 80099aa:	2300      	movs	r3, #0
 80099ac:	6363      	str	r3, [r4, #52]	; 0x34
 80099ae:	89a3      	ldrh	r3, [r4, #12]
 80099b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099b4:	81a3      	strh	r3, [r4, #12]
 80099b6:	2300      	movs	r3, #0
 80099b8:	6063      	str	r3, [r4, #4]
 80099ba:	6923      	ldr	r3, [r4, #16]
 80099bc:	6023      	str	r3, [r4, #0]
 80099be:	89a3      	ldrh	r3, [r4, #12]
 80099c0:	f043 0308 	orr.w	r3, r3, #8
 80099c4:	81a3      	strh	r3, [r4, #12]
 80099c6:	6923      	ldr	r3, [r4, #16]
 80099c8:	b94b      	cbnz	r3, 80099de <__swsetup_r+0x9a>
 80099ca:	89a3      	ldrh	r3, [r4, #12]
 80099cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80099d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099d4:	d003      	beq.n	80099de <__swsetup_r+0x9a>
 80099d6:	4621      	mov	r1, r4
 80099d8:	4630      	mov	r0, r6
 80099da:	f000 fa09 	bl	8009df0 <__smakebuf_r>
 80099de:	89a0      	ldrh	r0, [r4, #12]
 80099e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099e4:	f010 0301 	ands.w	r3, r0, #1
 80099e8:	d00a      	beq.n	8009a00 <__swsetup_r+0xbc>
 80099ea:	2300      	movs	r3, #0
 80099ec:	60a3      	str	r3, [r4, #8]
 80099ee:	6963      	ldr	r3, [r4, #20]
 80099f0:	425b      	negs	r3, r3
 80099f2:	61a3      	str	r3, [r4, #24]
 80099f4:	6923      	ldr	r3, [r4, #16]
 80099f6:	b943      	cbnz	r3, 8009a0a <__swsetup_r+0xc6>
 80099f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80099fc:	d1ba      	bne.n	8009974 <__swsetup_r+0x30>
 80099fe:	bd70      	pop	{r4, r5, r6, pc}
 8009a00:	0781      	lsls	r1, r0, #30
 8009a02:	bf58      	it	pl
 8009a04:	6963      	ldrpl	r3, [r4, #20]
 8009a06:	60a3      	str	r3, [r4, #8]
 8009a08:	e7f4      	b.n	80099f4 <__swsetup_r+0xb0>
 8009a0a:	2000      	movs	r0, #0
 8009a0c:	e7f7      	b.n	80099fe <__swsetup_r+0xba>
 8009a0e:	bf00      	nop
 8009a10:	2000001c 	.word	0x2000001c
 8009a14:	0800a49c 	.word	0x0800a49c
 8009a18:	0800a4bc 	.word	0x0800a4bc
 8009a1c:	0800a47c 	.word	0x0800a47c

08009a20 <abort>:
 8009a20:	b508      	push	{r3, lr}
 8009a22:	2006      	movs	r0, #6
 8009a24:	f000 fa54 	bl	8009ed0 <raise>
 8009a28:	2001      	movs	r0, #1
 8009a2a:	f7f7 ff39 	bl	80018a0 <_exit>
	...

08009a30 <__sflush_r>:
 8009a30:	898a      	ldrh	r2, [r1, #12]
 8009a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a36:	4605      	mov	r5, r0
 8009a38:	0710      	lsls	r0, r2, #28
 8009a3a:	460c      	mov	r4, r1
 8009a3c:	d458      	bmi.n	8009af0 <__sflush_r+0xc0>
 8009a3e:	684b      	ldr	r3, [r1, #4]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	dc05      	bgt.n	8009a50 <__sflush_r+0x20>
 8009a44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	dc02      	bgt.n	8009a50 <__sflush_r+0x20>
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a52:	2e00      	cmp	r6, #0
 8009a54:	d0f9      	beq.n	8009a4a <__sflush_r+0x1a>
 8009a56:	2300      	movs	r3, #0
 8009a58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a5c:	682f      	ldr	r7, [r5, #0]
 8009a5e:	602b      	str	r3, [r5, #0]
 8009a60:	d032      	beq.n	8009ac8 <__sflush_r+0x98>
 8009a62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a64:	89a3      	ldrh	r3, [r4, #12]
 8009a66:	075a      	lsls	r2, r3, #29
 8009a68:	d505      	bpl.n	8009a76 <__sflush_r+0x46>
 8009a6a:	6863      	ldr	r3, [r4, #4]
 8009a6c:	1ac0      	subs	r0, r0, r3
 8009a6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a70:	b10b      	cbz	r3, 8009a76 <__sflush_r+0x46>
 8009a72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a74:	1ac0      	subs	r0, r0, r3
 8009a76:	2300      	movs	r3, #0
 8009a78:	4602      	mov	r2, r0
 8009a7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a7c:	6a21      	ldr	r1, [r4, #32]
 8009a7e:	4628      	mov	r0, r5
 8009a80:	47b0      	blx	r6
 8009a82:	1c43      	adds	r3, r0, #1
 8009a84:	89a3      	ldrh	r3, [r4, #12]
 8009a86:	d106      	bne.n	8009a96 <__sflush_r+0x66>
 8009a88:	6829      	ldr	r1, [r5, #0]
 8009a8a:	291d      	cmp	r1, #29
 8009a8c:	d82c      	bhi.n	8009ae8 <__sflush_r+0xb8>
 8009a8e:	4a2a      	ldr	r2, [pc, #168]	; (8009b38 <__sflush_r+0x108>)
 8009a90:	40ca      	lsrs	r2, r1
 8009a92:	07d6      	lsls	r6, r2, #31
 8009a94:	d528      	bpl.n	8009ae8 <__sflush_r+0xb8>
 8009a96:	2200      	movs	r2, #0
 8009a98:	6062      	str	r2, [r4, #4]
 8009a9a:	04d9      	lsls	r1, r3, #19
 8009a9c:	6922      	ldr	r2, [r4, #16]
 8009a9e:	6022      	str	r2, [r4, #0]
 8009aa0:	d504      	bpl.n	8009aac <__sflush_r+0x7c>
 8009aa2:	1c42      	adds	r2, r0, #1
 8009aa4:	d101      	bne.n	8009aaa <__sflush_r+0x7a>
 8009aa6:	682b      	ldr	r3, [r5, #0]
 8009aa8:	b903      	cbnz	r3, 8009aac <__sflush_r+0x7c>
 8009aaa:	6560      	str	r0, [r4, #84]	; 0x54
 8009aac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009aae:	602f      	str	r7, [r5, #0]
 8009ab0:	2900      	cmp	r1, #0
 8009ab2:	d0ca      	beq.n	8009a4a <__sflush_r+0x1a>
 8009ab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ab8:	4299      	cmp	r1, r3
 8009aba:	d002      	beq.n	8009ac2 <__sflush_r+0x92>
 8009abc:	4628      	mov	r0, r5
 8009abe:	f7ff faa5 	bl	800900c <_free_r>
 8009ac2:	2000      	movs	r0, #0
 8009ac4:	6360      	str	r0, [r4, #52]	; 0x34
 8009ac6:	e7c1      	b.n	8009a4c <__sflush_r+0x1c>
 8009ac8:	6a21      	ldr	r1, [r4, #32]
 8009aca:	2301      	movs	r3, #1
 8009acc:	4628      	mov	r0, r5
 8009ace:	47b0      	blx	r6
 8009ad0:	1c41      	adds	r1, r0, #1
 8009ad2:	d1c7      	bne.n	8009a64 <__sflush_r+0x34>
 8009ad4:	682b      	ldr	r3, [r5, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d0c4      	beq.n	8009a64 <__sflush_r+0x34>
 8009ada:	2b1d      	cmp	r3, #29
 8009adc:	d001      	beq.n	8009ae2 <__sflush_r+0xb2>
 8009ade:	2b16      	cmp	r3, #22
 8009ae0:	d101      	bne.n	8009ae6 <__sflush_r+0xb6>
 8009ae2:	602f      	str	r7, [r5, #0]
 8009ae4:	e7b1      	b.n	8009a4a <__sflush_r+0x1a>
 8009ae6:	89a3      	ldrh	r3, [r4, #12]
 8009ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aec:	81a3      	strh	r3, [r4, #12]
 8009aee:	e7ad      	b.n	8009a4c <__sflush_r+0x1c>
 8009af0:	690f      	ldr	r7, [r1, #16]
 8009af2:	2f00      	cmp	r7, #0
 8009af4:	d0a9      	beq.n	8009a4a <__sflush_r+0x1a>
 8009af6:	0793      	lsls	r3, r2, #30
 8009af8:	680e      	ldr	r6, [r1, #0]
 8009afa:	bf08      	it	eq
 8009afc:	694b      	ldreq	r3, [r1, #20]
 8009afe:	600f      	str	r7, [r1, #0]
 8009b00:	bf18      	it	ne
 8009b02:	2300      	movne	r3, #0
 8009b04:	eba6 0807 	sub.w	r8, r6, r7
 8009b08:	608b      	str	r3, [r1, #8]
 8009b0a:	f1b8 0f00 	cmp.w	r8, #0
 8009b0e:	dd9c      	ble.n	8009a4a <__sflush_r+0x1a>
 8009b10:	6a21      	ldr	r1, [r4, #32]
 8009b12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b14:	4643      	mov	r3, r8
 8009b16:	463a      	mov	r2, r7
 8009b18:	4628      	mov	r0, r5
 8009b1a:	47b0      	blx	r6
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	dc06      	bgt.n	8009b2e <__sflush_r+0xfe>
 8009b20:	89a3      	ldrh	r3, [r4, #12]
 8009b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b26:	81a3      	strh	r3, [r4, #12]
 8009b28:	f04f 30ff 	mov.w	r0, #4294967295
 8009b2c:	e78e      	b.n	8009a4c <__sflush_r+0x1c>
 8009b2e:	4407      	add	r7, r0
 8009b30:	eba8 0800 	sub.w	r8, r8, r0
 8009b34:	e7e9      	b.n	8009b0a <__sflush_r+0xda>
 8009b36:	bf00      	nop
 8009b38:	20400001 	.word	0x20400001

08009b3c <_fflush_r>:
 8009b3c:	b538      	push	{r3, r4, r5, lr}
 8009b3e:	690b      	ldr	r3, [r1, #16]
 8009b40:	4605      	mov	r5, r0
 8009b42:	460c      	mov	r4, r1
 8009b44:	b913      	cbnz	r3, 8009b4c <_fflush_r+0x10>
 8009b46:	2500      	movs	r5, #0
 8009b48:	4628      	mov	r0, r5
 8009b4a:	bd38      	pop	{r3, r4, r5, pc}
 8009b4c:	b118      	cbz	r0, 8009b56 <_fflush_r+0x1a>
 8009b4e:	6983      	ldr	r3, [r0, #24]
 8009b50:	b90b      	cbnz	r3, 8009b56 <_fflush_r+0x1a>
 8009b52:	f000 f887 	bl	8009c64 <__sinit>
 8009b56:	4b14      	ldr	r3, [pc, #80]	; (8009ba8 <_fflush_r+0x6c>)
 8009b58:	429c      	cmp	r4, r3
 8009b5a:	d11b      	bne.n	8009b94 <_fflush_r+0x58>
 8009b5c:	686c      	ldr	r4, [r5, #4]
 8009b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d0ef      	beq.n	8009b46 <_fflush_r+0xa>
 8009b66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b68:	07d0      	lsls	r0, r2, #31
 8009b6a:	d404      	bmi.n	8009b76 <_fflush_r+0x3a>
 8009b6c:	0599      	lsls	r1, r3, #22
 8009b6e:	d402      	bmi.n	8009b76 <_fflush_r+0x3a>
 8009b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b72:	f000 f915 	bl	8009da0 <__retarget_lock_acquire_recursive>
 8009b76:	4628      	mov	r0, r5
 8009b78:	4621      	mov	r1, r4
 8009b7a:	f7ff ff59 	bl	8009a30 <__sflush_r>
 8009b7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b80:	07da      	lsls	r2, r3, #31
 8009b82:	4605      	mov	r5, r0
 8009b84:	d4e0      	bmi.n	8009b48 <_fflush_r+0xc>
 8009b86:	89a3      	ldrh	r3, [r4, #12]
 8009b88:	059b      	lsls	r3, r3, #22
 8009b8a:	d4dd      	bmi.n	8009b48 <_fflush_r+0xc>
 8009b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b8e:	f000 f908 	bl	8009da2 <__retarget_lock_release_recursive>
 8009b92:	e7d9      	b.n	8009b48 <_fflush_r+0xc>
 8009b94:	4b05      	ldr	r3, [pc, #20]	; (8009bac <_fflush_r+0x70>)
 8009b96:	429c      	cmp	r4, r3
 8009b98:	d101      	bne.n	8009b9e <_fflush_r+0x62>
 8009b9a:	68ac      	ldr	r4, [r5, #8]
 8009b9c:	e7df      	b.n	8009b5e <_fflush_r+0x22>
 8009b9e:	4b04      	ldr	r3, [pc, #16]	; (8009bb0 <_fflush_r+0x74>)
 8009ba0:	429c      	cmp	r4, r3
 8009ba2:	bf08      	it	eq
 8009ba4:	68ec      	ldreq	r4, [r5, #12]
 8009ba6:	e7da      	b.n	8009b5e <_fflush_r+0x22>
 8009ba8:	0800a49c 	.word	0x0800a49c
 8009bac:	0800a4bc 	.word	0x0800a4bc
 8009bb0:	0800a47c 	.word	0x0800a47c

08009bb4 <std>:
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	b510      	push	{r4, lr}
 8009bb8:	4604      	mov	r4, r0
 8009bba:	e9c0 3300 	strd	r3, r3, [r0]
 8009bbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bc2:	6083      	str	r3, [r0, #8]
 8009bc4:	8181      	strh	r1, [r0, #12]
 8009bc6:	6643      	str	r3, [r0, #100]	; 0x64
 8009bc8:	81c2      	strh	r2, [r0, #14]
 8009bca:	6183      	str	r3, [r0, #24]
 8009bcc:	4619      	mov	r1, r3
 8009bce:	2208      	movs	r2, #8
 8009bd0:	305c      	adds	r0, #92	; 0x5c
 8009bd2:	f7fd fb47 	bl	8007264 <memset>
 8009bd6:	4b05      	ldr	r3, [pc, #20]	; (8009bec <std+0x38>)
 8009bd8:	6263      	str	r3, [r4, #36]	; 0x24
 8009bda:	4b05      	ldr	r3, [pc, #20]	; (8009bf0 <std+0x3c>)
 8009bdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8009bde:	4b05      	ldr	r3, [pc, #20]	; (8009bf4 <std+0x40>)
 8009be0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009be2:	4b05      	ldr	r3, [pc, #20]	; (8009bf8 <std+0x44>)
 8009be4:	6224      	str	r4, [r4, #32]
 8009be6:	6323      	str	r3, [r4, #48]	; 0x30
 8009be8:	bd10      	pop	{r4, pc}
 8009bea:	bf00      	nop
 8009bec:	08009f09 	.word	0x08009f09
 8009bf0:	08009f2b 	.word	0x08009f2b
 8009bf4:	08009f63 	.word	0x08009f63
 8009bf8:	08009f87 	.word	0x08009f87

08009bfc <_cleanup_r>:
 8009bfc:	4901      	ldr	r1, [pc, #4]	; (8009c04 <_cleanup_r+0x8>)
 8009bfe:	f000 b8af 	b.w	8009d60 <_fwalk_reent>
 8009c02:	bf00      	nop
 8009c04:	08009b3d 	.word	0x08009b3d

08009c08 <__sfmoreglue>:
 8009c08:	b570      	push	{r4, r5, r6, lr}
 8009c0a:	2268      	movs	r2, #104	; 0x68
 8009c0c:	1e4d      	subs	r5, r1, #1
 8009c0e:	4355      	muls	r5, r2
 8009c10:	460e      	mov	r6, r1
 8009c12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c16:	f7ff fa65 	bl	80090e4 <_malloc_r>
 8009c1a:	4604      	mov	r4, r0
 8009c1c:	b140      	cbz	r0, 8009c30 <__sfmoreglue+0x28>
 8009c1e:	2100      	movs	r1, #0
 8009c20:	e9c0 1600 	strd	r1, r6, [r0]
 8009c24:	300c      	adds	r0, #12
 8009c26:	60a0      	str	r0, [r4, #8]
 8009c28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c2c:	f7fd fb1a 	bl	8007264 <memset>
 8009c30:	4620      	mov	r0, r4
 8009c32:	bd70      	pop	{r4, r5, r6, pc}

08009c34 <__sfp_lock_acquire>:
 8009c34:	4801      	ldr	r0, [pc, #4]	; (8009c3c <__sfp_lock_acquire+0x8>)
 8009c36:	f000 b8b3 	b.w	8009da0 <__retarget_lock_acquire_recursive>
 8009c3a:	bf00      	nop
 8009c3c:	200003c5 	.word	0x200003c5

08009c40 <__sfp_lock_release>:
 8009c40:	4801      	ldr	r0, [pc, #4]	; (8009c48 <__sfp_lock_release+0x8>)
 8009c42:	f000 b8ae 	b.w	8009da2 <__retarget_lock_release_recursive>
 8009c46:	bf00      	nop
 8009c48:	200003c5 	.word	0x200003c5

08009c4c <__sinit_lock_acquire>:
 8009c4c:	4801      	ldr	r0, [pc, #4]	; (8009c54 <__sinit_lock_acquire+0x8>)
 8009c4e:	f000 b8a7 	b.w	8009da0 <__retarget_lock_acquire_recursive>
 8009c52:	bf00      	nop
 8009c54:	200003c6 	.word	0x200003c6

08009c58 <__sinit_lock_release>:
 8009c58:	4801      	ldr	r0, [pc, #4]	; (8009c60 <__sinit_lock_release+0x8>)
 8009c5a:	f000 b8a2 	b.w	8009da2 <__retarget_lock_release_recursive>
 8009c5e:	bf00      	nop
 8009c60:	200003c6 	.word	0x200003c6

08009c64 <__sinit>:
 8009c64:	b510      	push	{r4, lr}
 8009c66:	4604      	mov	r4, r0
 8009c68:	f7ff fff0 	bl	8009c4c <__sinit_lock_acquire>
 8009c6c:	69a3      	ldr	r3, [r4, #24]
 8009c6e:	b11b      	cbz	r3, 8009c78 <__sinit+0x14>
 8009c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c74:	f7ff bff0 	b.w	8009c58 <__sinit_lock_release>
 8009c78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c7c:	6523      	str	r3, [r4, #80]	; 0x50
 8009c7e:	4b13      	ldr	r3, [pc, #76]	; (8009ccc <__sinit+0x68>)
 8009c80:	4a13      	ldr	r2, [pc, #76]	; (8009cd0 <__sinit+0x6c>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c86:	42a3      	cmp	r3, r4
 8009c88:	bf04      	itt	eq
 8009c8a:	2301      	moveq	r3, #1
 8009c8c:	61a3      	streq	r3, [r4, #24]
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f000 f820 	bl	8009cd4 <__sfp>
 8009c94:	6060      	str	r0, [r4, #4]
 8009c96:	4620      	mov	r0, r4
 8009c98:	f000 f81c 	bl	8009cd4 <__sfp>
 8009c9c:	60a0      	str	r0, [r4, #8]
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f000 f818 	bl	8009cd4 <__sfp>
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	60e0      	str	r0, [r4, #12]
 8009ca8:	2104      	movs	r1, #4
 8009caa:	6860      	ldr	r0, [r4, #4]
 8009cac:	f7ff ff82 	bl	8009bb4 <std>
 8009cb0:	68a0      	ldr	r0, [r4, #8]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	2109      	movs	r1, #9
 8009cb6:	f7ff ff7d 	bl	8009bb4 <std>
 8009cba:	68e0      	ldr	r0, [r4, #12]
 8009cbc:	2202      	movs	r2, #2
 8009cbe:	2112      	movs	r1, #18
 8009cc0:	f7ff ff78 	bl	8009bb4 <std>
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	61a3      	str	r3, [r4, #24]
 8009cc8:	e7d2      	b.n	8009c70 <__sinit+0xc>
 8009cca:	bf00      	nop
 8009ccc:	0800a104 	.word	0x0800a104
 8009cd0:	08009bfd 	.word	0x08009bfd

08009cd4 <__sfp>:
 8009cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd6:	4607      	mov	r7, r0
 8009cd8:	f7ff ffac 	bl	8009c34 <__sfp_lock_acquire>
 8009cdc:	4b1e      	ldr	r3, [pc, #120]	; (8009d58 <__sfp+0x84>)
 8009cde:	681e      	ldr	r6, [r3, #0]
 8009ce0:	69b3      	ldr	r3, [r6, #24]
 8009ce2:	b913      	cbnz	r3, 8009cea <__sfp+0x16>
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	f7ff ffbd 	bl	8009c64 <__sinit>
 8009cea:	3648      	adds	r6, #72	; 0x48
 8009cec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	d503      	bpl.n	8009cfc <__sfp+0x28>
 8009cf4:	6833      	ldr	r3, [r6, #0]
 8009cf6:	b30b      	cbz	r3, 8009d3c <__sfp+0x68>
 8009cf8:	6836      	ldr	r6, [r6, #0]
 8009cfa:	e7f7      	b.n	8009cec <__sfp+0x18>
 8009cfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d00:	b9d5      	cbnz	r5, 8009d38 <__sfp+0x64>
 8009d02:	4b16      	ldr	r3, [pc, #88]	; (8009d5c <__sfp+0x88>)
 8009d04:	60e3      	str	r3, [r4, #12]
 8009d06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d0a:	6665      	str	r5, [r4, #100]	; 0x64
 8009d0c:	f000 f847 	bl	8009d9e <__retarget_lock_init_recursive>
 8009d10:	f7ff ff96 	bl	8009c40 <__sfp_lock_release>
 8009d14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d1c:	6025      	str	r5, [r4, #0]
 8009d1e:	61a5      	str	r5, [r4, #24]
 8009d20:	2208      	movs	r2, #8
 8009d22:	4629      	mov	r1, r5
 8009d24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d28:	f7fd fa9c 	bl	8007264 <memset>
 8009d2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d34:	4620      	mov	r0, r4
 8009d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d38:	3468      	adds	r4, #104	; 0x68
 8009d3a:	e7d9      	b.n	8009cf0 <__sfp+0x1c>
 8009d3c:	2104      	movs	r1, #4
 8009d3e:	4638      	mov	r0, r7
 8009d40:	f7ff ff62 	bl	8009c08 <__sfmoreglue>
 8009d44:	4604      	mov	r4, r0
 8009d46:	6030      	str	r0, [r6, #0]
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	d1d5      	bne.n	8009cf8 <__sfp+0x24>
 8009d4c:	f7ff ff78 	bl	8009c40 <__sfp_lock_release>
 8009d50:	230c      	movs	r3, #12
 8009d52:	603b      	str	r3, [r7, #0]
 8009d54:	e7ee      	b.n	8009d34 <__sfp+0x60>
 8009d56:	bf00      	nop
 8009d58:	0800a104 	.word	0x0800a104
 8009d5c:	ffff0001 	.word	0xffff0001

08009d60 <_fwalk_reent>:
 8009d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d64:	4606      	mov	r6, r0
 8009d66:	4688      	mov	r8, r1
 8009d68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d6c:	2700      	movs	r7, #0
 8009d6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d72:	f1b9 0901 	subs.w	r9, r9, #1
 8009d76:	d505      	bpl.n	8009d84 <_fwalk_reent+0x24>
 8009d78:	6824      	ldr	r4, [r4, #0]
 8009d7a:	2c00      	cmp	r4, #0
 8009d7c:	d1f7      	bne.n	8009d6e <_fwalk_reent+0xe>
 8009d7e:	4638      	mov	r0, r7
 8009d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d84:	89ab      	ldrh	r3, [r5, #12]
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d907      	bls.n	8009d9a <_fwalk_reent+0x3a>
 8009d8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	d003      	beq.n	8009d9a <_fwalk_reent+0x3a>
 8009d92:	4629      	mov	r1, r5
 8009d94:	4630      	mov	r0, r6
 8009d96:	47c0      	blx	r8
 8009d98:	4307      	orrs	r7, r0
 8009d9a:	3568      	adds	r5, #104	; 0x68
 8009d9c:	e7e9      	b.n	8009d72 <_fwalk_reent+0x12>

08009d9e <__retarget_lock_init_recursive>:
 8009d9e:	4770      	bx	lr

08009da0 <__retarget_lock_acquire_recursive>:
 8009da0:	4770      	bx	lr

08009da2 <__retarget_lock_release_recursive>:
 8009da2:	4770      	bx	lr

08009da4 <__swhatbuf_r>:
 8009da4:	b570      	push	{r4, r5, r6, lr}
 8009da6:	460e      	mov	r6, r1
 8009da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dac:	2900      	cmp	r1, #0
 8009dae:	b096      	sub	sp, #88	; 0x58
 8009db0:	4614      	mov	r4, r2
 8009db2:	461d      	mov	r5, r3
 8009db4:	da08      	bge.n	8009dc8 <__swhatbuf_r+0x24>
 8009db6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	602a      	str	r2, [r5, #0]
 8009dbe:	061a      	lsls	r2, r3, #24
 8009dc0:	d410      	bmi.n	8009de4 <__swhatbuf_r+0x40>
 8009dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dc6:	e00e      	b.n	8009de6 <__swhatbuf_r+0x42>
 8009dc8:	466a      	mov	r2, sp
 8009dca:	f000 f903 	bl	8009fd4 <_fstat_r>
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	dbf1      	blt.n	8009db6 <__swhatbuf_r+0x12>
 8009dd2:	9a01      	ldr	r2, [sp, #4]
 8009dd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009dd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ddc:	425a      	negs	r2, r3
 8009dde:	415a      	adcs	r2, r3
 8009de0:	602a      	str	r2, [r5, #0]
 8009de2:	e7ee      	b.n	8009dc2 <__swhatbuf_r+0x1e>
 8009de4:	2340      	movs	r3, #64	; 0x40
 8009de6:	2000      	movs	r0, #0
 8009de8:	6023      	str	r3, [r4, #0]
 8009dea:	b016      	add	sp, #88	; 0x58
 8009dec:	bd70      	pop	{r4, r5, r6, pc}
	...

08009df0 <__smakebuf_r>:
 8009df0:	898b      	ldrh	r3, [r1, #12]
 8009df2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009df4:	079d      	lsls	r5, r3, #30
 8009df6:	4606      	mov	r6, r0
 8009df8:	460c      	mov	r4, r1
 8009dfa:	d507      	bpl.n	8009e0c <__smakebuf_r+0x1c>
 8009dfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e00:	6023      	str	r3, [r4, #0]
 8009e02:	6123      	str	r3, [r4, #16]
 8009e04:	2301      	movs	r3, #1
 8009e06:	6163      	str	r3, [r4, #20]
 8009e08:	b002      	add	sp, #8
 8009e0a:	bd70      	pop	{r4, r5, r6, pc}
 8009e0c:	ab01      	add	r3, sp, #4
 8009e0e:	466a      	mov	r2, sp
 8009e10:	f7ff ffc8 	bl	8009da4 <__swhatbuf_r>
 8009e14:	9900      	ldr	r1, [sp, #0]
 8009e16:	4605      	mov	r5, r0
 8009e18:	4630      	mov	r0, r6
 8009e1a:	f7ff f963 	bl	80090e4 <_malloc_r>
 8009e1e:	b948      	cbnz	r0, 8009e34 <__smakebuf_r+0x44>
 8009e20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e24:	059a      	lsls	r2, r3, #22
 8009e26:	d4ef      	bmi.n	8009e08 <__smakebuf_r+0x18>
 8009e28:	f023 0303 	bic.w	r3, r3, #3
 8009e2c:	f043 0302 	orr.w	r3, r3, #2
 8009e30:	81a3      	strh	r3, [r4, #12]
 8009e32:	e7e3      	b.n	8009dfc <__smakebuf_r+0xc>
 8009e34:	4b0d      	ldr	r3, [pc, #52]	; (8009e6c <__smakebuf_r+0x7c>)
 8009e36:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e38:	89a3      	ldrh	r3, [r4, #12]
 8009e3a:	6020      	str	r0, [r4, #0]
 8009e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e40:	81a3      	strh	r3, [r4, #12]
 8009e42:	9b00      	ldr	r3, [sp, #0]
 8009e44:	6163      	str	r3, [r4, #20]
 8009e46:	9b01      	ldr	r3, [sp, #4]
 8009e48:	6120      	str	r0, [r4, #16]
 8009e4a:	b15b      	cbz	r3, 8009e64 <__smakebuf_r+0x74>
 8009e4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e50:	4630      	mov	r0, r6
 8009e52:	f000 f8d1 	bl	8009ff8 <_isatty_r>
 8009e56:	b128      	cbz	r0, 8009e64 <__smakebuf_r+0x74>
 8009e58:	89a3      	ldrh	r3, [r4, #12]
 8009e5a:	f023 0303 	bic.w	r3, r3, #3
 8009e5e:	f043 0301 	orr.w	r3, r3, #1
 8009e62:	81a3      	strh	r3, [r4, #12]
 8009e64:	89a0      	ldrh	r0, [r4, #12]
 8009e66:	4305      	orrs	r5, r0
 8009e68:	81a5      	strh	r5, [r4, #12]
 8009e6a:	e7cd      	b.n	8009e08 <__smakebuf_r+0x18>
 8009e6c:	08009bfd 	.word	0x08009bfd

08009e70 <_malloc_usable_size_r>:
 8009e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e74:	1f18      	subs	r0, r3, #4
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	bfbc      	itt	lt
 8009e7a:	580b      	ldrlt	r3, [r1, r0]
 8009e7c:	18c0      	addlt	r0, r0, r3
 8009e7e:	4770      	bx	lr

08009e80 <_raise_r>:
 8009e80:	291f      	cmp	r1, #31
 8009e82:	b538      	push	{r3, r4, r5, lr}
 8009e84:	4604      	mov	r4, r0
 8009e86:	460d      	mov	r5, r1
 8009e88:	d904      	bls.n	8009e94 <_raise_r+0x14>
 8009e8a:	2316      	movs	r3, #22
 8009e8c:	6003      	str	r3, [r0, #0]
 8009e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e92:	bd38      	pop	{r3, r4, r5, pc}
 8009e94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e96:	b112      	cbz	r2, 8009e9e <_raise_r+0x1e>
 8009e98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e9c:	b94b      	cbnz	r3, 8009eb2 <_raise_r+0x32>
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	f000 f830 	bl	8009f04 <_getpid_r>
 8009ea4:	462a      	mov	r2, r5
 8009ea6:	4601      	mov	r1, r0
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009eae:	f000 b817 	b.w	8009ee0 <_kill_r>
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d00a      	beq.n	8009ecc <_raise_r+0x4c>
 8009eb6:	1c59      	adds	r1, r3, #1
 8009eb8:	d103      	bne.n	8009ec2 <_raise_r+0x42>
 8009eba:	2316      	movs	r3, #22
 8009ebc:	6003      	str	r3, [r0, #0]
 8009ebe:	2001      	movs	r0, #1
 8009ec0:	e7e7      	b.n	8009e92 <_raise_r+0x12>
 8009ec2:	2400      	movs	r4, #0
 8009ec4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009ec8:	4628      	mov	r0, r5
 8009eca:	4798      	blx	r3
 8009ecc:	2000      	movs	r0, #0
 8009ece:	e7e0      	b.n	8009e92 <_raise_r+0x12>

08009ed0 <raise>:
 8009ed0:	4b02      	ldr	r3, [pc, #8]	; (8009edc <raise+0xc>)
 8009ed2:	4601      	mov	r1, r0
 8009ed4:	6818      	ldr	r0, [r3, #0]
 8009ed6:	f7ff bfd3 	b.w	8009e80 <_raise_r>
 8009eda:	bf00      	nop
 8009edc:	2000001c 	.word	0x2000001c

08009ee0 <_kill_r>:
 8009ee0:	b538      	push	{r3, r4, r5, lr}
 8009ee2:	4d07      	ldr	r5, [pc, #28]	; (8009f00 <_kill_r+0x20>)
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	4604      	mov	r4, r0
 8009ee8:	4608      	mov	r0, r1
 8009eea:	4611      	mov	r1, r2
 8009eec:	602b      	str	r3, [r5, #0]
 8009eee:	f7f7 fcc7 	bl	8001880 <_kill>
 8009ef2:	1c43      	adds	r3, r0, #1
 8009ef4:	d102      	bne.n	8009efc <_kill_r+0x1c>
 8009ef6:	682b      	ldr	r3, [r5, #0]
 8009ef8:	b103      	cbz	r3, 8009efc <_kill_r+0x1c>
 8009efa:	6023      	str	r3, [r4, #0]
 8009efc:	bd38      	pop	{r3, r4, r5, pc}
 8009efe:	bf00      	nop
 8009f00:	200003c0 	.word	0x200003c0

08009f04 <_getpid_r>:
 8009f04:	f7f7 bcb4 	b.w	8001870 <_getpid>

08009f08 <__sread>:
 8009f08:	b510      	push	{r4, lr}
 8009f0a:	460c      	mov	r4, r1
 8009f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f10:	f000 f894 	bl	800a03c <_read_r>
 8009f14:	2800      	cmp	r0, #0
 8009f16:	bfab      	itete	ge
 8009f18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f1a:	89a3      	ldrhlt	r3, [r4, #12]
 8009f1c:	181b      	addge	r3, r3, r0
 8009f1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f22:	bfac      	ite	ge
 8009f24:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f26:	81a3      	strhlt	r3, [r4, #12]
 8009f28:	bd10      	pop	{r4, pc}

08009f2a <__swrite>:
 8009f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f2e:	461f      	mov	r7, r3
 8009f30:	898b      	ldrh	r3, [r1, #12]
 8009f32:	05db      	lsls	r3, r3, #23
 8009f34:	4605      	mov	r5, r0
 8009f36:	460c      	mov	r4, r1
 8009f38:	4616      	mov	r6, r2
 8009f3a:	d505      	bpl.n	8009f48 <__swrite+0x1e>
 8009f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f40:	2302      	movs	r3, #2
 8009f42:	2200      	movs	r2, #0
 8009f44:	f000 f868 	bl	800a018 <_lseek_r>
 8009f48:	89a3      	ldrh	r3, [r4, #12]
 8009f4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f52:	81a3      	strh	r3, [r4, #12]
 8009f54:	4632      	mov	r2, r6
 8009f56:	463b      	mov	r3, r7
 8009f58:	4628      	mov	r0, r5
 8009f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f5e:	f000 b817 	b.w	8009f90 <_write_r>

08009f62 <__sseek>:
 8009f62:	b510      	push	{r4, lr}
 8009f64:	460c      	mov	r4, r1
 8009f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f6a:	f000 f855 	bl	800a018 <_lseek_r>
 8009f6e:	1c43      	adds	r3, r0, #1
 8009f70:	89a3      	ldrh	r3, [r4, #12]
 8009f72:	bf15      	itete	ne
 8009f74:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f7e:	81a3      	strheq	r3, [r4, #12]
 8009f80:	bf18      	it	ne
 8009f82:	81a3      	strhne	r3, [r4, #12]
 8009f84:	bd10      	pop	{r4, pc}

08009f86 <__sclose>:
 8009f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f8a:	f000 b813 	b.w	8009fb4 <_close_r>
	...

08009f90 <_write_r>:
 8009f90:	b538      	push	{r3, r4, r5, lr}
 8009f92:	4d07      	ldr	r5, [pc, #28]	; (8009fb0 <_write_r+0x20>)
 8009f94:	4604      	mov	r4, r0
 8009f96:	4608      	mov	r0, r1
 8009f98:	4611      	mov	r1, r2
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	602a      	str	r2, [r5, #0]
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	f7f7 fca5 	bl	80018ee <_write>
 8009fa4:	1c43      	adds	r3, r0, #1
 8009fa6:	d102      	bne.n	8009fae <_write_r+0x1e>
 8009fa8:	682b      	ldr	r3, [r5, #0]
 8009faa:	b103      	cbz	r3, 8009fae <_write_r+0x1e>
 8009fac:	6023      	str	r3, [r4, #0]
 8009fae:	bd38      	pop	{r3, r4, r5, pc}
 8009fb0:	200003c0 	.word	0x200003c0

08009fb4 <_close_r>:
 8009fb4:	b538      	push	{r3, r4, r5, lr}
 8009fb6:	4d06      	ldr	r5, [pc, #24]	; (8009fd0 <_close_r+0x1c>)
 8009fb8:	2300      	movs	r3, #0
 8009fba:	4604      	mov	r4, r0
 8009fbc:	4608      	mov	r0, r1
 8009fbe:	602b      	str	r3, [r5, #0]
 8009fc0:	f7f7 fcb1 	bl	8001926 <_close>
 8009fc4:	1c43      	adds	r3, r0, #1
 8009fc6:	d102      	bne.n	8009fce <_close_r+0x1a>
 8009fc8:	682b      	ldr	r3, [r5, #0]
 8009fca:	b103      	cbz	r3, 8009fce <_close_r+0x1a>
 8009fcc:	6023      	str	r3, [r4, #0]
 8009fce:	bd38      	pop	{r3, r4, r5, pc}
 8009fd0:	200003c0 	.word	0x200003c0

08009fd4 <_fstat_r>:
 8009fd4:	b538      	push	{r3, r4, r5, lr}
 8009fd6:	4d07      	ldr	r5, [pc, #28]	; (8009ff4 <_fstat_r+0x20>)
 8009fd8:	2300      	movs	r3, #0
 8009fda:	4604      	mov	r4, r0
 8009fdc:	4608      	mov	r0, r1
 8009fde:	4611      	mov	r1, r2
 8009fe0:	602b      	str	r3, [r5, #0]
 8009fe2:	f7f7 fcac 	bl	800193e <_fstat>
 8009fe6:	1c43      	adds	r3, r0, #1
 8009fe8:	d102      	bne.n	8009ff0 <_fstat_r+0x1c>
 8009fea:	682b      	ldr	r3, [r5, #0]
 8009fec:	b103      	cbz	r3, 8009ff0 <_fstat_r+0x1c>
 8009fee:	6023      	str	r3, [r4, #0]
 8009ff0:	bd38      	pop	{r3, r4, r5, pc}
 8009ff2:	bf00      	nop
 8009ff4:	200003c0 	.word	0x200003c0

08009ff8 <_isatty_r>:
 8009ff8:	b538      	push	{r3, r4, r5, lr}
 8009ffa:	4d06      	ldr	r5, [pc, #24]	; (800a014 <_isatty_r+0x1c>)
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	4604      	mov	r4, r0
 800a000:	4608      	mov	r0, r1
 800a002:	602b      	str	r3, [r5, #0]
 800a004:	f7f7 fcab 	bl	800195e <_isatty>
 800a008:	1c43      	adds	r3, r0, #1
 800a00a:	d102      	bne.n	800a012 <_isatty_r+0x1a>
 800a00c:	682b      	ldr	r3, [r5, #0]
 800a00e:	b103      	cbz	r3, 800a012 <_isatty_r+0x1a>
 800a010:	6023      	str	r3, [r4, #0]
 800a012:	bd38      	pop	{r3, r4, r5, pc}
 800a014:	200003c0 	.word	0x200003c0

0800a018 <_lseek_r>:
 800a018:	b538      	push	{r3, r4, r5, lr}
 800a01a:	4d07      	ldr	r5, [pc, #28]	; (800a038 <_lseek_r+0x20>)
 800a01c:	4604      	mov	r4, r0
 800a01e:	4608      	mov	r0, r1
 800a020:	4611      	mov	r1, r2
 800a022:	2200      	movs	r2, #0
 800a024:	602a      	str	r2, [r5, #0]
 800a026:	461a      	mov	r2, r3
 800a028:	f7f7 fca4 	bl	8001974 <_lseek>
 800a02c:	1c43      	adds	r3, r0, #1
 800a02e:	d102      	bne.n	800a036 <_lseek_r+0x1e>
 800a030:	682b      	ldr	r3, [r5, #0]
 800a032:	b103      	cbz	r3, 800a036 <_lseek_r+0x1e>
 800a034:	6023      	str	r3, [r4, #0]
 800a036:	bd38      	pop	{r3, r4, r5, pc}
 800a038:	200003c0 	.word	0x200003c0

0800a03c <_read_r>:
 800a03c:	b538      	push	{r3, r4, r5, lr}
 800a03e:	4d07      	ldr	r5, [pc, #28]	; (800a05c <_read_r+0x20>)
 800a040:	4604      	mov	r4, r0
 800a042:	4608      	mov	r0, r1
 800a044:	4611      	mov	r1, r2
 800a046:	2200      	movs	r2, #0
 800a048:	602a      	str	r2, [r5, #0]
 800a04a:	461a      	mov	r2, r3
 800a04c:	f7f7 fc32 	bl	80018b4 <_read>
 800a050:	1c43      	adds	r3, r0, #1
 800a052:	d102      	bne.n	800a05a <_read_r+0x1e>
 800a054:	682b      	ldr	r3, [r5, #0]
 800a056:	b103      	cbz	r3, 800a05a <_read_r+0x1e>
 800a058:	6023      	str	r3, [r4, #0]
 800a05a:	bd38      	pop	{r3, r4, r5, pc}
 800a05c:	200003c0 	.word	0x200003c0

0800a060 <_init>:
 800a060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a062:	bf00      	nop
 800a064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a066:	bc08      	pop	{r3}
 800a068:	469e      	mov	lr, r3
 800a06a:	4770      	bx	lr

0800a06c <_fini>:
 800a06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a06e:	bf00      	nop
 800a070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a072:	bc08      	pop	{r3}
 800a074:	469e      	mov	lr, r3
 800a076:	4770      	bx	lr
